// modules are defined as an array
// [ module function, map of requires ]
//
// map of requires is short require name -> numeric require
//
// anything defined in a previous bundle is accessed via the
// orig method which is the require for previous bundles

(function(modules, entry, mainEntry, parcelRequireName, globalName) {
  /* eslint-disable no-undef */
  var globalObject =
    typeof globalThis !== 'undefined'
      ? globalThis
      : typeof self !== 'undefined'
      ? self
      : typeof window !== 'undefined'
      ? window
      : typeof global !== 'undefined'
      ? global
      : {};
  /* eslint-enable no-undef */

  // Save the require from previous bundle to this closure if any
  var previousRequire =
    typeof globalObject[parcelRequireName] === 'function' &&
    globalObject[parcelRequireName];

  var cache = previousRequire.cache || {};
  // Do not use `require` to prevent Webpack from trying to bundle this call
  var nodeRequire =
    typeof module !== 'undefined' &&
    typeof module.require === 'function' &&
    module.require.bind(module);

  function newRequire(name, jumped) {
    if (!cache[name]) {
      if (!modules[name]) {
        // if we cannot find the module within our internal map or
        // cache jump to the current global require ie. the last bundle
        // that was added to the page.
        var currentRequire =
          typeof globalObject[parcelRequireName] === 'function' &&
          globalObject[parcelRequireName];
        if (!jumped && currentRequire) {
          return currentRequire(name, true);
        }

        // If there are other bundles on this page the require from the
        // previous one is saved to 'previousRequire'. Repeat this as
        // many times as there are bundles until the module is found or
        // we exhaust the require chain.
        if (previousRequire) {
          return previousRequire(name, true);
        }

        // Try the node require function if it exists.
        if (nodeRequire && typeof name === 'string') {
          return nodeRequire(name);
        }

        var err = new Error("Cannot find module '" + name + "'");
        err.code = 'MODULE_NOT_FOUND';
        throw err;
      }

      localRequire.resolve = resolve;
      localRequire.cache = {};

      var module = (cache[name] = new newRequire.Module(name));

      modules[name][0].call(
        module.exports,
        localRequire,
        module,
        module.exports,
        this
      );
    }

    return cache[name].exports;

    function localRequire(x) {
      return newRequire(localRequire.resolve(x));
    }

    function resolve(x) {
      return modules[name][1][x] || x;
    }
  }

  function Module(moduleName) {
    this.id = moduleName;
    this.bundle = newRequire;
    this.exports = {};
  }

  newRequire.isParcelRequire = true;
  newRequire.Module = Module;
  newRequire.modules = modules;
  newRequire.cache = cache;
  newRequire.parent = previousRequire;
  newRequire.register = function(id, exports) {
    modules[id] = [
      function(require, module) {
        module.exports = exports;
      },
      {},
    ];
  };

  Object.defineProperty(newRequire, 'root', {
    get: function() {
      return globalObject[parcelRequireName];
    },
  });

  globalObject[parcelRequireName] = newRequire;

  for (var i = 0; i < entry.length; i++) {
    newRequire(entry[i]);
  }

  if (mainEntry) {
    // Expose entry point to Node, AMD or browser globals
    // Based on https://github.com/ForbesLindesay/umd/blob/master/template.js
    var mainExports = newRequire(mainEntry);

    // CommonJS
    if (typeof exports === 'object' && typeof module !== 'undefined') {
      module.exports = mainExports;

      // RequireJS
    } else if (typeof define === 'function' && define.amd) {
      define(function() {
        return mainExports;
      });

      // <script>
    } else if (globalName) {
      this[globalName] = mainExports;
    }
  }
})({"76y2S":[function(require,module,exports) {
var HMR_HOST = null;
var HMR_PORT = null;
var HMR_SECURE = false;
var HMR_ENV_HASH = "d1dd2152beb3c41d";
module.bundle.HMR_BUNDLE_ID = "c78c27f2d9598ca9";
"use strict";
function _createForOfIteratorHelper(o, allowArrayLike) {
    var it;
    if (typeof Symbol === "undefined" || o[Symbol.iterator] == null) {
        if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") {
            if (it) o = it;
            var i = 0;
            var F = function F1() {
            };
            return {
                s: F,
                n: function n() {
                    if (i >= o.length) return {
                        done: true
                    };
                    return {
                        done: false,
                        value: o[i++]
                    };
                },
                e: function e(_e) {
                    throw _e;
                },
                f: F
            };
        }
        throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
    }
    var normalCompletion = true, didErr = false, err;
    return {
        s: function s() {
            it = o[Symbol.iterator]();
        },
        n: function n() {
            var step = it.next();
            normalCompletion = step.done;
            return step;
        },
        e: function e(_e2) {
            didErr = true;
            err = _e2;
        },
        f: function f() {
            try {
                if (!normalCompletion && it.return != null) it.return();
            } finally{
                if (didErr) throw err;
            }
        }
    };
}
function _unsupportedIterableToArray(o, minLen) {
    if (!o) return;
    if (typeof o === "string") return _arrayLikeToArray(o, minLen);
    var n = Object.prototype.toString.call(o).slice(8, -1);
    if (n === "Object" && o.constructor) n = o.constructor.name;
    if (n === "Map" || n === "Set") return Array.from(o);
    if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
    if (len == null || len > arr.length) len = arr.length;
    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];
    return arr2;
}
/* global HMR_HOST, HMR_PORT, HMR_ENV_HASH, HMR_SECURE */ /*::
import type {
  HMRAsset,
  HMRMessage,
} from '@parcel/reporter-dev-server/src/HMRServer.js';
interface ParcelRequire {
  (string): mixed;
  cache: {|[string]: ParcelModule|};
  hotData: mixed;
  Module: any;
  parent: ?ParcelRequire;
  isParcelRequire: true;
  modules: {|[string]: [Function, {|[string]: string|}]|};
  HMR_BUNDLE_ID: string;
  root: ParcelRequire;
}
interface ParcelModule {
  hot: {|
    data: mixed,
    accept(cb: (Function) => void): void,
    dispose(cb: (mixed) => void): void,
    // accept(deps: Array<string> | string, cb: (Function) => void): void,
    // decline(): void,
    _acceptCallbacks: Array<(Function) => void>,
    _disposeCallbacks: Array<(mixed) => void>,
  |};
}
declare var module: {bundle: ParcelRequire, ...};
declare var HMR_HOST: string;
declare var HMR_PORT: string;
declare var HMR_ENV_HASH: string;
declare var HMR_SECURE: boolean;
*/ var OVERLAY_ID = '__parcel__error__overlay__';
var OldModule = module.bundle.Module;
function Module(moduleName) {
    OldModule.call(this, moduleName);
    this.hot = {
        data: module.bundle.hotData,
        _acceptCallbacks: [],
        _disposeCallbacks: [],
        accept: function accept(fn) {
            this._acceptCallbacks.push(fn || function() {
            });
        },
        dispose: function dispose(fn) {
            this._disposeCallbacks.push(fn);
        }
    };
    module.bundle.hotData = undefined;
}
module.bundle.Module = Module;
var checkedAssets, acceptedAssets, assetsToAccept;
function getHostname() {
    return HMR_HOST || (location.protocol.indexOf('http') === 0 ? location.hostname : 'localhost');
}
function getPort() {
    return HMR_PORT || location.port;
} // eslint-disable-next-line no-redeclare
var parent = module.bundle.parent;
if ((!parent || !parent.isParcelRequire) && typeof WebSocket !== 'undefined') {
    var hostname = getHostname();
    var port = getPort();
    var protocol = HMR_SECURE || location.protocol == 'https:' && !/localhost|127.0.0.1|0.0.0.0/.test(hostname) ? 'wss' : 'ws';
    var ws = new WebSocket(protocol + '://' + hostname + (port ? ':' + port : '') + '/'); // $FlowFixMe
    ws.onmessage = function(event) {
        checkedAssets = {
        };
        acceptedAssets = {
        };
        assetsToAccept = [];
        var data = JSON.parse(event.data);
        if (data.type === 'update') {
            // Remove error overlay if there is one
            removeErrorOverlay();
            var assets = data.assets.filter(function(asset) {
                return asset.envHash === HMR_ENV_HASH;
            }); // Handle HMR Update
            var handled = assets.every(function(asset) {
                return asset.type === 'css' || asset.type === 'js' && hmrAcceptCheck(module.bundle.root, asset.id, asset.depsByBundle);
            });
            if (handled) {
                console.clear();
                assets.forEach(function(asset) {
                    hmrApply(module.bundle.root, asset);
                });
                for(var i = 0; i < assetsToAccept.length; i++){
                    var id = assetsToAccept[i][1];
                    if (!acceptedAssets[id]) hmrAcceptRun(assetsToAccept[i][0], id);
                }
            } else window.location.reload();
        }
        if (data.type === 'error') {
            // Log parcel errors to console
            var _iterator = _createForOfIteratorHelper(data.diagnostics.ansi), _step;
            try {
                for(_iterator.s(); !(_step = _iterator.n()).done;){
                    var ansiDiagnostic = _step.value;
                    var stack = ansiDiagnostic.codeframe ? ansiDiagnostic.codeframe : ansiDiagnostic.stack;
                    console.error('🚨 [parcel]: ' + ansiDiagnostic.message + '\n' + stack + '\n\n' + ansiDiagnostic.hints.join('\n'));
                } // Render the fancy html overlay
            } catch (err) {
                _iterator.e(err);
            } finally{
                _iterator.f();
            }
            removeErrorOverlay();
            var overlay = createErrorOverlay(data.diagnostics.html); // $FlowFixMe
            document.body.appendChild(overlay);
        }
    };
    ws.onerror = function(e) {
        console.error(e.message);
    };
    ws.onclose = function() {
        console.warn('[parcel] 🚨 Connection to the HMR server was lost');
    };
}
function removeErrorOverlay() {
    var overlay = document.getElementById(OVERLAY_ID);
    if (overlay) {
        overlay.remove();
        console.log('[parcel] ✨ Error resolved');
    }
}
function createErrorOverlay(diagnostics) {
    var overlay = document.createElement('div');
    overlay.id = OVERLAY_ID;
    var errorHTML = '<div style="background: black; opacity: 0.85; font-size: 16px; color: white; position: fixed; height: 100%; width: 100%; top: 0px; left: 0px; padding: 30px; font-family: Menlo, Consolas, monospace; z-index: 9999;">';
    var _iterator2 = _createForOfIteratorHelper(diagnostics), _step2;
    try {
        for(_iterator2.s(); !(_step2 = _iterator2.n()).done;){
            var diagnostic = _step2.value;
            var stack = diagnostic.codeframe ? diagnostic.codeframe : diagnostic.stack;
            errorHTML += "\n      <div>\n        <div style=\"font-size: 18px; font-weight: bold; margin-top: 20px;\">\n          \uD83D\uDEA8 ".concat(diagnostic.message, "\n        </div>\n        <pre>\n          ").concat(stack, "\n        </pre>\n        <div>\n          ").concat(diagnostic.hints.map(function(hint) {
                return '<div>' + hint + '</div>';
            }).join(''), "\n        </div>\n      </div>\n    ");
        }
    } catch (err) {
        _iterator2.e(err);
    } finally{
        _iterator2.f();
    }
    errorHTML += '</div>';
    overlay.innerHTML = errorHTML;
    return overlay;
}
function getParents(bundle, id) /*: Array<[ParcelRequire, string]> */ {
    var modules = bundle.modules;
    if (!modules) return [];
    var parents = [];
    var k, d, dep;
    for(k in modules)for(d in modules[k][1]){
        dep = modules[k][1][d];
        if (dep === id || Array.isArray(dep) && dep[dep.length - 1] === id) parents.push([
            bundle,
            k
        ]);
    }
    if (bundle.parent) parents = parents.concat(getParents(bundle.parent, id));
    return parents;
}
function updateLink(link) {
    var newLink = link.cloneNode();
    newLink.onload = function() {
        if (link.parentNode !== null) // $FlowFixMe
        link.parentNode.removeChild(link);
    };
    newLink.setAttribute('href', link.getAttribute('href').split('?')[0] + '?' + Date.now()); // $FlowFixMe
    link.parentNode.insertBefore(newLink, link.nextSibling);
}
var cssTimeout = null;
function reloadCSS() {
    if (cssTimeout) return;
    cssTimeout = setTimeout(function() {
        var links = document.querySelectorAll('link[rel="stylesheet"]');
        for(var i = 0; i < links.length; i++){
            // $FlowFixMe[incompatible-type]
            var href = links[i].getAttribute('href');
            var hostname = getHostname();
            var servedFromHMRServer = hostname === 'localhost' ? new RegExp('^(https?:\\/\\/(0.0.0.0|127.0.0.1)|localhost):' + getPort()).test(href) : href.indexOf(hostname + ':' + getPort());
            var absolute = /^https?:\/\//i.test(href) && href.indexOf(window.location.origin) !== 0 && !servedFromHMRServer;
            if (!absolute) updateLink(links[i]);
        }
        cssTimeout = null;
    }, 50);
}
function hmrApply(bundle, asset) {
    var modules = bundle.modules;
    if (!modules) return;
    if (asset.type === 'css') {
        reloadCSS();
        return;
    }
    var deps = asset.depsByBundle[bundle.HMR_BUNDLE_ID];
    if (deps) {
        var fn = new Function('require', 'module', 'exports', asset.output);
        modules[asset.id] = [
            fn,
            deps
        ];
    } else if (bundle.parent) hmrApply(bundle.parent, asset);
}
function hmrAcceptCheck(bundle, id, depsByBundle) {
    var modules = bundle.modules;
    if (!modules) return;
    if (depsByBundle && !depsByBundle[bundle.HMR_BUNDLE_ID]) {
        // If we reached the root bundle without finding where the asset should go,
        // there's nothing to do. Mark as "accepted" so we don't reload the page.
        if (!bundle.parent) return true;
        return hmrAcceptCheck(bundle.parent, id, depsByBundle);
    }
    if (checkedAssets[id]) return;
    checkedAssets[id] = true;
    var cached = bundle.cache[id];
    assetsToAccept.push([
        bundle,
        id
    ]);
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) return true;
    return getParents(module.bundle.root, id).some(function(v) {
        return hmrAcceptCheck(v[0], v[1], null);
    });
}
function hmrAcceptRun(bundle, id) {
    var cached = bundle.cache[id];
    bundle.hotData = {
    };
    if (cached && cached.hot) cached.hot.data = bundle.hotData;
    if (cached && cached.hot && cached.hot._disposeCallbacks.length) cached.hot._disposeCallbacks.forEach(function(cb) {
        cb(bundle.hotData);
    });
    delete bundle.cache[id];
    bundle(id);
    cached = bundle.cache[id];
    if (cached && cached.hot && cached.hot._acceptCallbacks.length) cached.hot._acceptCallbacks.forEach(function(cb) {
        var assetsToAlsoAccept = cb(function() {
            return getParents(module.bundle.root, id);
        });
        if (assetsToAlsoAccept && assetsToAccept.length) // $FlowFixMe[method-unbinding]
        assetsToAccept.push.apply(assetsToAccept, assetsToAlsoAccept);
    });
    acceptedAssets[id] = true;
}

},{}],"7nT7Y":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
var _mainMjs = require("./modules/fs/main.mjs");
var _mainMjsDefault = parcelHelpers.interopDefault(_mainMjs);
var _wasmBinaryMjs = require("./modules/fs/wasmBinary.mjs");
var _wasmBinaryMjsDefault = parcelHelpers.interopDefault(_wasmBinaryMjs);
let container = null;
let files = null;
let workerFS = _mainMjsDefault.default({
    wasmBinary: _wasmBinaryMjsDefault.default
});
workerFS.then(async (Module)=>{
    let FS = Module.FS;
    FS.mkdir('/data');
    FS.mount(Module.FS.filesystems.WORKERFS, {
        files: files,
        blobs: []
    }, '/data');
// console.log('~~~~~~~~~', FS)
// let fileContents = FS.readFile("/data/container", { encoding: "utf8" });
// console.log("File contents:");
// console.log(fileContents);
});
self.onmessage = (msg)=>{
    // container = msg.data;
    // console.log('container', container)
    files = msg.data;
    files.name = "test.wav";
    console.log(files);
    self.postMessage("Got it");
};

},{"./modules/fs/main.mjs":"KV1Vq","./modules/fs/wasmBinary.mjs":"5uMjN","@parcel/transformer-js/src/esmodule-helpers.js":"dKQH3"}],"KV1Vq":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
var __dirname = "frontend/src/modules/fs";
var Buffer = require("buffer").Buffer;
var __filename = "frontend/src/modules/fs/main.mjs";
var process = require("process");
var Module = function() {
    var _scriptDir = typeof document !== 'undefined' && document.currentScript ? document.currentScript.src : undefined;
    if (typeof __filename !== 'undefined') _scriptDir = _scriptDir || __filename;
    return function(Module1) {
        Module1 = Module1 || {
        };
        var Module1 = typeof Module1 !== "undefined" ? Module1 : {
        };
        var readyPromiseResolve, readyPromiseReject;
        Module1["ready"] = new Promise(function(resolve, reject) {
            readyPromiseResolve = resolve;
            readyPromiseReject = reject;
        });
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_main")) {
            Object.defineProperty(Module1["ready"], "_main", {
                configurable: true,
                get: function() {
                    abort("You are getting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_main", {
                configurable: true,
                set: function() {
                    abort("You are setting _main on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_emscripten_stack_get_base")) {
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_base", {
                configurable: true,
                get: function() {
                    abort("You are getting _emscripten_stack_get_base on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_base", {
                configurable: true,
                set: function() {
                    abort("You are setting _emscripten_stack_get_base on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_emscripten_stack_get_end")) {
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_end", {
                configurable: true,
                get: function() {
                    abort("You are getting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_end", {
                configurable: true,
                set: function() {
                    abort("You are setting _emscripten_stack_get_end on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_emscripten_stack_set_limits")) {
            Object.defineProperty(Module1["ready"], "_emscripten_stack_set_limits", {
                configurable: true,
                get: function() {
                    abort("You are getting _emscripten_stack_set_limits on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_emscripten_stack_set_limits", {
                configurable: true,
                set: function() {
                    abort("You are setting _emscripten_stack_set_limits on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_emscripten_stack_get_free")) {
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_free", {
                configurable: true,
                get: function() {
                    abort("You are getting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_emscripten_stack_get_free", {
                configurable: true,
                set: function() {
                    abort("You are setting _emscripten_stack_get_free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_emscripten_stack_init")) {
            Object.defineProperty(Module1["ready"], "_emscripten_stack_init", {
                configurable: true,
                get: function() {
                    abort("You are getting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_emscripten_stack_init", {
                configurable: true,
                set: function() {
                    abort("You are setting _emscripten_stack_init on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_stackSave")) {
            Object.defineProperty(Module1["ready"], "_stackSave", {
                configurable: true,
                get: function() {
                    abort("You are getting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_stackSave", {
                configurable: true,
                set: function() {
                    abort("You are setting _stackSave on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_stackRestore")) {
            Object.defineProperty(Module1["ready"], "_stackRestore", {
                configurable: true,
                get: function() {
                    abort("You are getting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_stackRestore", {
                configurable: true,
                set: function() {
                    abort("You are setting _stackRestore on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_stackAlloc")) {
            Object.defineProperty(Module1["ready"], "_stackAlloc", {
                configurable: true,
                get: function() {
                    abort("You are getting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_stackAlloc", {
                configurable: true,
                set: function() {
                    abort("You are setting _stackAlloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "___wasm_call_ctors")) {
            Object.defineProperty(Module1["ready"], "___wasm_call_ctors", {
                configurable: true,
                get: function() {
                    abort("You are getting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "___wasm_call_ctors", {
                configurable: true,
                set: function() {
                    abort("You are setting ___wasm_call_ctors on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_fflush")) {
            Object.defineProperty(Module1["ready"], "_fflush", {
                configurable: true,
                get: function() {
                    abort("You are getting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_fflush", {
                configurable: true,
                set: function() {
                    abort("You are setting _fflush on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "___errno_location")) {
            Object.defineProperty(Module1["ready"], "___errno_location", {
                configurable: true,
                get: function() {
                    abort("You are getting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "___errno_location", {
                configurable: true,
                set: function() {
                    abort("You are setting ___errno_location on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_malloc")) {
            Object.defineProperty(Module1["ready"], "_malloc", {
                configurable: true,
                get: function() {
                    abort("You are getting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_malloc", {
                configurable: true,
                set: function() {
                    abort("You are setting _malloc on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "_free")) {
            Object.defineProperty(Module1["ready"], "_free", {
                configurable: true,
                get: function() {
                    abort("You are getting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "_free", {
                configurable: true,
                set: function() {
                    abort("You are setting _free on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "___getTypeName")) {
            Object.defineProperty(Module1["ready"], "___getTypeName", {
                configurable: true,
                get: function() {
                    abort("You are getting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "___getTypeName", {
                configurable: true,
                set: function() {
                    abort("You are setting ___getTypeName on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "___embind_register_native_and_builtin_types")) {
            Object.defineProperty(Module1["ready"], "___embind_register_native_and_builtin_types", {
                configurable: true,
                get: function() {
                    abort("You are getting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "___embind_register_native_and_builtin_types", {
                configurable: true,
                set: function() {
                    abort("You are setting ___embind_register_native_and_builtin_types on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        if (!Object.getOwnPropertyDescriptor(Module1["ready"], "onRuntimeInitialized")) {
            Object.defineProperty(Module1["ready"], "onRuntimeInitialized", {
                configurable: true,
                get: function() {
                    abort("You are getting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
            Object.defineProperty(Module1["ready"], "onRuntimeInitialized", {
                configurable: true,
                set: function() {
                    abort("You are setting onRuntimeInitialized on the Promise object, instead of the instance. Use .then() to get called back with the instance, see the MODULARIZE docs in src/settings.js");
                }
            });
        }
        var moduleOverrides = {
        };
        var key;
        for(key in Module1)if (Module1.hasOwnProperty(key)) moduleOverrides[key] = Module1[key];
        var arguments_ = [];
        var thisProgram = "./this.program";
        var quit_ = function(status, toThrow) {
            throw toThrow;
        };
        var ENVIRONMENT_IS_WEB = typeof window === "object";
        var ENVIRONMENT_IS_WORKER = typeof importScripts === "function";
        var ENVIRONMENT_IS_NODE = typeof process === "object" && typeof process.versions === "object" && typeof process.versions.node === "string";
        var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;
        if (Module1["ENVIRONMENT"]) throw new Error("Module.ENVIRONMENT has been deprecated. To force the environment, use the ENVIRONMENT compile-time option (for example, -s ENVIRONMENT=web or -s ENVIRONMENT=node)");
        var scriptDirectory = "";
        function locateFile(path) {
            if (Module1["locateFile"]) return Module1["locateFile"](path, scriptDirectory);
            return scriptDirectory + path;
        }
        var read_, readAsync, readBinary, setWindowTitle;
        var nodeFS;
        var nodePath;
        if (ENVIRONMENT_IS_NODE) {
            if (!(typeof process === "object" && typeof require === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = require("path").dirname(scriptDirectory) + "/";
            else scriptDirectory = __dirname + "/";
            read_ = function shell_read(filename, binary) {
                if (!nodeFS) nodeFS = require("fs");
                if (!nodePath) nodePath = require("path");
                filename = nodePath["normalize"](filename);
                return nodeFS["readFileSync"](filename, binary ? null : "utf8");
            };
            readBinary = function readBinary1(filename) {
                var ret = read_(filename, true);
                if (!ret.buffer) ret = new Uint8Array(ret);
                assert(ret.buffer);
                return ret;
            };
            readAsync = function readAsync1(filename, onload, onerror) {
                if (!nodeFS) nodeFS = require("fs");
                if (!nodePath) nodePath = require("path");
                filename = nodePath["normalize"](filename);
                nodeFS["readFile"](filename, function(err, data) {
                    if (err) onerror(err);
                    else onload(data.buffer);
                });
            };
            if (process["argv"].length > 1) thisProgram = process["argv"][1].replace(/\\/g, "/");
            arguments_ = process["argv"].slice(2);
            process["on"]("uncaughtException", function(ex) {
                if (!(ex instanceof ExitStatus)) throw ex;
            });
            process["on"]("unhandledRejection", abort);
            quit_ = function(status, toThrow) {
                if (keepRuntimeAlive()) {
                    process["exitCode"] = status;
                    throw toThrow;
                }
                process["exit"](status);
            };
            Module1["inspect"] = function() {
                return "[Emscripten Module object]";
            };
        } else if (ENVIRONMENT_IS_SHELL) {
            if (typeof process === "object" && typeof require === "function" || typeof window === "object" || typeof importScripts === "function") throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            if (typeof read != "undefined") read_ = function shell_read(f) {
                return read(f);
            };
            readBinary = function readBinary1(f) {
                var data;
                if (typeof readbuffer === "function") return new Uint8Array(readbuffer(f));
                data = read(f, "binary");
                assert(typeof data === "object");
                return data;
            };
            readAsync = function readAsync1(f, onload, onerror) {
                setTimeout(function() {
                    onload(readBinary(f));
                }, 0);
            };
            if (typeof scriptArgs != "undefined") arguments_ = scriptArgs;
            else if (typeof arguments != "undefined") arguments_ = arguments;
            if (typeof quit === "function") quit_ = function(status) {
                quit(status);
            };
            if (typeof print !== "undefined") {
                if (typeof console === "undefined") console = {
                };
                console.log = print;
                console.warn = console.error = typeof printErr !== "undefined" ? printErr : print;
            }
        } else if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
            if (ENVIRONMENT_IS_WORKER) scriptDirectory = self.location.href;
            else if (typeof document !== "undefined" && document.currentScript) scriptDirectory = document.currentScript.src;
            if (_scriptDir) scriptDirectory = _scriptDir;
            if (scriptDirectory.indexOf("blob:") !== 0) scriptDirectory = scriptDirectory.substr(0, scriptDirectory.lastIndexOf("/") + 1);
            else scriptDirectory = "";
            if (!(typeof window === "object" || typeof importScripts === "function")) throw new Error("not compiled for this environment (did you build to HTML and try to run it not on the web, or set ENVIRONMENT to something - like node - and run it someplace else - like on the web?)");
            read_ = function(url) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.send(null);
                return xhr.responseText;
            };
            if (ENVIRONMENT_IS_WORKER) readBinary = function(url) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, false);
                xhr.responseType = "arraybuffer";
                xhr.send(null);
                return new Uint8Array(xhr.response);
            };
            readAsync = function(url, onload, onerror) {
                var xhr = new XMLHttpRequest();
                xhr.open("GET", url, true);
                xhr.responseType = "arraybuffer";
                xhr.onload = function() {
                    if (xhr.status == 200 || xhr.status == 0 && xhr.response) {
                        onload(xhr.response);
                        return;
                    }
                    onerror();
                };
                xhr.onerror = onerror;
                xhr.send(null);
            };
            setWindowTitle = function(title) {
                document.title = title;
            };
        } else throw new Error("environment detection error");
        var out = Module1["print"] || console.log.bind(console);
        var err = Module1["printErr"] || console.warn.bind(console);
        for(key in moduleOverrides)if (moduleOverrides.hasOwnProperty(key)) Module1[key] = moduleOverrides[key];
        moduleOverrides = null;
        if (Module1["arguments"]) arguments_ = Module1["arguments"];
        if (!Object.getOwnPropertyDescriptor(Module1, "arguments")) Object.defineProperty(Module1, "arguments", {
            configurable: true,
            get: function() {
                abort("Module.arguments has been replaced with plain arguments_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (Module1["thisProgram"]) thisProgram = Module1["thisProgram"];
        if (!Object.getOwnPropertyDescriptor(Module1, "thisProgram")) Object.defineProperty(Module1, "thisProgram", {
            configurable: true,
            get: function() {
                abort("Module.thisProgram has been replaced with plain thisProgram (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (Module1["quit"]) quit_ = Module1["quit"];
        if (!Object.getOwnPropertyDescriptor(Module1, "quit")) Object.defineProperty(Module1, "quit", {
            configurable: true,
            get: function() {
                abort("Module.quit has been replaced with plain quit_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        assert(typeof Module1["memoryInitializerPrefixURL"] === "undefined", "Module.memoryInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module1["pthreadMainPrefixURL"] === "undefined", "Module.pthreadMainPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module1["cdInitializerPrefixURL"] === "undefined", "Module.cdInitializerPrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module1["filePackagePrefixURL"] === "undefined", "Module.filePackagePrefixURL option was removed, use Module.locateFile instead");
        assert(typeof Module1["read"] === "undefined", "Module.read option was removed (modify read_ in JS)");
        assert(typeof Module1["readAsync"] === "undefined", "Module.readAsync option was removed (modify readAsync in JS)");
        assert(typeof Module1["readBinary"] === "undefined", "Module.readBinary option was removed (modify readBinary in JS)");
        assert(typeof Module1["setWindowTitle"] === "undefined", "Module.setWindowTitle option was removed (modify setWindowTitle in JS)");
        assert(typeof Module1["TOTAL_MEMORY"] === "undefined", "Module.TOTAL_MEMORY has been renamed Module.INITIAL_MEMORY");
        if (!Object.getOwnPropertyDescriptor(Module1, "read")) Object.defineProperty(Module1, "read", {
            configurable: true,
            get: function() {
                abort("Module.read has been replaced with plain read_ (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (!Object.getOwnPropertyDescriptor(Module1, "readAsync")) Object.defineProperty(Module1, "readAsync", {
            configurable: true,
            get: function() {
                abort("Module.readAsync has been replaced with plain readAsync (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (!Object.getOwnPropertyDescriptor(Module1, "readBinary")) Object.defineProperty(Module1, "readBinary", {
            configurable: true,
            get: function() {
                abort("Module.readBinary has been replaced with plain readBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (!Object.getOwnPropertyDescriptor(Module1, "setWindowTitle")) Object.defineProperty(Module1, "setWindowTitle", {
            configurable: true,
            get: function() {
                abort("Module.setWindowTitle has been replaced with plain setWindowTitle (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        var PROXYFS = "PROXYFS is no longer included by default; build with -lproxyfs.js";
        var NODEFS = "NODEFS is no longer included by default; build with -lnodefs.js";
        assert(!ENVIRONMENT_IS_SHELL, "shell environment detected but not enabled at build time.  Add 'shell' to `-s ENVIRONMENT` to enable.");
        var STACK_ALIGN = 16;
        function getNativeTypeSize(type) {
            switch(type){
                case "i1":
                case "i8":
                    return 1;
                case "i16":
                    return 2;
                case "i32":
                    return 4;
                case "i64":
                    return 8;
                case "float":
                    return 4;
                case "double":
                    return 8;
                default:
                    if (type[type.length - 1] === "*") return 4;
                    else if (type[0] === "i") {
                        var bits = Number(type.substr(1));
                        assert(bits % 8 === 0, "getNativeTypeSize invalid bits " + bits + ", type " + type);
                        return bits / 8;
                    } else return 0;
            }
        }
        function warnOnce(text) {
            if (!warnOnce.shown) warnOnce.shown = {
            };
            if (!warnOnce.shown[text]) {
                warnOnce.shown[text] = 1;
                err(text);
            }
        }
        function convertJsFunctionToWasm(func, sig) {
            if (typeof WebAssembly.Function === "function") {
                var typeNames = {
                    "i": "i32",
                    "j": "i64",
                    "f": "f32",
                    "d": "f64"
                };
                var type = {
                    parameters: [],
                    results: sig[0] == "v" ? [] : [
                        typeNames[sig[0]]
                    ]
                };
                for(var i = 1; i < sig.length; ++i)type.parameters.push(typeNames[sig[i]]);
                return new WebAssembly.Function(type, func);
            }
            var typeSection = [
                1,
                0,
                1,
                96
            ];
            var sigRet = sig.slice(0, 1);
            var sigParam = sig.slice(1);
            var typeCodes = {
                "i": 127,
                "j": 126,
                "f": 125,
                "d": 124
            };
            typeSection.push(sigParam.length);
            for(var i = 0; i < sigParam.length; ++i)typeSection.push(typeCodes[sigParam[i]]);
            if (sigRet == "v") typeSection.push(0);
            else typeSection = typeSection.concat([
                1,
                typeCodes[sigRet]
            ]);
            typeSection[1] = typeSection.length - 2;
            var bytes = new Uint8Array([
                0,
                97,
                115,
                109,
                1,
                0,
                0,
                0
            ].concat(typeSection, [
                2,
                7,
                1,
                1,
                101,
                1,
                102,
                0,
                0,
                7,
                5,
                1,
                1,
                102,
                0,
                0
            ]));
            var module = new WebAssembly.Module(bytes);
            var instance = new WebAssembly.Instance(module, {
                "e": {
                    "f": func
                }
            });
            var wrappedFunc = instance.exports["f"];
            return wrappedFunc;
        }
        var freeTableIndexes = [];
        var functionsInTableMap;
        function getEmptyTableSlot() {
            if (freeTableIndexes.length) return freeTableIndexes.pop();
            try {
                wasmTable.grow(1);
            } catch (err1) {
                if (!(err1 instanceof RangeError)) throw err1;
                throw "Unable to grow wasm table. Set ALLOW_TABLE_GROWTH.";
            }
            return wasmTable.length - 1;
        }
        function addFunctionWasm(func, sig) {
            if (!functionsInTableMap) {
                functionsInTableMap = new WeakMap();
                for(var i = 0; i < wasmTable.length; i++){
                    var item = wasmTable.get(i);
                    if (item) functionsInTableMap.set(item, i);
                }
            }
            if (functionsInTableMap.has(func)) return functionsInTableMap.get(func);
            var ret = getEmptyTableSlot();
            try {
                wasmTable.set(ret, func);
            } catch (err1) {
                if (!(err1 instanceof TypeError)) throw err1;
                assert(typeof sig !== "undefined", "Missing signature argument to addFunction: " + func);
                var wrapped = convertJsFunctionToWasm(func, sig);
                wasmTable.set(ret, wrapped);
            }
            functionsInTableMap.set(func, ret);
            return ret;
        }
        function removeFunction(index) {
            functionsInTableMap.delete(wasmTable.get(index));
            freeTableIndexes.push(index);
        }
        function addFunction(func, sig) {
            assert(typeof func !== "undefined");
            return addFunctionWasm(func, sig);
        }
        var tempRet0 = 0;
        var setTempRet0 = function(value) {
            tempRet0 = value;
        };
        var getTempRet0 = function() {
            return tempRet0;
        };
        var wasmBinary;
        if (Module1["wasmBinary"]) wasmBinary = Module1["wasmBinary"];
        if (!Object.getOwnPropertyDescriptor(Module1, "wasmBinary")) Object.defineProperty(Module1, "wasmBinary", {
            configurable: true,
            get: function() {
                abort("Module.wasmBinary has been replaced with plain wasmBinary (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        var noExitRuntime = Module1["noExitRuntime"] || true;
        if (!Object.getOwnPropertyDescriptor(Module1, "noExitRuntime")) Object.defineProperty(Module1, "noExitRuntime", {
            configurable: true,
            get: function() {
                abort("Module.noExitRuntime has been replaced with plain noExitRuntime (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        if (typeof WebAssembly !== "object") abort("no native wasm support detected");
        function setValue(ptr, value, type, noSafe) {
            type = type || "i8";
            if (type.charAt(type.length - 1) === "*") type = "i32";
            switch(type){
                case "i1":
                    HEAP8[ptr >>> 0] = value;
                    break;
                case "i8":
                    HEAP8[ptr >>> 0] = value;
                    break;
                case "i16":
                    HEAP16[ptr >>> 1] = value;
                    break;
                case "i32":
                    HEAP32[ptr >>> 2] = value;
                    break;
                case "i64":
                    tempI64 = [
                        value >>> 0,
                        (tempDouble = value, +Math.abs(tempDouble) >= 1 ? tempDouble > 0 ? (Math.min(+Math.floor(tempDouble / 4294967296), 4294967295) | 0) >>> 0 : ~~+Math.ceil((tempDouble - +(~~tempDouble >>> 0)) / 4294967296) >>> 0 : 0)
                    ], HEAP32[ptr >>> 2] = tempI64[0], HEAP32[ptr + 4 >>> 2] = tempI64[1];
                    break;
                case "float":
                    HEAPF32[ptr >>> 2] = value;
                    break;
                case "double":
                    HEAPF64[ptr >>> 3] = value;
                    break;
                default:
                    abort("invalid type for setValue: " + type);
            }
        }
        function getValue(ptr, type, noSafe) {
            type = type || "i8";
            if (type.charAt(type.length - 1) === "*") type = "i32";
            switch(type){
                case "i1":
                    return HEAP8[ptr >>> 0];
                case "i8":
                    return HEAP8[ptr >>> 0];
                case "i16":
                    return HEAP16[ptr >>> 1];
                case "i32":
                    return HEAP32[ptr >>> 2];
                case "i64":
                    return HEAP32[ptr >>> 2];
                case "float":
                    return HEAPF32[ptr >>> 2];
                case "double":
                    return HEAPF64[ptr >>> 3];
                default:
                    abort("invalid type for getValue: " + type);
            }
            return null;
        }
        var wasmMemory;
        var ABORT = false;
        var EXITSTATUS;
        function assert(condition, text) {
            if (!condition) abort("Assertion failed: " + text);
        }
        function getCFunc(ident) {
            var func = Module1["_" + ident];
            assert(func, "Cannot call unknown function " + ident + ", make sure it is exported");
            return func;
        }
        function ccall(ident, returnType, argTypes, args, opts) {
            var toC = {
                "string": function(str) {
                    var ret = 0;
                    if (str !== null && str !== undefined && str !== 0) {
                        var len = (str.length << 2) + 1;
                        ret = stackAlloc(len);
                        stringToUTF8(str, ret, len);
                    }
                    return ret;
                },
                "array": function(arr) {
                    var ret = stackAlloc(arr.length);
                    writeArrayToMemory(arr, ret);
                    return ret;
                }
            };
            function convertReturnValue(ret) {
                if (returnType === "string") return UTF8ToString(ret);
                if (returnType === "boolean") return Boolean(ret);
                return ret;
            }
            var func = getCFunc(ident);
            var cArgs = [];
            var stack = 0;
            assert(returnType !== "array", 'Return type should not be "array".');
            if (args) for(var i = 0; i < args.length; i++){
                var converter = toC[argTypes[i]];
                if (converter) {
                    if (stack === 0) stack = stackSave();
                    cArgs[i] = converter(args[i]);
                } else cArgs[i] = args[i];
            }
            var ret = func.apply(null, cArgs);
            function onDone(ret1) {
                if (stack !== 0) stackRestore(stack);
                return convertReturnValue(ret1);
            }
            var asyncMode = opts && opts.async;
            if (Asyncify.currData) {
                assert(asyncMode, "The call to " + ident + " is running asynchronously. If this was intended, add the async option to the ccall/cwrap call.");
                return Asyncify.whenDone().then(onDone);
            }
            ret = onDone(ret);
            if (asyncMode) return Promise.resolve(ret);
            return ret;
        }
        function cwrap(ident, returnType, argTypes, opts) {
            return function() {
                return ccall(ident, returnType, argTypes, arguments, opts);
            };
        }
        var ALLOC_NORMAL = 0;
        var ALLOC_STACK = 1;
        function allocate(slab, allocator) {
            var ret;
            assert(typeof allocator === "number", "allocate no longer takes a type argument");
            assert(typeof slab !== "number", "allocate no longer takes a number as arg0");
            if (allocator == ALLOC_STACK) ret = stackAlloc(slab.length);
            else ret = _malloc(slab.length);
            if (slab.subarray || slab.slice) HEAPU8.set(slab, ret >>> 0);
            else HEAPU8.set(new Uint8Array(slab), ret >>> 0);
            return ret;
        }
        var UTF8Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf8") : undefined;
        function UTF8ArrayToString(heap, idx, maxBytesToRead) {
            idx >>>= 0;
            var endIdx = idx + maxBytesToRead;
            var endPtr = idx;
            while(heap[endPtr >>> 0] && !(endPtr >= endIdx))++endPtr;
            if (endPtr - idx > 16 && heap.subarray && UTF8Decoder) return UTF8Decoder.decode(heap.subarray(idx >>> 0, endPtr >>> 0));
            else {
                var str = "";
                while(idx < endPtr){
                    var u0 = heap[(idx++) >>> 0];
                    if (!(u0 & 128)) {
                        str += String.fromCharCode(u0);
                        continue;
                    }
                    var u1 = heap[(idx++) >>> 0] & 63;
                    if ((u0 & 224) == 192) {
                        str += String.fromCharCode((u0 & 31) << 6 | u1);
                        continue;
                    }
                    var u2 = heap[(idx++) >>> 0] & 63;
                    if ((u0 & 240) == 224) u0 = (u0 & 15) << 12 | u1 << 6 | u2;
                    else {
                        if ((u0 & 248) != 240) warnOnce("Invalid UTF-8 leading byte 0x" + u0.toString(16) + " encountered when deserializing a UTF-8 string in wasm memory to a JS string!");
                        u0 = (u0 & 7) << 18 | u1 << 12 | u2 << 6 | heap[(idx++) >>> 0] & 63;
                    }
                    if (u0 < 65536) str += String.fromCharCode(u0);
                    else {
                        var ch = u0 - 65536;
                        str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                    }
                }
            }
            return str;
        }
        function UTF8ToString(ptr, maxBytesToRead) {
            ptr >>>= 0;
            return ptr ? UTF8ArrayToString(HEAPU8, ptr, maxBytesToRead) : "";
        }
        function stringToUTF8Array(str, heap, outIdx, maxBytesToWrite) {
            outIdx >>>= 0;
            if (!(maxBytesToWrite > 0)) return 0;
            var startIdx = outIdx;
            var endIdx = outIdx + maxBytesToWrite - 1;
            for(var i = 0; i < str.length; ++i){
                var u = str.charCodeAt(i);
                if (u >= 55296 && u <= 57343) {
                    var u1 = str.charCodeAt(++i);
                    u = 65536 + ((u & 1023) << 10) | u1 & 1023;
                }
                if (u <= 127) {
                    if (outIdx >= endIdx) break;
                    heap[(outIdx++) >>> 0] = u;
                } else if (u <= 2047) {
                    if (outIdx + 1 >= endIdx) break;
                    heap[(outIdx++) >>> 0] = 192 | u >> 6;
                    heap[(outIdx++) >>> 0] = 128 | u & 63;
                } else if (u <= 65535) {
                    if (outIdx + 2 >= endIdx) break;
                    heap[(outIdx++) >>> 0] = 224 | u >> 12;
                    heap[(outIdx++) >>> 0] = 128 | u >> 6 & 63;
                    heap[(outIdx++) >>> 0] = 128 | u & 63;
                } else {
                    if (outIdx + 3 >= endIdx) break;
                    if (u >= 2097152) warnOnce("Invalid Unicode code point 0x" + u.toString(16) + " encountered when serializing a JS string to a UTF-8 string in wasm memory! (Valid unicode code points should be in range 0-0x1FFFFF).");
                    heap[(outIdx++) >>> 0] = 240 | u >> 18;
                    heap[(outIdx++) >>> 0] = 128 | u >> 12 & 63;
                    heap[(outIdx++) >>> 0] = 128 | u >> 6 & 63;
                    heap[(outIdx++) >>> 0] = 128 | u & 63;
                }
            }
            heap[outIdx >>> 0] = 0;
            return outIdx - startIdx;
        }
        function stringToUTF8(str, outPtr, maxBytesToWrite) {
            assert(typeof maxBytesToWrite == "number", "stringToUTF8(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
            return stringToUTF8Array(str, HEAPU8, outPtr, maxBytesToWrite);
        }
        function lengthBytesUTF8(str) {
            var len = 0;
            for(var i = 0; i < str.length; ++i){
                var u = str.charCodeAt(i);
                if (u >= 55296 && u <= 57343) u = 65536 + ((u & 1023) << 10) | str.charCodeAt(++i) & 1023;
                if (u <= 127) ++len;
                else if (u <= 2047) len += 2;
                else if (u <= 65535) len += 3;
                else len += 4;
            }
            return len;
        }
        function AsciiToString(ptr) {
            ptr >>>= 0;
            var str = "";
            while(true){
                var ch = HEAPU8[(ptr++) >>> 0];
                if (!ch) return str;
                str += String.fromCharCode(ch);
            }
        }
        function stringToAscii(str, outPtr) {
            return writeAsciiToMemory(str, outPtr, false);
        }
        var UTF16Decoder = typeof TextDecoder !== "undefined" ? new TextDecoder("utf-16le") : undefined;
        function UTF16ToString(ptr, maxBytesToRead) {
            assert(ptr % 2 == 0, "Pointer passed to UTF16ToString must be aligned to two bytes!");
            var endPtr = ptr;
            var idx = endPtr >> 1;
            var maxIdx = idx + maxBytesToRead / 2;
            while(!(idx >= maxIdx) && HEAPU16[idx >>> 0])++idx;
            endPtr = idx << 1;
            if (endPtr - ptr > 32 && UTF16Decoder) return UTF16Decoder.decode(HEAPU8.subarray(ptr >>> 0, endPtr >>> 0));
            else {
                var str = "";
                for(var i = 0; !(i >= maxBytesToRead / 2); ++i){
                    var codeUnit = HEAP16[ptr + i * 2 >>> 1];
                    if (codeUnit == 0) break;
                    str += String.fromCharCode(codeUnit);
                }
                return str;
            }
        }
        function stringToUTF16(str, outPtr, maxBytesToWrite) {
            assert(outPtr % 2 == 0, "Pointer passed to stringToUTF16 must be aligned to two bytes!");
            assert(typeof maxBytesToWrite == "number", "stringToUTF16(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
            if (maxBytesToWrite === undefined) maxBytesToWrite = 2147483647;
            if (maxBytesToWrite < 2) return 0;
            maxBytesToWrite -= 2;
            var startPtr = outPtr;
            var numCharsToWrite = maxBytesToWrite < str.length * 2 ? maxBytesToWrite / 2 : str.length;
            for(var i = 0; i < numCharsToWrite; ++i){
                var codeUnit = str.charCodeAt(i);
                HEAP16[outPtr >>> 1] = codeUnit;
                outPtr += 2;
            }
            HEAP16[outPtr >>> 1] = 0;
            return outPtr - startPtr;
        }
        function lengthBytesUTF16(str) {
            return str.length * 2;
        }
        function UTF32ToString(ptr, maxBytesToRead) {
            assert(ptr % 4 == 0, "Pointer passed to UTF32ToString must be aligned to four bytes!");
            var i = 0;
            var str = "";
            while(!(i >= maxBytesToRead / 4)){
                var utf32 = HEAP32[ptr + i * 4 >>> 2];
                if (utf32 == 0) break;
                ++i;
                if (utf32 >= 65536) {
                    var ch = utf32 - 65536;
                    str += String.fromCharCode(55296 | ch >> 10, 56320 | ch & 1023);
                } else str += String.fromCharCode(utf32);
            }
            return str;
        }
        function stringToUTF32(str, outPtr, maxBytesToWrite) {
            outPtr >>>= 0;
            assert(outPtr % 4 == 0, "Pointer passed to stringToUTF32 must be aligned to four bytes!");
            assert(typeof maxBytesToWrite == "number", "stringToUTF32(str, outPtr, maxBytesToWrite) is missing the third parameter that specifies the length of the output buffer!");
            if (maxBytesToWrite === undefined) maxBytesToWrite = 2147483647;
            if (maxBytesToWrite < 4) return 0;
            var startPtr = outPtr;
            var endPtr = startPtr + maxBytesToWrite - 4;
            for(var i = 0; i < str.length; ++i){
                var codeUnit = str.charCodeAt(i);
                if (codeUnit >= 55296 && codeUnit <= 57343) {
                    var trailSurrogate = str.charCodeAt(++i);
                    codeUnit = 65536 + ((codeUnit & 1023) << 10) | trailSurrogate & 1023;
                }
                HEAP32[outPtr >>> 2] = codeUnit;
                outPtr += 4;
                if (outPtr + 4 > endPtr) break;
            }
            HEAP32[outPtr >>> 2] = 0;
            return outPtr - startPtr;
        }
        function lengthBytesUTF32(str) {
            var len = 0;
            for(var i = 0; i < str.length; ++i){
                var codeUnit = str.charCodeAt(i);
                if (codeUnit >= 55296 && codeUnit <= 57343) ++i;
                len += 4;
            }
            return len;
        }
        function allocateUTF8(str) {
            var size = lengthBytesUTF8(str) + 1;
            var ret = _malloc(size);
            if (ret) stringToUTF8Array(str, HEAP8, ret, size);
            return ret;
        }
        function allocateUTF8OnStack(str) {
            var size = lengthBytesUTF8(str) + 1;
            var ret = stackAlloc(size);
            stringToUTF8Array(str, HEAP8, ret, size);
            return ret;
        }
        function writeStringToMemory(string, buffer, dontAddNull) {
            warnOnce("writeStringToMemory is deprecated and should not be called! Use stringToUTF8() instead!");
            var lastChar, end;
            if (dontAddNull) {
                end = buffer + lengthBytesUTF8(string);
                lastChar = HEAP8[end >>> 0];
            }
            stringToUTF8(string, buffer, Infinity);
            if (dontAddNull) HEAP8[end >>> 0] = lastChar;
        }
        function writeArrayToMemory(array, buffer) {
            assert(array.length >= 0, "writeArrayToMemory array must have a length (should be an array or typed array)");
            HEAP8.set(array, buffer >>> 0);
        }
        function writeAsciiToMemory(str, buffer, dontAddNull) {
            for(var i = 0; i < str.length; ++i){
                assert(str.charCodeAt(i) === str.charCodeAt(i) & 255);
                HEAP8[(buffer++) >>> 0] = str.charCodeAt(i);
            }
            if (!dontAddNull) HEAP8[buffer >>> 0] = 0;
        }
        function alignUp(x, multiple) {
            if (x % multiple > 0) x += multiple - x % multiple;
            return x;
        }
        var HEAP, buffer, HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;
        function updateGlobalBufferAndViews(buf) {
            buffer = buf;
            Module1["HEAP8"] = HEAP8 = new Int8Array(buf);
            Module1["HEAP16"] = HEAP16 = new Int16Array(buf);
            Module1["HEAP32"] = HEAP32 = new Int32Array(buf);
            Module1["HEAPU8"] = HEAPU8 = new Uint8Array(buf);
            Module1["HEAPU16"] = HEAPU16 = new Uint16Array(buf);
            Module1["HEAPU32"] = HEAPU32 = new Uint32Array(buf);
            Module1["HEAPF32"] = HEAPF32 = new Float32Array(buf);
            Module1["HEAPF64"] = HEAPF64 = new Float64Array(buf);
        }
        var TOTAL_STACK = 5242880;
        if (Module1["TOTAL_STACK"]) assert(TOTAL_STACK === Module1["TOTAL_STACK"], "the stack size can no longer be determined at runtime");
        var INITIAL_MEMORY = Module1["INITIAL_MEMORY"] || 16777216;
        if (!Object.getOwnPropertyDescriptor(Module1, "INITIAL_MEMORY")) Object.defineProperty(Module1, "INITIAL_MEMORY", {
            configurable: true,
            get: function() {
                abort("Module.INITIAL_MEMORY has been replaced with plain INITIAL_MEMORY (the initial value can be provided on Module, but after startup the value is only looked for on a local variable of that name)");
            }
        });
        assert(INITIAL_MEMORY >= TOTAL_STACK, "INITIAL_MEMORY should be larger than TOTAL_STACK, was " + INITIAL_MEMORY + "! (TOTAL_STACK=" + TOTAL_STACK + ")");
        assert(typeof Int32Array !== "undefined" && typeof Float64Array !== "undefined" && Int32Array.prototype.subarray !== undefined && Int32Array.prototype.set !== undefined, "JS engine does not provide full typed array support");
        assert(!Module1["wasmMemory"], "Use of `wasmMemory` detected.  Use -s IMPORTED_MEMORY to define wasmMemory externally");
        assert(INITIAL_MEMORY == 16777216, "Detected runtime INITIAL_MEMORY setting.  Use -s IMPORTED_MEMORY to define wasmMemory dynamically");
        var wasmTable;
        function writeStackCookie() {
            var max = _emscripten_stack_get_end();
            assert((max & 3) == 0);
            HEAPU32[(max >> 2) + 1 >>> 0] = 34821223;
            HEAPU32[(max >> 2) + 2 >>> 0] = 2310721022;
            HEAP32[0 >>> 0] = 1668509029;
        }
        function checkStackCookie() {
            if (ABORT) return;
            var max = _emscripten_stack_get_end();
            var cookie1 = HEAPU32[(max >> 2) + 1 >>> 0];
            var cookie2 = HEAPU32[(max >> 2) + 2 >>> 0];
            if (cookie1 != 34821223 || cookie2 != 2310721022) abort("Stack overflow! Stack cookie has been overwritten, expected hex dwords 0x89BACDFE and 0x2135467, but received 0x" + cookie2.toString(16) + " " + cookie1.toString(16));
            if (HEAP32[0] !== 1668509029) abort("Runtime error: The application has corrupted its heap memory area (address zero)!");
        }
        (function() {
            var h16 = new Int16Array(1);
            var h8 = new Int8Array(h16.buffer);
            h16[0] = 25459;
            if (h8[0] !== 115 || h8[1] !== 99) throw "Runtime error: expected the system to be little-endian! (Run with -s SUPPORT_BIG_ENDIAN=1 to bypass)";
        })();
        var __ATPRERUN__ = [];
        var __ATINIT__ = [];
        var __ATMAIN__ = [];
        var __ATEXIT__ = [];
        var __ATPOSTRUN__ = [];
        var runtimeInitialized = false;
        var runtimeExited = false;
        var runtimeKeepaliveCounter = 0;
        function keepRuntimeAlive() {
            return noExitRuntime || runtimeKeepaliveCounter > 0;
        }
        function preRun() {
            if (Module1["preRun"]) {
                if (typeof Module1["preRun"] == "function") Module1["preRun"] = [
                    Module1["preRun"]
                ];
                while(Module1["preRun"].length)addOnPreRun(Module1["preRun"].shift());
            }
            callRuntimeCallbacks(__ATPRERUN__);
        }
        function initRuntime() {
            checkStackCookie();
            assert(!runtimeInitialized);
            runtimeInitialized = true;
            if (!Module1["noFSInit"] && !FS.init.initialized) FS.init();
            FS.ignorePermissions = false;
            TTY.init();
            callRuntimeCallbacks(__ATINIT__);
        }
        function preMain() {
            checkStackCookie();
            callRuntimeCallbacks(__ATMAIN__);
        }
        function exitRuntime() {
            Asyncify.state = Asyncify.State.Disabled;
            checkStackCookie();
            runtimeExited = true;
        }
        function postRun() {
            checkStackCookie();
            if (Module1["postRun"]) {
                if (typeof Module1["postRun"] == "function") Module1["postRun"] = [
                    Module1["postRun"]
                ];
                while(Module1["postRun"].length)addOnPostRun(Module1["postRun"].shift());
            }
            callRuntimeCallbacks(__ATPOSTRUN__);
        }
        function addOnPreRun(cb) {
            __ATPRERUN__.unshift(cb);
        }
        function addOnInit(cb) {
            __ATINIT__.unshift(cb);
        }
        function addOnPreMain(cb) {
            __ATMAIN__.unshift(cb);
        }
        function addOnExit(cb) {
        }
        function addOnPostRun(cb) {
            __ATPOSTRUN__.unshift(cb);
        }
        assert(Math.imul, "This browser does not support Math.imul(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.fround, "This browser does not support Math.fround(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.clz32, "This browser does not support Math.clz32(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        assert(Math.trunc, "This browser does not support Math.trunc(), build with LEGACY_VM_SUPPORT or POLYFILL_OLD_MATH_FUNCTIONS to add in a polyfill");
        var runDependencies = 0;
        var runDependencyWatcher = null;
        var dependenciesFulfilled = null;
        var runDependencyTracking = {
        };
        function getUniqueRunDependency(id) {
            var orig = id;
            while(true){
                if (!runDependencyTracking[id]) return id;
                id = orig + Math.random();
            }
        }
        function addRunDependency(id) {
            runDependencies++;
            if (Module1["monitorRunDependencies"]) Module1["monitorRunDependencies"](runDependencies);
            if (id) {
                assert(!runDependencyTracking[id]);
                runDependencyTracking[id] = 1;
                if (runDependencyWatcher === null && typeof setInterval !== "undefined") runDependencyWatcher = setInterval(function() {
                    if (ABORT) {
                        clearInterval(runDependencyWatcher);
                        runDependencyWatcher = null;
                        return;
                    }
                    var shown = false;
                    for(var dep in runDependencyTracking){
                        if (!shown) {
                            shown = true;
                            err("still waiting on run dependencies:");
                        }
                        err("dependency: " + dep);
                    }
                    if (shown) err("(end of list)");
                }, 10000);
            } else err("warning: run dependency added without ID");
        }
        function removeRunDependency(id) {
            runDependencies--;
            if (Module1["monitorRunDependencies"]) Module1["monitorRunDependencies"](runDependencies);
            if (id) {
                assert(runDependencyTracking[id]);
                delete runDependencyTracking[id];
            } else err("warning: run dependency removed without ID");
            if (runDependencies == 0) {
                if (runDependencyWatcher !== null) {
                    clearInterval(runDependencyWatcher);
                    runDependencyWatcher = null;
                }
                if (dependenciesFulfilled) {
                    var callback = dependenciesFulfilled;
                    dependenciesFulfilled = null;
                    callback();
                }
            }
        }
        Module1["preloadedImages"] = {
        };
        Module1["preloadedAudios"] = {
        };
        function abort(what) {
            if (Module1["onAbort"]) Module1["onAbort"](what);
            what += "";
            err(what);
            ABORT = true;
            EXITSTATUS = 1;
            var output = "abort(" + what + ") at " + stackTrace();
            what = output;
            var e = new WebAssembly.RuntimeError(what);
            readyPromiseReject(e);
            throw e;
        }
        var dataURIPrefix = "data:application/octet-stream;base64,";
        function isDataURI(filename) {
            return filename.startsWith(dataURIPrefix);
        }
        function isFileURI(filename) {
            return filename.startsWith("file://");
        }
        function createExportWrapper(name, fixedasm) {
            return function() {
                var displayName = name;
                var asm = fixedasm;
                if (!fixedasm) asm = Module1["asm"];
                assert(runtimeInitialized, "native function `" + displayName + "` called before runtime initialization");
                assert(!runtimeExited, "native function `" + displayName + "` called after runtime exit (use NO_EXIT_RUNTIME to keep it alive after main() exits)");
                if (!asm[name]) assert(asm[name], "exported native function `" + displayName + "` not found");
                return asm[name].apply(null, arguments);
            };
        }
        var wasmBinaryFile;
        wasmBinaryFile = "main.wasm";
        if (!isDataURI(wasmBinaryFile)) wasmBinaryFile = locateFile(wasmBinaryFile);
        function getBinary(file) {
            try {
                if (file == wasmBinaryFile && wasmBinary) return new Uint8Array(wasmBinary);
                if (readBinary) return readBinary(file);
                else throw "both async and sync fetching of the wasm failed";
            } catch (err1) {
                abort(err1);
            }
        }
        function getBinaryPromise() {
            if (!wasmBinary && (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER)) {
                if (typeof fetch === "function" && !isFileURI(wasmBinaryFile)) return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    if (!response["ok"]) throw "failed to load wasm binary file at '" + wasmBinaryFile + "'";
                    return response["arrayBuffer"]();
                }).catch(function() {
                    return getBinary(wasmBinaryFile);
                });
                else {
                    if (readAsync) return new Promise(function(resolve, reject) {
                        readAsync(wasmBinaryFile, function(response) {
                            resolve(new Uint8Array(response));
                        }, reject);
                    });
                }
            }
            return Promise.resolve().then(function() {
                return getBinary(wasmBinaryFile);
            });
        }
        function createWasm() {
            var info = {
                "env": asmLibraryArg,
                "wasi_snapshot_preview1": asmLibraryArg
            };
            function receiveInstance(instance, module) {
                var exports = instance.exports;
                exports = Asyncify.instrumentWasmExports(exports);
                Module1["asm"] = exports;
                wasmMemory = Module1["asm"]["memory"];
                assert(wasmMemory, "memory not found in wasm exports");
                updateGlobalBufferAndViews(wasmMemory.buffer);
                wasmTable = Module1["asm"]["__indirect_function_table"];
                assert(wasmTable, "table not found in wasm exports");
                addOnInit(Module1["asm"]["__wasm_call_ctors"]);
                removeRunDependency("wasm-instantiate");
            }
            addRunDependency("wasm-instantiate");
            var trueModule = Module1;
            function receiveInstantiationResult(result) {
                assert(Module1 === trueModule, "the Module object should not be replaced during async compilation - perhaps the order of HTML elements is wrong?");
                trueModule = null;
                receiveInstance(result["instance"]);
            }
            function instantiateArrayBuffer(receiver) {
                return getBinaryPromise().then(function(binary) {
                    var result = WebAssembly.instantiate(binary, info);
                    return result;
                }).then(receiver, function(reason) {
                    err("failed to asynchronously prepare wasm: " + reason);
                    if (isFileURI(wasmBinaryFile)) err("warning: Loading from a file URI (" + wasmBinaryFile + ") is not supported in most browsers. See https://emscripten.org/docs/getting_started/FAQ.html#how-do-i-run-a-local-webserver-for-testing-why-does-my-program-stall-in-downloading-or-preparing");
                    abort(reason);
                });
            }
            function instantiateAsync() {
                if (!wasmBinary && typeof WebAssembly.instantiateStreaming === "function" && !isDataURI(wasmBinaryFile) && !isFileURI(wasmBinaryFile) && typeof fetch === "function") return fetch(wasmBinaryFile, {
                    credentials: "same-origin"
                }).then(function(response) {
                    var result = WebAssembly.instantiateStreaming(response, info);
                    return result.then(receiveInstantiationResult, function(reason) {
                        err("wasm streaming compile failed: " + reason);
                        err("falling back to ArrayBuffer instantiation");
                        return instantiateArrayBuffer(receiveInstantiationResult);
                    });
                });
                else return instantiateArrayBuffer(receiveInstantiationResult);
            }
            if (Module1["instantiateWasm"]) try {
                var exports = Module1["instantiateWasm"](info, receiveInstance);
                exports = Asyncify.instrumentWasmExports(exports);
                return exports;
            } catch (e) {
                err("Module.instantiateWasm callback failed with error: " + e);
                return false;
            }
            instantiateAsync().catch(readyPromiseReject);
            return {
            };
        }
        var tempDouble;
        var tempI64;
        var ASM_CONSTS = {
        };
        function callRuntimeCallbacks(callbacks) {
            while(callbacks.length > 0){
                var callback = callbacks.shift();
                if (typeof callback == "function") {
                    callback(Module1);
                    continue;
                }
                var func = callback.func;
                if (typeof func === "number") {
                    if (callback.arg === undefined) (function() {
                        dynCall_v.call(null, func);
                    })();
                    else (function(a1) {
                        dynCall_vi.apply(null, [
                            func,
                            a1
                        ]);
                    })(callback.arg);
                } else func(callback.arg === undefined ? null : callback.arg);
            }
        }
        function demangle(func) {
            warnOnce("warning: build with  -s DEMANGLE_SUPPORT=1  to link in libcxxabi demangling");
            return func;
        }
        function demangleAll(text) {
            var regex = /\b_Z[\w\d_]+/g;
            return text.replace(regex, function(x) {
                var y = demangle(x);
                return x === y ? x : y + " [" + x + "]";
            });
        }
        function jsStackTrace() {
            var error = new Error();
            if (!error.stack) {
                try {
                    throw new Error();
                } catch (e) {
                    error = e;
                }
                if (!error.stack) return "(no stack trace available)";
            }
            return error.stack.toString();
        }
        function stackTrace() {
            var js = jsStackTrace();
            if (Module1["extraStackTrace"]) js += "\n" + Module1["extraStackTrace"]();
            return demangleAll(js);
        }
        function __embind_register_bigint(primitiveType, name, size, minRange, maxRange) {
        }
        function getShiftFromSize(size) {
            switch(size){
                case 1:
                    return 0;
                case 2:
                    return 1;
                case 4:
                    return 2;
                case 8:
                    return 3;
                default:
                    throw new TypeError("Unknown type size: " + size);
            }
        }
        function embind_init_charCodes() {
            var codes = new Array(256);
            for(var i = 0; i < 256; ++i)codes[i] = String.fromCharCode(i);
            embind_charCodes = codes;
        }
        var embind_charCodes = undefined;
        function readLatin1String(ptr) {
            var ret = "";
            var c = ptr;
            while(HEAPU8[c >>> 0])ret += embind_charCodes[HEAPU8[(c++) >>> 0]];
            return ret;
        }
        var awaitingDependencies = {
        };
        var registeredTypes = {
        };
        var typeDependencies = {
        };
        var char_0 = 48;
        var char_9 = 57;
        function makeLegalFunctionName(name) {
            if (undefined === name) return "_unknown";
            name = name.replace(/[^a-zA-Z0-9_]/g, "$");
            var f = name.charCodeAt(0);
            if (f >= char_0 && f <= char_9) return "_" + name;
            else return name;
        }
        function createNamedFunction(name, body) {
            name = makeLegalFunctionName(name);
            return new Function("body", "return function " + name + "() {\n" + '    "use strict";' + "    return body.apply(this, arguments);\n" + "};\n")(body);
        }
        function extendError(baseErrorType, errorName) {
            var errorClass = createNamedFunction(errorName, function(message) {
                this.name = errorName;
                this.message = message;
                var stack = new Error(message).stack;
                if (stack !== undefined) this.stack = this.toString() + "\n" + stack.replace(/^Error(:[^\n]*)?\n/, "");
            });
            errorClass.prototype = Object.create(baseErrorType.prototype);
            errorClass.prototype.constructor = errorClass;
            errorClass.prototype.toString = function() {
                if (this.message === undefined) return this.name;
                else return this.name + ": " + this.message;
            };
            return errorClass;
        }
        var BindingError = undefined;
        function throwBindingError(message) {
            throw new BindingError(message);
        }
        var InternalError = undefined;
        function throwInternalError(message) {
            throw new InternalError(message);
        }
        function whenDependentTypesAreResolved(myTypes, dependentTypes, getTypeConverters) {
            myTypes.forEach(function(type) {
                typeDependencies[type] = dependentTypes;
            });
            function onComplete(typeConverters) {
                var myTypeConverters = getTypeConverters(typeConverters);
                if (myTypeConverters.length !== myTypes.length) throwInternalError("Mismatched type converter count");
                for(var i = 0; i < myTypes.length; ++i)registerType(myTypes[i], myTypeConverters[i]);
            }
            var typeConverters = new Array(dependentTypes.length);
            var unregisteredTypes = [];
            var registered = 0;
            dependentTypes.forEach(function(dt, i) {
                if (registeredTypes.hasOwnProperty(dt)) typeConverters[i] = registeredTypes[dt];
                else {
                    unregisteredTypes.push(dt);
                    if (!awaitingDependencies.hasOwnProperty(dt)) awaitingDependencies[dt] = [];
                    awaitingDependencies[dt].push(function() {
                        typeConverters[i] = registeredTypes[dt];
                        ++registered;
                        if (registered === unregisteredTypes.length) onComplete(typeConverters);
                    });
                }
            });
            if (0 === unregisteredTypes.length) onComplete(typeConverters);
        }
        function registerType(rawType, registeredInstance, options) {
            options = options || {
            };
            if (!("argPackAdvance" in registeredInstance)) throw new TypeError("registerType registeredInstance requires argPackAdvance");
            var name = registeredInstance.name;
            if (!rawType) throwBindingError('type "' + name + '" must have a positive integer typeid pointer');
            if (registeredTypes.hasOwnProperty(rawType)) {
                if (options.ignoreDuplicateRegistrations) return;
                else throwBindingError("Cannot register type '" + name + "' twice");
            }
            registeredTypes[rawType] = registeredInstance;
            delete typeDependencies[rawType];
            if (awaitingDependencies.hasOwnProperty(rawType)) {
                var callbacks = awaitingDependencies[rawType];
                delete awaitingDependencies[rawType];
                callbacks.forEach(function(cb) {
                    cb();
                });
            }
        }
        function __embind_register_bool(rawType, name, size, trueValue, falseValue) {
            var shift = getShiftFromSize(size);
            name = readLatin1String(name);
            registerType(rawType, {
                name: name,
                "fromWireType": function(wt) {
                    return !!wt;
                },
                "toWireType": function(destructors, o) {
                    return o ? trueValue : falseValue;
                },
                "argPackAdvance": 8,
                "readValueFromPointer": function(pointer) {
                    var heap;
                    if (size === 1) heap = HEAP8;
                    else if (size === 2) heap = HEAP16;
                    else if (size === 4) heap = HEAP32;
                    else throw new TypeError("Unknown boolean type size: " + name);
                    return this["fromWireType"](heap[pointer >>> shift]);
                },
                destructorFunction: null
            });
        }
        var emval_free_list = [];
        var emval_handle_array = [
            {
            },
            {
                value: undefined
            },
            {
                value: null
            },
            {
                value: true
            },
            {
                value: false
            }
        ];
        function __emval_decref(handle) {
            if (handle > 4 && 0 === --emval_handle_array[handle].refcount) {
                emval_handle_array[handle] = undefined;
                emval_free_list.push(handle);
            }
        }
        function count_emval_handles() {
            var count = 0;
            for(var i = 5; i < emval_handle_array.length; ++i)if (emval_handle_array[i] !== undefined) ++count;
            return count;
        }
        function get_first_emval() {
            for(var i = 5; i < emval_handle_array.length; ++i){
                if (emval_handle_array[i] !== undefined) return emval_handle_array[i];
            }
            return null;
        }
        function init_emval() {
            Module1["count_emval_handles"] = count_emval_handles;
            Module1["get_first_emval"] = get_first_emval;
        }
        function __emval_register(value) {
            switch(value){
                case undefined:
                    return 1;
                case null:
                    return 2;
                case true:
                    return 3;
                case false:
                    return 4;
                default:
                    var handle = emval_free_list.length ? emval_free_list.pop() : emval_handle_array.length;
                    emval_handle_array[handle] = {
                        refcount: 1,
                        value: value
                    };
                    return handle;
            }
        }
        function simpleReadValueFromPointer(pointer) {
            return this["fromWireType"](HEAPU32[pointer >>> 2]);
        }
        function __embind_register_emval(rawType, name) {
            name = readLatin1String(name);
            registerType(rawType, {
                name: name,
                "fromWireType": function(handle) {
                    var rv = emval_handle_array[handle].value;
                    __emval_decref(handle);
                    return rv;
                },
                "toWireType": function(destructors, value) {
                    return __emval_register(value);
                },
                "argPackAdvance": 8,
                "readValueFromPointer": simpleReadValueFromPointer,
                destructorFunction: null
            });
        }
        function _embind_repr(v) {
            if (v === null) return "null";
            var t = typeof v;
            if (t === "object" || t === "array" || t === "function") return v.toString();
            else return "" + v;
        }
        function floatReadValueFromPointer(name, shift) {
            switch(shift){
                case 2:
                    return function(pointer) {
                        return this["fromWireType"](HEAPF32[pointer >>> 2]);
                    };
                case 3:
                    return function(pointer) {
                        return this["fromWireType"](HEAPF64[pointer >>> 3]);
                    };
                default:
                    throw new TypeError("Unknown float type: " + name);
            }
        }
        function __embind_register_float(rawType, name, size) {
            var shift = getShiftFromSize(size);
            name = readLatin1String(name);
            registerType(rawType, {
                name: name,
                "fromWireType": function(value) {
                    return value;
                },
                "toWireType": function(destructors, value) {
                    if (typeof value !== "number" && typeof value !== "boolean") throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
                    return value;
                },
                "argPackAdvance": 8,
                "readValueFromPointer": floatReadValueFromPointer(name, shift),
                destructorFunction: null
            });
        }
        function integerReadValueFromPointer(name, shift, signed) {
            switch(shift){
                case 0:
                    return signed ? function readS8FromPointer(pointer) {
                        return HEAP8[pointer >>> 0];
                    } : function readU8FromPointer(pointer) {
                        return HEAPU8[pointer >>> 0];
                    };
                case 1:
                    return signed ? function readS16FromPointer(pointer) {
                        return HEAP16[pointer >>> 1];
                    } : function readU16FromPointer(pointer) {
                        return HEAPU16[pointer >>> 1];
                    };
                case 2:
                    return signed ? function readS32FromPointer(pointer) {
                        return HEAP32[pointer >>> 2];
                    } : function readU32FromPointer(pointer) {
                        return HEAPU32[pointer >>> 2];
                    };
                default:
                    throw new TypeError("Unknown integer type: " + name);
            }
        }
        function __embind_register_integer(primitiveType, name, size, minRange, maxRange) {
            name = readLatin1String(name);
            if (maxRange === -1) maxRange = 4294967295;
            var shift = getShiftFromSize(size);
            var fromWireType = function(value) {
                return value;
            };
            if (minRange === 0) {
                var bitshift = 32 - 8 * size;
                fromWireType = function(value) {
                    return value << bitshift >>> bitshift;
                };
            }
            var isUnsignedType = name.includes("unsigned");
            registerType(primitiveType, {
                name: name,
                "fromWireType": fromWireType,
                "toWireType": function(destructors, value) {
                    if (typeof value !== "number" && typeof value !== "boolean") throw new TypeError('Cannot convert "' + _embind_repr(value) + '" to ' + this.name);
                    if (value < minRange || value > maxRange) throw new TypeError('Passing a number "' + _embind_repr(value) + '" from JS side to C/C++ side to an argument of type "' + name + '", which is outside the valid range [' + minRange + ", " + maxRange + "]!");
                    return isUnsignedType ? value >>> 0 : value | 0;
                },
                "argPackAdvance": 8,
                "readValueFromPointer": integerReadValueFromPointer(name, shift, minRange !== 0),
                destructorFunction: null
            });
        }
        function __embind_register_memory_view(rawType, dataTypeIndex, name) {
            var typeMapping = [
                Int8Array,
                Uint8Array,
                Int16Array,
                Uint16Array,
                Int32Array,
                Uint32Array,
                Float32Array,
                Float64Array
            ];
            var TA = typeMapping[dataTypeIndex];
            function decodeMemoryView(handle) {
                handle = handle >> 2;
                var heap = HEAPU32;
                var size = heap[handle >>> 0];
                var data = heap[handle + 1 >>> 0];
                return new TA(buffer, data, size);
            }
            name = readLatin1String(name);
            registerType(rawType, {
                name: name,
                "fromWireType": decodeMemoryView,
                "argPackAdvance": 8,
                "readValueFromPointer": decodeMemoryView
            }, {
                ignoreDuplicateRegistrations: true
            });
        }
        function __embind_register_std_string(rawType, name) {
            name = readLatin1String(name);
            var stdStringIsUTF8 = name === "std::string";
            registerType(rawType, {
                name: name,
                "fromWireType": function(value) {
                    var length = HEAPU32[value >>> 2];
                    var str;
                    if (stdStringIsUTF8) {
                        var decodeStartPtr = value + 4;
                        for(var i = 0; i <= length; ++i){
                            var currentBytePtr = value + 4 + i;
                            if (i == length || HEAPU8[currentBytePtr >>> 0] == 0) {
                                var maxRead = currentBytePtr - decodeStartPtr;
                                var stringSegment = UTF8ToString(decodeStartPtr, maxRead);
                                if (str === undefined) str = stringSegment;
                                else {
                                    str += String.fromCharCode(0);
                                    str += stringSegment;
                                }
                                decodeStartPtr = currentBytePtr + 1;
                            }
                        }
                    } else {
                        var a = new Array(length);
                        for(var i = 0; i < length; ++i)a[i] = String.fromCharCode(HEAPU8[value + 4 + i >>> 0]);
                        str = a.join("");
                    }
                    _free(value);
                    return str;
                },
                "toWireType": function(destructors, value) {
                    if (value instanceof ArrayBuffer) value = new Uint8Array(value);
                    var getLength;
                    var valueIsOfTypeString = typeof value === "string";
                    if (!(valueIsOfTypeString || value instanceof Uint8Array || value instanceof Uint8ClampedArray || value instanceof Int8Array)) throwBindingError("Cannot pass non-string to std::string");
                    if (stdStringIsUTF8 && valueIsOfTypeString) getLength = function() {
                        return lengthBytesUTF8(value);
                    };
                    else getLength = function() {
                        return value.length;
                    };
                    var length = getLength();
                    var ptr = _malloc(4 + length + 1);
                    ptr >>>= 0;
                    HEAPU32[ptr >>> 2] = length;
                    if (stdStringIsUTF8 && valueIsOfTypeString) stringToUTF8(value, ptr + 4, length + 1);
                    else {
                        if (valueIsOfTypeString) for(var i = 0; i < length; ++i){
                            var charCode = value.charCodeAt(i);
                            if (charCode > 255) {
                                _free(ptr);
                                throwBindingError("String has UTF-16 code units that do not fit in 8 bits");
                            }
                            HEAPU8[ptr + 4 + i >>> 0] = charCode;
                        }
                        else for(var i = 0; i < length; ++i)HEAPU8[ptr + 4 + i >>> 0] = value[i];
                    }
                    if (destructors !== null) destructors.push(_free, ptr);
                    return ptr;
                },
                "argPackAdvance": 8,
                "readValueFromPointer": simpleReadValueFromPointer,
                destructorFunction: function(ptr) {
                    _free(ptr);
                }
            });
        }
        function __embind_register_std_wstring(rawType, charSize, name) {
            name = readLatin1String(name);
            var decodeString, encodeString, getHeap, lengthBytesUTF, shift;
            if (charSize === 2) {
                decodeString = UTF16ToString;
                encodeString = stringToUTF16;
                lengthBytesUTF = lengthBytesUTF16;
                getHeap = function() {
                    return HEAPU16;
                };
                shift = 1;
            } else if (charSize === 4) {
                decodeString = UTF32ToString;
                encodeString = stringToUTF32;
                lengthBytesUTF = lengthBytesUTF32;
                getHeap = function() {
                    return HEAPU32;
                };
                shift = 2;
            }
            registerType(rawType, {
                name: name,
                "fromWireType": function(value) {
                    var length = HEAPU32[value >>> 2];
                    var HEAP1 = getHeap();
                    var str;
                    var decodeStartPtr = value + 4;
                    for(var i = 0; i <= length; ++i){
                        var currentBytePtr = value + 4 + i * charSize;
                        if (i == length || HEAP1[currentBytePtr >>> shift] == 0) {
                            var maxReadBytes = currentBytePtr - decodeStartPtr;
                            var stringSegment = decodeString(decodeStartPtr, maxReadBytes);
                            if (str === undefined) str = stringSegment;
                            else {
                                str += String.fromCharCode(0);
                                str += stringSegment;
                            }
                            decodeStartPtr = currentBytePtr + charSize;
                        }
                    }
                    _free(value);
                    return str;
                },
                "toWireType": function(destructors, value) {
                    if (!(typeof value === "string")) throwBindingError("Cannot pass non-string to C++ string type " + name);
                    var length = lengthBytesUTF(value);
                    var ptr = _malloc(4 + length + charSize);
                    ptr >>>= 0;
                    HEAPU32[ptr >>> 2] = length >> shift;
                    encodeString(value, ptr + 4, length + charSize);
                    if (destructors !== null) destructors.push(_free, ptr);
                    return ptr;
                },
                "argPackAdvance": 8,
                "readValueFromPointer": simpleReadValueFromPointer,
                destructorFunction: function(ptr) {
                    _free(ptr);
                }
            });
        }
        function __embind_register_void(rawType, name) {
            name = readLatin1String(name);
            registerType(rawType, {
                isVoid: true,
                name: name,
                "argPackAdvance": 0,
                "fromWireType": function() {
                    return undefined;
                },
                "toWireType": function(destructors, o) {
                    return undefined;
                }
            });
        }
        function _emscripten_memcpy_big(dest, src, num) {
            HEAPU8.copyWithin(dest >>> 0, src >>> 0, src + num >>> 0);
        }
        function emscripten_realloc_buffer(size) {
            try {
                wasmMemory.grow(size - buffer.byteLength + 65535 >>> 16);
                updateGlobalBufferAndViews(wasmMemory.buffer);
                return 1;
            } catch (e) {
                err("emscripten_realloc_buffer: Attempted to grow heap from " + buffer.byteLength + " bytes to " + size + " bytes, but got error: " + e);
            }
        }
        function _emscripten_resize_heap(requestedSize) {
            var oldSize = HEAPU8.length;
            requestedSize = requestedSize >>> 0;
            assert(requestedSize > oldSize);
            var maxHeapSize = 4294901760;
            if (requestedSize > maxHeapSize) {
                err("Cannot enlarge memory, asked to go up to " + requestedSize + " bytes, but the limit is " + maxHeapSize + " bytes!");
                return false;
            }
            for(var cutDown = 1; cutDown <= 4; cutDown *= 2){
                var overGrownHeapSize = oldSize * (1 + 0.2 / cutDown);
                overGrownHeapSize = Math.min(overGrownHeapSize, requestedSize + 100663296);
                var newSize = Math.min(maxHeapSize, alignUp(Math.max(requestedSize, overGrownHeapSize), 65536));
                var replacement = emscripten_realloc_buffer(newSize);
                if (replacement) return true;
            }
            err("Failed to grow the heap from " + oldSize + " bytes to " + newSize + " bytes, not enough memory!");
            return false;
        }
        function getRandomDevice() {
            if (typeof crypto === "object" && typeof crypto["getRandomValues"] === "function") {
                var randomBuffer = new Uint8Array(1);
                return function() {
                    crypto.getRandomValues(randomBuffer);
                    return randomBuffer[0];
                };
            } else if (ENVIRONMENT_IS_NODE) try {
                var crypto_module = require("crypto");
                return function() {
                    return crypto_module["randomBytes"](1)[0];
                };
            } catch (e) {
            }
            return function() {
                abort("no cryptographic support found for randomDevice. consider polyfilling it if you want to use something insecure like Math.random(), e.g. put this in a --pre-js: var crypto = { getRandomValues: function(array) { for (var i = 0; i < array.length; i++) array[i] = (Math.random()*256)|0 } };");
            };
        }
        var PATH = {
            splitPath: function(filename) {
                var splitPathRe = /^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/;
                return splitPathRe.exec(filename).slice(1);
            },
            normalizeArray: function(parts, allowAboveRoot) {
                var up = 0;
                for(var i = parts.length - 1; i >= 0; i--){
                    var last = parts[i];
                    if (last === ".") parts.splice(i, 1);
                    else if (last === "..") {
                        parts.splice(i, 1);
                        up++;
                    } else if (up) {
                        parts.splice(i, 1);
                        up--;
                    }
                }
                if (allowAboveRoot) for(; up; up--)parts.unshift("..");
                return parts;
            },
            normalize: function(path) {
                var isAbsolute = path.charAt(0) === "/", trailingSlash = path.substr(-1) === "/";
                path = PATH.normalizeArray(path.split("/").filter(function(p) {
                    return !!p;
                }), !isAbsolute).join("/");
                if (!path && !isAbsolute) path = ".";
                if (path && trailingSlash) path += "/";
                return (isAbsolute ? "/" : "") + path;
            },
            dirname: function(path) {
                var result = PATH.splitPath(path), root = result[0], dir = result[1];
                if (!root && !dir) return ".";
                if (dir) dir = dir.substr(0, dir.length - 1);
                return root + dir;
            },
            basename: function(path) {
                if (path === "/") return "/";
                path = PATH.normalize(path);
                path = path.replace(/\/$/, "");
                var lastSlash = path.lastIndexOf("/");
                if (lastSlash === -1) return path;
                return path.substr(lastSlash + 1);
            },
            extname: function(path) {
                return PATH.splitPath(path)[3];
            },
            join: function() {
                var paths = Array.prototype.slice.call(arguments, 0);
                return PATH.normalize(paths.join("/"));
            },
            join2: function(l, r) {
                return PATH.normalize(l + "/" + r);
            }
        };
        var PATH_FS = {
            resolve: function() {
                var resolvedPath = "", resolvedAbsolute = false;
                for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
                    var path = i >= 0 ? arguments[i] : FS.cwd();
                    if (typeof path !== "string") throw new TypeError("Arguments to path.resolve must be strings");
                    else if (!path) return "";
                    resolvedPath = path + "/" + resolvedPath;
                    resolvedAbsolute = path.charAt(0) === "/";
                }
                resolvedPath = PATH.normalizeArray(resolvedPath.split("/").filter(function(p) {
                    return !!p;
                }), !resolvedAbsolute).join("/");
                return (resolvedAbsolute ? "/" : "") + resolvedPath || ".";
            },
            relative: function(from, to) {
                from = PATH_FS.resolve(from).substr(1);
                to = PATH_FS.resolve(to).substr(1);
                function trim(arr) {
                    var start = 0;
                    for(; start < arr.length; start++){
                        if (arr[start] !== "") break;
                    }
                    var end = arr.length - 1;
                    for(; end >= 0; end--){
                        if (arr[end] !== "") break;
                    }
                    if (start > end) return [];
                    return arr.slice(start, end - start + 1);
                }
                var fromParts = trim(from.split("/"));
                var toParts = trim(to.split("/"));
                var length = Math.min(fromParts.length, toParts.length);
                var samePartsLength = length;
                for(var i = 0; i < length; i++)if (fromParts[i] !== toParts[i]) {
                    samePartsLength = i;
                    break;
                }
                var outputParts = [];
                for(var i = samePartsLength; i < fromParts.length; i++)outputParts.push("..");
                outputParts = outputParts.concat(toParts.slice(samePartsLength));
                return outputParts.join("/");
            }
        };
        var TTY = {
            ttys: [],
            init: function() {
            },
            shutdown: function() {
            },
            register: function(dev, ops) {
                TTY.ttys[dev] = {
                    input: [],
                    output: [],
                    ops: ops
                };
                FS.registerDevice(dev, TTY.stream_ops);
            },
            stream_ops: {
                open: function(stream) {
                    var tty = TTY.ttys[stream.node.rdev];
                    if (!tty) throw new FS.ErrnoError(43);
                    stream.tty = tty;
                    stream.seekable = false;
                },
                close: function(stream) {
                    stream.tty.ops.flush(stream.tty);
                },
                flush: function(stream) {
                    stream.tty.ops.flush(stream.tty);
                },
                read: function(stream, buffer1, offset, length, pos) {
                    if (!stream.tty || !stream.tty.ops.get_char) throw new FS.ErrnoError(60);
                    var bytesRead = 0;
                    for(var i = 0; i < length; i++){
                        var result;
                        try {
                            result = stream.tty.ops.get_char(stream.tty);
                        } catch (e) {
                            throw new FS.ErrnoError(29);
                        }
                        if (result === undefined && bytesRead === 0) throw new FS.ErrnoError(6);
                        if (result === null || result === undefined) break;
                        bytesRead++;
                        buffer1[offset + i] = result;
                    }
                    if (bytesRead) stream.node.timestamp = Date.now();
                    return bytesRead;
                },
                write: function(stream, buffer1, offset, length, pos) {
                    if (!stream.tty || !stream.tty.ops.put_char) throw new FS.ErrnoError(60);
                    try {
                        for(var i = 0; i < length; i++)stream.tty.ops.put_char(stream.tty, buffer1[offset + i]);
                    } catch (e) {
                        throw new FS.ErrnoError(29);
                    }
                    if (length) stream.node.timestamp = Date.now();
                    return i;
                }
            },
            default_tty_ops: {
                get_char: function(tty) {
                    if (!tty.input.length) {
                        var result = null;
                        if (ENVIRONMENT_IS_NODE) {
                            var BUFSIZE = 256;
                            var buf = Buffer.alloc(BUFSIZE);
                            var bytesRead = 0;
                            try {
                                bytesRead = nodeFS.readSync(process.stdin.fd, buf, 0, BUFSIZE, null);
                            } catch (e) {
                                if (e.toString().includes("EOF")) bytesRead = 0;
                                else throw e;
                            }
                            if (bytesRead > 0) result = buf.slice(0, bytesRead).toString("utf-8");
                            else result = null;
                        } else if (typeof window != "undefined" && typeof window.prompt == "function") {
                            result = window.prompt("Input: ");
                            if (result !== null) result += "\n";
                        } else if (typeof readline == "function") {
                            result = readline();
                            if (result !== null) result += "\n";
                        }
                        if (!result) return null;
                        tty.input = intArrayFromString(result, true);
                    }
                    return tty.input.shift();
                },
                put_char: function(tty, val) {
                    if (val === null || val === 10) {
                        out(UTF8ArrayToString(tty.output, 0));
                        tty.output = [];
                    } else if (val != 0) tty.output.push(val);
                },
                flush: function(tty) {
                    if (tty.output && tty.output.length > 0) {
                        out(UTF8ArrayToString(tty.output, 0));
                        tty.output = [];
                    }
                }
            },
            default_tty1_ops: {
                put_char: function(tty, val) {
                    if (val === null || val === 10) {
                        err(UTF8ArrayToString(tty.output, 0));
                        tty.output = [];
                    } else if (val != 0) tty.output.push(val);
                },
                flush: function(tty) {
                    if (tty.output && tty.output.length > 0) {
                        err(UTF8ArrayToString(tty.output, 0));
                        tty.output = [];
                    }
                }
            }
        };
        function zeroMemory(address, size) {
            HEAPU8.fill(0, address, address + size);
        }
        function alignMemory(size, alignment) {
            assert(alignment, "alignment argument is required");
            return Math.ceil(size / alignment) * alignment;
        }
        function mmapAlloc(size) {
            abort("internal error: mmapAlloc called but `memalign` native symbol not exported");
        }
        var MEMFS = {
            ops_table: null,
            mount: function(mount) {
                return MEMFS.createNode(null, "/", 16895, 0);
            },
            createNode: function(parent, name, mode, dev) {
                if (FS.isBlkdev(mode) || FS.isFIFO(mode)) throw new FS.ErrnoError(63);
                if (!MEMFS.ops_table) MEMFS.ops_table = {
                    dir: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr,
                            lookup: MEMFS.node_ops.lookup,
                            mknod: MEMFS.node_ops.mknod,
                            rename: MEMFS.node_ops.rename,
                            unlink: MEMFS.node_ops.unlink,
                            rmdir: MEMFS.node_ops.rmdir,
                            readdir: MEMFS.node_ops.readdir,
                            symlink: MEMFS.node_ops.symlink
                        },
                        stream: {
                            llseek: MEMFS.stream_ops.llseek
                        }
                    },
                    file: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr
                        },
                        stream: {
                            llseek: MEMFS.stream_ops.llseek,
                            read: MEMFS.stream_ops.read,
                            write: MEMFS.stream_ops.write,
                            allocate: MEMFS.stream_ops.allocate,
                            mmap: MEMFS.stream_ops.mmap,
                            msync: MEMFS.stream_ops.msync
                        }
                    },
                    link: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr,
                            readlink: MEMFS.node_ops.readlink
                        },
                        stream: {
                        }
                    },
                    chrdev: {
                        node: {
                            getattr: MEMFS.node_ops.getattr,
                            setattr: MEMFS.node_ops.setattr
                        },
                        stream: FS.chrdev_stream_ops
                    }
                };
                var node = FS.createNode(parent, name, mode, dev);
                if (FS.isDir(node.mode)) {
                    node.node_ops = MEMFS.ops_table.dir.node;
                    node.stream_ops = MEMFS.ops_table.dir.stream;
                    node.contents = {
                    };
                } else if (FS.isFile(node.mode)) {
                    node.node_ops = MEMFS.ops_table.file.node;
                    node.stream_ops = MEMFS.ops_table.file.stream;
                    node.usedBytes = 0;
                    node.contents = null;
                } else if (FS.isLink(node.mode)) {
                    node.node_ops = MEMFS.ops_table.link.node;
                    node.stream_ops = MEMFS.ops_table.link.stream;
                } else if (FS.isChrdev(node.mode)) {
                    node.node_ops = MEMFS.ops_table.chrdev.node;
                    node.stream_ops = MEMFS.ops_table.chrdev.stream;
                }
                node.timestamp = Date.now();
                if (parent) {
                    parent.contents[name] = node;
                    parent.timestamp = node.timestamp;
                }
                return node;
            },
            getFileDataAsTypedArray: function(node) {
                if (!node.contents) return new Uint8Array(0);
                if (node.contents.subarray) return node.contents.subarray(0, node.usedBytes);
                return new Uint8Array(node.contents);
            },
            expandFileStorage: function(node, newCapacity) {
                newCapacity >>>= 0;
                var prevCapacity = node.contents ? node.contents.length : 0;
                if (prevCapacity >= newCapacity) return;
                var CAPACITY_DOUBLING_MAX = 1048576;
                newCapacity = Math.max(newCapacity, prevCapacity * (prevCapacity < CAPACITY_DOUBLING_MAX ? 2 : 1.125) >>> 0);
                if (prevCapacity != 0) newCapacity = Math.max(newCapacity, 256);
                var oldContents = node.contents;
                node.contents = new Uint8Array(newCapacity);
                if (node.usedBytes > 0) node.contents.set(oldContents.subarray(0, node.usedBytes), 0);
            },
            resizeFileStorage: function(node, newSize) {
                newSize >>>= 0;
                if (node.usedBytes == newSize) return;
                if (newSize == 0) {
                    node.contents = null;
                    node.usedBytes = 0;
                } else {
                    var oldContents = node.contents;
                    node.contents = new Uint8Array(newSize);
                    if (oldContents) node.contents.set(oldContents.subarray(0, Math.min(newSize, node.usedBytes)));
                    node.usedBytes = newSize;
                }
            },
            node_ops: {
                getattr: function(node) {
                    var attr = {
                    };
                    attr.dev = FS.isChrdev(node.mode) ? node.id : 1;
                    attr.ino = node.id;
                    attr.mode = node.mode;
                    attr.nlink = 1;
                    attr.uid = 0;
                    attr.gid = 0;
                    attr.rdev = node.rdev;
                    if (FS.isDir(node.mode)) attr.size = 4096;
                    else if (FS.isFile(node.mode)) attr.size = node.usedBytes;
                    else if (FS.isLink(node.mode)) attr.size = node.link.length;
                    else attr.size = 0;
                    attr.atime = new Date(node.timestamp);
                    attr.mtime = new Date(node.timestamp);
                    attr.ctime = new Date(node.timestamp);
                    attr.blksize = 4096;
                    attr.blocks = Math.ceil(attr.size / attr.blksize);
                    return attr;
                },
                setattr: function(node, attr) {
                    if (attr.mode !== undefined) node.mode = attr.mode;
                    if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;
                    if (attr.size !== undefined) MEMFS.resizeFileStorage(node, attr.size);
                },
                lookup: function(parent, name) {
                    throw FS.genericErrors[44];
                },
                mknod: function(parent, name, mode, dev) {
                    return MEMFS.createNode(parent, name, mode, dev);
                },
                rename: function(old_node, new_dir, new_name) {
                    if (FS.isDir(old_node.mode)) {
                        var new_node;
                        try {
                            new_node = FS.lookupNode(new_dir, new_name);
                        } catch (e) {
                        }
                        if (new_node) {
                            for(var i in new_node.contents)throw new FS.ErrnoError(55);
                        }
                    }
                    delete old_node.parent.contents[old_node.name];
                    old_node.parent.timestamp = Date.now();
                    old_node.name = new_name;
                    new_dir.contents[new_name] = old_node;
                    new_dir.timestamp = old_node.parent.timestamp;
                    old_node.parent = new_dir;
                },
                unlink: function(parent, name) {
                    delete parent.contents[name];
                    parent.timestamp = Date.now();
                },
                rmdir: function(parent, name) {
                    var node = FS.lookupNode(parent, name);
                    for(var i in node.contents)throw new FS.ErrnoError(55);
                    delete parent.contents[name];
                    parent.timestamp = Date.now();
                },
                readdir: function(node) {
                    var entries = [
                        ".",
                        ".."
                    ];
                    for(var key1 in node.contents){
                        if (!node.contents.hasOwnProperty(key1)) continue;
                        entries.push(key1);
                    }
                    return entries;
                },
                symlink: function(parent, newname, oldpath) {
                    var node = MEMFS.createNode(parent, newname, 41471, 0);
                    node.link = oldpath;
                    return node;
                },
                readlink: function(node) {
                    if (!FS.isLink(node.mode)) throw new FS.ErrnoError(28);
                    return node.link;
                }
            },
            stream_ops: {
                read: function(stream, buffer1, offset, length, position) {
                    var contents = stream.node.contents;
                    if (position >= stream.node.usedBytes) return 0;
                    var size = Math.min(stream.node.usedBytes - position, length);
                    assert(size >= 0);
                    if (size > 8 && contents.subarray) buffer1.set(contents.subarray(position, position + size), offset);
                    else for(var i = 0; i < size; i++)buffer1[offset + i] = contents[position + i];
                    return size;
                },
                write: function(stream, buffer1, offset, length, position, canOwn) {
                    assert(!(buffer1 instanceof ArrayBuffer));
                    if (buffer1.buffer === HEAP8.buffer) canOwn = false;
                    if (!length) return 0;
                    var node = stream.node;
                    node.timestamp = Date.now();
                    if (buffer1.subarray && (!node.contents || node.contents.subarray)) {
                        if (canOwn) {
                            assert(position === 0, "canOwn must imply no weird position inside the file");
                            node.contents = buffer1.subarray(offset, offset + length);
                            node.usedBytes = length;
                            return length;
                        } else if (node.usedBytes === 0 && position === 0) {
                            node.contents = buffer1.slice(offset, offset + length);
                            node.usedBytes = length;
                            return length;
                        } else if (position + length <= node.usedBytes) {
                            node.contents.set(buffer1.subarray(offset, offset + length), position);
                            return length;
                        }
                    }
                    MEMFS.expandFileStorage(node, position + length);
                    if (node.contents.subarray && buffer1.subarray) node.contents.set(buffer1.subarray(offset, offset + length), position);
                    else for(var i = 0; i < length; i++)node.contents[position + i] = buffer1[offset + i];
                    node.usedBytes = Math.max(node.usedBytes, position + length);
                    return length;
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) position += stream.position;
                    else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) position += stream.node.usedBytes;
                    }
                    if (position < 0) throw new FS.ErrnoError(28);
                    return position;
                },
                allocate: function(stream, offset, length) {
                    MEMFS.expandFileStorage(stream.node, offset + length);
                    stream.node.usedBytes = Math.max(stream.node.usedBytes, offset + length);
                },
                mmap: function(stream, address, length, position, prot, flags) {
                    if (address !== 0) throw new FS.ErrnoError(28);
                    if (!FS.isFile(stream.node.mode)) throw new FS.ErrnoError(43);
                    var ptr;
                    var allocated;
                    var contents = stream.node.contents;
                    if (!(flags & 2) && contents.buffer === buffer) {
                        allocated = false;
                        ptr = contents.byteOffset;
                    } else {
                        if (position > 0 || position + length < contents.length) {
                            if (contents.subarray) contents = contents.subarray(position, position + length);
                            else contents = Array.prototype.slice.call(contents, position, position + length);
                        }
                        allocated = true;
                        ptr = mmapAlloc(length);
                        if (!ptr) throw new FS.ErrnoError(48);
                        ptr >>>= 0;
                        HEAP8.set(contents, ptr >>> 0);
                    }
                    return {
                        ptr: ptr,
                        allocated: allocated
                    };
                },
                msync: function(stream, buffer1, offset, length, mmapFlags) {
                    if (!FS.isFile(stream.node.mode)) throw new FS.ErrnoError(43);
                    if (mmapFlags & 2) return 0;
                    var bytesWritten = MEMFS.stream_ops.write(stream, buffer1, 0, length, offset, false);
                    return 0;
                }
            }
        };
        function asyncLoad(url, onload, onerror, noRunDep) {
            var dep = !noRunDep ? getUniqueRunDependency("al " + url) : "";
            readAsync(url, function(arrayBuffer) {
                assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
                onload(new Uint8Array(arrayBuffer));
                if (dep) removeRunDependency(dep);
            }, function(event) {
                if (onerror) onerror();
                else throw 'Loading data file "' + url + '" failed.';
            });
            if (dep) addRunDependency(dep);
        }
        var IDBFS = {
            dbs: {
            },
            indexedDB: function() {
                if (typeof indexedDB !== "undefined") return indexedDB;
                var ret = null;
                if (typeof window === "object") ret = window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
                assert(ret, "IDBFS used, but indexedDB not supported");
                return ret;
            },
            DB_VERSION: 21,
            DB_STORE_NAME: "FILE_DATA",
            mount: function(mount) {
                return MEMFS.mount.apply(null, arguments);
            },
            syncfs: function(mount, populate, callback) {
                IDBFS.getLocalSet(mount, function(err1, local) {
                    if (err1) return callback(err1);
                    IDBFS.getRemoteSet(mount, function(err2, remote) {
                        if (err2) return callback(err2);
                        var src = populate ? remote : local;
                        var dst = populate ? local : remote;
                        IDBFS.reconcile(src, dst, callback);
                    });
                });
            },
            getDB: function(name, callback) {
                var db = IDBFS.dbs[name];
                if (db) return callback(null, db);
                var req;
                try {
                    req = IDBFS.indexedDB().open(name, IDBFS.DB_VERSION);
                } catch (e) {
                    return callback(e);
                }
                if (!req) return callback("Unable to connect to IndexedDB");
                req.onupgradeneeded = function(e) {
                    var db1 = e.target.result;
                    var transaction = e.target.transaction;
                    var fileStore;
                    if (db1.objectStoreNames.contains(IDBFS.DB_STORE_NAME)) fileStore = transaction.objectStore(IDBFS.DB_STORE_NAME);
                    else fileStore = db1.createObjectStore(IDBFS.DB_STORE_NAME);
                    if (!fileStore.indexNames.contains("timestamp")) fileStore.createIndex("timestamp", "timestamp", {
                        unique: false
                    });
                };
                req.onsuccess = function() {
                    db = req.result;
                    IDBFS.dbs[name] = db;
                    callback(null, db);
                };
                req.onerror = function(e) {
                    callback(this.error);
                    e.preventDefault();
                };
            },
            getLocalSet: function(mount, callback) {
                var entries = {
                };
                function isRealDir(p) {
                    return p !== "." && p !== "..";
                }
                function toAbsolute(root) {
                    return function(p) {
                        return PATH.join2(root, p);
                    };
                }
                var check = FS.readdir(mount.mountpoint).filter(isRealDir).map(toAbsolute(mount.mountpoint));
                while(check.length){
                    var path = check.pop();
                    var stat;
                    try {
                        stat = FS.stat(path);
                    } catch (e) {
                        return callback(e);
                    }
                    if (FS.isDir(stat.mode)) check.push.apply(check, FS.readdir(path).filter(isRealDir).map(toAbsolute(path)));
                    entries[path] = {
                        "timestamp": stat.mtime
                    };
                }
                return callback(null, {
                    type: "local",
                    entries: entries
                });
            },
            getRemoteSet: function(mount, callback) {
                var entries = {
                };
                IDBFS.getDB(mount.mountpoint, function(err1, db) {
                    if (err1) return callback(err1);
                    try {
                        var transaction = db.transaction([
                            IDBFS.DB_STORE_NAME
                        ], "readonly");
                        transaction.onerror = function(e) {
                            callback(this.error);
                            e.preventDefault();
                        };
                        var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                        var index = store.index("timestamp");
                        index.openKeyCursor().onsuccess = function(event) {
                            var cursor = event.target.result;
                            if (!cursor) return callback(null, {
                                type: "remote",
                                db: db,
                                entries: entries
                            });
                            entries[cursor.primaryKey] = {
                                "timestamp": cursor.key
                            };
                            cursor.continue();
                        };
                    } catch (e) {
                        return callback(e);
                    }
                });
            },
            loadLocalEntry: function(path, callback) {
                var stat, node;
                try {
                    var lookup = FS.lookupPath(path);
                    node = lookup.node;
                    stat = FS.stat(path);
                } catch (e) {
                    return callback(e);
                }
                if (FS.isDir(stat.mode)) return callback(null, {
                    "timestamp": stat.mtime,
                    "mode": stat.mode
                });
                else if (FS.isFile(stat.mode)) {
                    node.contents = MEMFS.getFileDataAsTypedArray(node);
                    return callback(null, {
                        "timestamp": stat.mtime,
                        "mode": stat.mode,
                        "contents": node.contents
                    });
                } else return callback(new Error("node type not supported"));
            },
            storeLocalEntry: function(path, entry, callback) {
                try {
                    if (FS.isDir(entry["mode"])) FS.mkdirTree(path, entry["mode"]);
                    else if (FS.isFile(entry["mode"])) FS.writeFile(path, entry["contents"], {
                        canOwn: true
                    });
                    else return callback(new Error("node type not supported"));
                    FS.chmod(path, entry["mode"]);
                    FS.utime(path, entry["timestamp"], entry["timestamp"]);
                } catch (e) {
                    return callback(e);
                }
                callback(null);
            },
            removeLocalEntry: function(path, callback) {
                try {
                    var lookup = FS.lookupPath(path);
                    var stat = FS.stat(path);
                    if (FS.isDir(stat.mode)) FS.rmdir(path);
                    else if (FS.isFile(stat.mode)) FS.unlink(path);
                } catch (e) {
                    return callback(e);
                }
                callback(null);
            },
            loadRemoteEntry: function(store, path, callback) {
                var req = store.get(path);
                req.onsuccess = function(event) {
                    callback(null, event.target.result);
                };
                req.onerror = function(e) {
                    callback(this.error);
                    e.preventDefault();
                };
            },
            storeRemoteEntry: function(store, path, entry, callback) {
                try {
                    var req = store.put(entry, path);
                } catch (e) {
                    callback(e);
                    return;
                }
                req.onsuccess = function() {
                    callback(null);
                };
                req.onerror = function(e) {
                    callback(this.error);
                    e.preventDefault();
                };
            },
            removeRemoteEntry: function(store, path, callback) {
                var req = store.delete(path);
                req.onsuccess = function() {
                    callback(null);
                };
                req.onerror = function(e) {
                    callback(this.error);
                    e.preventDefault();
                };
            },
            reconcile: function(src, dst, callback) {
                var total = 0;
                var create = [];
                Object.keys(src.entries).forEach(function(key1) {
                    var e = src.entries[key1];
                    var e2 = dst.entries[key1];
                    if (!e2 || e["timestamp"].getTime() != e2["timestamp"].getTime()) {
                        create.push(key1);
                        total++;
                    }
                });
                var remove = [];
                Object.keys(dst.entries).forEach(function(key1) {
                    if (!src.entries[key1]) {
                        remove.push(key1);
                        total++;
                    }
                });
                if (!total) return callback(null);
                var errored = false;
                var db = src.type === "remote" ? src.db : dst.db;
                var transaction = db.transaction([
                    IDBFS.DB_STORE_NAME
                ], "readwrite");
                var store = transaction.objectStore(IDBFS.DB_STORE_NAME);
                function done(err1) {
                    if (err1 && !errored) {
                        errored = true;
                        return callback(err1);
                    }
                }
                transaction.onerror = function(e) {
                    done(this.error);
                    e.preventDefault();
                };
                transaction.oncomplete = function(e) {
                    if (!errored) callback(null);
                };
                create.sort().forEach(function(path) {
                    if (dst.type === "local") IDBFS.loadRemoteEntry(store, path, function(err1, entry) {
                        if (err1) return done(err1);
                        IDBFS.storeLocalEntry(path, entry, done);
                    });
                    else IDBFS.loadLocalEntry(path, function(err1, entry) {
                        if (err1) return done(err1);
                        IDBFS.storeRemoteEntry(store, path, entry, done);
                    });
                });
                remove.sort().reverse().forEach(function(path) {
                    if (dst.type === "local") IDBFS.removeLocalEntry(path, done);
                    else IDBFS.removeRemoteEntry(store, path, done);
                });
            }
        };
        var WORKERFS = {
            DIR_MODE: 16895,
            FILE_MODE: 33279,
            reader: null,
            mount: function(mount) {
                assert(ENVIRONMENT_IS_WORKER);
                if (!WORKERFS.reader) WORKERFS.reader = new FileReaderSync();
                var root = WORKERFS.createNode(null, "/", WORKERFS.DIR_MODE, 0);
                var createdParents = {
                };
                function ensureParent(path) {
                    var parts = path.split("/");
                    var parent = root;
                    for(var i = 0; i < parts.length - 1; i++){
                        var curr = parts.slice(0, i + 1).join("/");
                        if (!createdParents[curr]) createdParents[curr] = WORKERFS.createNode(parent, parts[i], WORKERFS.DIR_MODE, 0);
                        parent = createdParents[curr];
                    }
                    return parent;
                }
                function base(path) {
                    var parts = path.split("/");
                    return parts[parts.length - 1];
                }
                Array.prototype.forEach.call(mount.opts["files"] || [], function(file) {
                    WORKERFS.createNode(ensureParent(file.name), base(file.name), WORKERFS.FILE_MODE, 0, file, file.lastModifiedDate);
                });
                (mount.opts["blobs"] || []).forEach(function(obj) {
                    WORKERFS.createNode(ensureParent(obj["name"]), base(obj["name"]), WORKERFS.FILE_MODE, 0, obj["data"]);
                });
                (mount.opts["packages"] || []).forEach(function(pack) {
                    pack["metadata"].files.forEach(function(file) {
                        var name = file.filename.substr(1);
                        WORKERFS.createNode(ensureParent(name), base(name), WORKERFS.FILE_MODE, 0, pack["blob"].slice(file.start, file.end));
                    });
                });
                return root;
            },
            createNode: function(parent, name, mode, dev, contents, mtime) {
                var node = FS.createNode(parent, name, mode);
                node.mode = mode;
                node.node_ops = WORKERFS.node_ops;
                node.stream_ops = WORKERFS.stream_ops;
                node.timestamp = (mtime || new Date()).getTime();
                assert(WORKERFS.FILE_MODE !== WORKERFS.DIR_MODE);
                if (mode === WORKERFS.FILE_MODE) {
                    node.size = contents.size;
                    node.contents = contents;
                } else {
                    node.size = 4096;
                    node.contents = {
                    };
                }
                if (parent) parent.contents[name] = node;
                return node;
            },
            node_ops: {
                getattr: function(node) {
                    return {
                        dev: 1,
                        ino: node.id,
                        mode: node.mode,
                        nlink: 1,
                        uid: 0,
                        gid: 0,
                        rdev: undefined,
                        size: node.size,
                        atime: new Date(node.timestamp),
                        mtime: new Date(node.timestamp),
                        ctime: new Date(node.timestamp),
                        blksize: 4096,
                        blocks: Math.ceil(node.size / 4096)
                    };
                },
                setattr: function(node, attr) {
                    if (attr.mode !== undefined) node.mode = attr.mode;
                    if (attr.timestamp !== undefined) node.timestamp = attr.timestamp;
                },
                lookup: function(parent, name) {
                    throw new FS.ErrnoError(44);
                },
                mknod: function(parent, name, mode, dev) {
                    throw new FS.ErrnoError(63);
                },
                rename: function(oldNode, newDir, newName) {
                    throw new FS.ErrnoError(63);
                },
                unlink: function(parent, name) {
                    throw new FS.ErrnoError(63);
                },
                rmdir: function(parent, name) {
                    throw new FS.ErrnoError(63);
                },
                readdir: function(node) {
                    var entries = [
                        ".",
                        ".."
                    ];
                    for(var key1 in node.contents){
                        if (!node.contents.hasOwnProperty(key1)) continue;
                        entries.push(key1);
                    }
                    return entries;
                },
                symlink: function(parent, newName, oldPath) {
                    throw new FS.ErrnoError(63);
                },
                readlink: function(node) {
                    throw new FS.ErrnoError(63);
                }
            },
            stream_ops: {
                read: function(stream, buffer1, offset, length, position) {
                    if (position >= stream.node.size) return 0;
                    var chunk = stream.node.contents.slice(position, position + length);
                    var ab = WORKERFS.reader.readAsArrayBuffer(chunk);
                    buffer1.set(new Uint8Array(ab), offset);
                    return chunk.size;
                },
                write: function(stream, buffer1, offset, length, position) {
                    throw new FS.ErrnoError(29);
                },
                llseek: function(stream, offset, whence) {
                    var position = offset;
                    if (whence === 1) position += stream.position;
                    else if (whence === 2) {
                        if (FS.isFile(stream.node.mode)) position += stream.node.size;
                    }
                    if (position < 0) throw new FS.ErrnoError(28);
                    return position;
                }
            }
        };
        var ERRNO_MESSAGES = {
            0: "Success",
            1: "Arg list too long",
            2: "Permission denied",
            3: "Address already in use",
            4: "Address not available",
            5: "Address family not supported by protocol family",
            6: "No more processes",
            7: "Socket already connected",
            8: "Bad file number",
            9: "Trying to read unreadable message",
            10: "Mount device busy",
            11: "Operation canceled",
            12: "No children",
            13: "Connection aborted",
            14: "Connection refused",
            15: "Connection reset by peer",
            16: "File locking deadlock error",
            17: "Destination address required",
            18: "Math arg out of domain of func",
            19: "Quota exceeded",
            20: "File exists",
            21: "Bad address",
            22: "File too large",
            23: "Host is unreachable",
            24: "Identifier removed",
            25: "Illegal byte sequence",
            26: "Connection already in progress",
            27: "Interrupted system call",
            28: "Invalid argument",
            29: "I/O error",
            30: "Socket is already connected",
            31: "Is a directory",
            32: "Too many symbolic links",
            33: "Too many open files",
            34: "Too many links",
            35: "Message too long",
            36: "Multihop attempted",
            37: "File or path name too long",
            38: "Network interface is not configured",
            39: "Connection reset by network",
            40: "Network is unreachable",
            41: "Too many open files in system",
            42: "No buffer space available",
            43: "No such device",
            44: "No such file or directory",
            45: "Exec format error",
            46: "No record locks available",
            47: "The link has been severed",
            48: "Not enough core",
            49: "No message of desired type",
            50: "Protocol not available",
            51: "No space left on device",
            52: "Function not implemented",
            53: "Socket is not connected",
            54: "Not a directory",
            55: "Directory not empty",
            56: "State not recoverable",
            57: "Socket operation on non-socket",
            59: "Not a typewriter",
            60: "No such device or address",
            61: "Value too large for defined data type",
            62: "Previous owner died",
            63: "Not super-user",
            64: "Broken pipe",
            65: "Protocol error",
            66: "Unknown protocol",
            67: "Protocol wrong type for socket",
            68: "Math result not representable",
            69: "Read only file system",
            70: "Illegal seek",
            71: "No such process",
            72: "Stale file handle",
            73: "Connection timed out",
            74: "Text file busy",
            75: "Cross-device link",
            100: "Device not a stream",
            101: "Bad font file fmt",
            102: "Invalid slot",
            103: "Invalid request code",
            104: "No anode",
            105: "Block device required",
            106: "Channel number out of range",
            107: "Level 3 halted",
            108: "Level 3 reset",
            109: "Link number out of range",
            110: "Protocol driver not attached",
            111: "No CSI structure available",
            112: "Level 2 halted",
            113: "Invalid exchange",
            114: "Invalid request descriptor",
            115: "Exchange full",
            116: "No data (for no delay io)",
            117: "Timer expired",
            118: "Out of streams resources",
            119: "Machine is not on the network",
            120: "Package not installed",
            121: "The object is remote",
            122: "Advertise error",
            123: "Srmount error",
            124: "Communication error on send",
            125: "Cross mount point (not really error)",
            126: "Given log. name not unique",
            127: "f.d. invalid for this operation",
            128: "Remote address changed",
            129: "Can   access a needed shared lib",
            130: "Accessing a corrupted shared lib",
            131: ".lib section in a.out corrupted",
            132: "Attempting to link in too many libs",
            133: "Attempting to exec a shared library",
            135: "Streams pipe error",
            136: "Too many users",
            137: "Socket type not supported",
            138: "Not supported",
            139: "Protocol family not supported",
            140: "Can't send after socket shutdown",
            141: "Too many references",
            142: "Host is down",
            148: "No medium (in tape drive)",
            156: "Level 2 not synchronized"
        };
        var ERRNO_CODES = {
            EPERM: 63,
            ENOENT: 44,
            ESRCH: 71,
            EINTR: 27,
            EIO: 29,
            ENXIO: 60,
            E2BIG: 1,
            ENOEXEC: 45,
            EBADF: 8,
            ECHILD: 12,
            EAGAIN: 6,
            EWOULDBLOCK: 6,
            ENOMEM: 48,
            EACCES: 2,
            EFAULT: 21,
            ENOTBLK: 105,
            EBUSY: 10,
            EEXIST: 20,
            EXDEV: 75,
            ENODEV: 43,
            ENOTDIR: 54,
            EISDIR: 31,
            EINVAL: 28,
            ENFILE: 41,
            EMFILE: 33,
            ENOTTY: 59,
            ETXTBSY: 74,
            EFBIG: 22,
            ENOSPC: 51,
            ESPIPE: 70,
            EROFS: 69,
            EMLINK: 34,
            EPIPE: 64,
            EDOM: 18,
            ERANGE: 68,
            ENOMSG: 49,
            EIDRM: 24,
            ECHRNG: 106,
            EL2NSYNC: 156,
            EL3HLT: 107,
            EL3RST: 108,
            ELNRNG: 109,
            EUNATCH: 110,
            ENOCSI: 111,
            EL2HLT: 112,
            EDEADLK: 16,
            ENOLCK: 46,
            EBADE: 113,
            EBADR: 114,
            EXFULL: 115,
            ENOANO: 104,
            EBADRQC: 103,
            EBADSLT: 102,
            EDEADLOCK: 16,
            EBFONT: 101,
            ENOSTR: 100,
            ENODATA: 116,
            ETIME: 117,
            ENOSR: 118,
            ENONET: 119,
            ENOPKG: 120,
            EREMOTE: 121,
            ENOLINK: 47,
            EADV: 122,
            ESRMNT: 123,
            ECOMM: 124,
            EPROTO: 65,
            EMULTIHOP: 36,
            EDOTDOT: 125,
            EBADMSG: 9,
            ENOTUNIQ: 126,
            EBADFD: 127,
            EREMCHG: 128,
            ELIBACC: 129,
            ELIBBAD: 130,
            ELIBSCN: 131,
            ELIBMAX: 132,
            ELIBEXEC: 133,
            ENOSYS: 52,
            ENOTEMPTY: 55,
            ENAMETOOLONG: 37,
            ELOOP: 32,
            EOPNOTSUPP: 138,
            EPFNOSUPPORT: 139,
            ECONNRESET: 15,
            ENOBUFS: 42,
            EAFNOSUPPORT: 5,
            EPROTOTYPE: 67,
            ENOTSOCK: 57,
            ENOPROTOOPT: 50,
            ESHUTDOWN: 140,
            ECONNREFUSED: 14,
            EADDRINUSE: 3,
            ECONNABORTED: 13,
            ENETUNREACH: 40,
            ENETDOWN: 38,
            ETIMEDOUT: 73,
            EHOSTDOWN: 142,
            EHOSTUNREACH: 23,
            EINPROGRESS: 26,
            EALREADY: 7,
            EDESTADDRREQ: 17,
            EMSGSIZE: 35,
            EPROTONOSUPPORT: 66,
            ESOCKTNOSUPPORT: 137,
            EADDRNOTAVAIL: 4,
            ENETRESET: 39,
            EISCONN: 30,
            ENOTCONN: 53,
            ETOOMANYREFS: 141,
            EUSERS: 136,
            EDQUOT: 19,
            ESTALE: 72,
            ENOTSUP: 138,
            ENOMEDIUM: 148,
            EILSEQ: 25,
            EOVERFLOW: 61,
            ECANCELED: 11,
            ENOTRECOVERABLE: 56,
            EOWNERDEAD: 62,
            ESTRPIPE: 135
        };
        var FS = {
            root: null,
            mounts: [],
            devices: {
            },
            streams: [],
            nextInode: 1,
            nameTable: null,
            currentPath: "/",
            initialized: false,
            ignorePermissions: true,
            trackingDelegate: {
            },
            tracking: {
                openFlags: {
                    READ: 1,
                    WRITE: 2
                }
            },
            ErrnoError: null,
            genericErrors: {
            },
            filesystems: null,
            syncFSRequests: 0,
            lookupPath: function(path, opts) {
                path = PATH_FS.resolve(FS.cwd(), path);
                opts = opts || {
                };
                if (!path) return {
                    path: "",
                    node: null
                };
                var defaults = {
                    follow_mount: true,
                    recurse_count: 0
                };
                for(var key1 in defaults)if (opts[key1] === undefined) opts[key1] = defaults[key1];
                if (opts.recurse_count > 8) throw new FS.ErrnoError(32);
                var parts = PATH.normalizeArray(path.split("/").filter(function(p) {
                    return !!p;
                }), false);
                var current = FS.root;
                var current_path = "/";
                for(var i = 0; i < parts.length; i++){
                    var islast = i === parts.length - 1;
                    if (islast && opts.parent) break;
                    current = FS.lookupNode(current, parts[i]);
                    current_path = PATH.join2(current_path, parts[i]);
                    if (FS.isMountpoint(current)) {
                        if (!islast || islast && opts.follow_mount) current = current.mounted.root;
                    }
                    if (!islast || opts.follow) {
                        var count = 0;
                        while(FS.isLink(current.mode)){
                            var link = FS.readlink(current_path);
                            current_path = PATH_FS.resolve(PATH.dirname(current_path), link);
                            var lookup = FS.lookupPath(current_path, {
                                recurse_count: opts.recurse_count
                            });
                            current = lookup.node;
                            if ((count++) > 40) throw new FS.ErrnoError(32);
                        }
                    }
                }
                return {
                    path: current_path,
                    node: current
                };
            },
            getPath: function(node) {
                var path;
                while(true){
                    if (FS.isRoot(node)) {
                        var mount = node.mount.mountpoint;
                        if (!path) return mount;
                        return mount[mount.length - 1] !== "/" ? mount + "/" + path : mount + path;
                    }
                    path = path ? node.name + "/" + path : node.name;
                    node = node.parent;
                }
            },
            hashName: function(parentid, name) {
                var hash = 0;
                for(var i = 0; i < name.length; i++)hash = (hash << 5) - hash + name.charCodeAt(i) | 0;
                return (parentid + hash >>> 0) % FS.nameTable.length;
            },
            hashAddNode: function(node) {
                var hash = FS.hashName(node.parent.id, node.name);
                node.name_next = FS.nameTable[hash];
                FS.nameTable[hash] = node;
            },
            hashRemoveNode: function(node) {
                var hash = FS.hashName(node.parent.id, node.name);
                if (FS.nameTable[hash] === node) FS.nameTable[hash] = node.name_next;
                else {
                    var current = FS.nameTable[hash];
                    while(current){
                        if (current.name_next === node) {
                            current.name_next = node.name_next;
                            break;
                        }
                        current = current.name_next;
                    }
                }
            },
            lookupNode: function(parent, name) {
                var errCode = FS.mayLookup(parent);
                if (errCode) throw new FS.ErrnoError(errCode, parent);
                var hash = FS.hashName(parent.id, name);
                for(var node = FS.nameTable[hash]; node; node = node.name_next){
                    var nodeName = node.name;
                    if (node.parent.id === parent.id && nodeName === name) return node;
                }
                return FS.lookup(parent, name);
            },
            createNode: function(parent, name, mode, rdev) {
                assert(typeof parent === "object");
                var node = new FS.FSNode(parent, name, mode, rdev);
                FS.hashAddNode(node);
                return node;
            },
            destroyNode: function(node) {
                FS.hashRemoveNode(node);
            },
            isRoot: function(node) {
                return node === node.parent;
            },
            isMountpoint: function(node) {
                return !!node.mounted;
            },
            isFile: function(mode) {
                return (mode & 61440) === 32768;
            },
            isDir: function(mode) {
                return (mode & 61440) === 16384;
            },
            isLink: function(mode) {
                return (mode & 61440) === 40960;
            },
            isChrdev: function(mode) {
                return (mode & 61440) === 8192;
            },
            isBlkdev: function(mode) {
                return (mode & 61440) === 24576;
            },
            isFIFO: function(mode) {
                return (mode & 61440) === 4096;
            },
            isSocket: function(mode) {
                return (mode & 49152) === 49152;
            },
            flagModes: {
                "r": 0,
                "r+": 2,
                "w": 577,
                "w+": 578,
                "a": 1089,
                "a+": 1090
            },
            modeStringToFlags: function(str) {
                var flags = FS.flagModes[str];
                if (typeof flags === "undefined") throw new Error("Unknown file open mode: " + str);
                return flags;
            },
            flagsToPermissionString: function(flag) {
                var perms = [
                    "r",
                    "w",
                    "rw"
                ][flag & 3];
                if (flag & 512) perms += "w";
                return perms;
            },
            nodePermissions: function(node, perms) {
                if (FS.ignorePermissions) return 0;
                if (perms.includes("r") && !(node.mode & 292)) return 2;
                else if (perms.includes("w") && !(node.mode & 146)) return 2;
                else if (perms.includes("x") && !(node.mode & 73)) return 2;
                return 0;
            },
            mayLookup: function(dir) {
                var errCode = FS.nodePermissions(dir, "x");
                if (errCode) return errCode;
                if (!dir.node_ops.lookup) return 2;
                return 0;
            },
            mayCreate: function(dir, name) {
                try {
                    var node = FS.lookupNode(dir, name);
                    return 20;
                } catch (e) {
                }
                return FS.nodePermissions(dir, "wx");
            },
            mayDelete: function(dir, name, isdir) {
                var node;
                try {
                    node = FS.lookupNode(dir, name);
                } catch (e) {
                    return e.errno;
                }
                var errCode = FS.nodePermissions(dir, "wx");
                if (errCode) return errCode;
                if (isdir) {
                    if (!FS.isDir(node.mode)) return 54;
                    if (FS.isRoot(node) || FS.getPath(node) === FS.cwd()) return 10;
                } else {
                    if (FS.isDir(node.mode)) return 31;
                }
                return 0;
            },
            mayOpen: function(node, flags) {
                if (!node) return 44;
                if (FS.isLink(node.mode)) return 32;
                else if (FS.isDir(node.mode)) {
                    if (FS.flagsToPermissionString(flags) !== "r" || flags & 512) return 31;
                }
                return FS.nodePermissions(node, FS.flagsToPermissionString(flags));
            },
            MAX_OPEN_FDS: 4096,
            nextfd: function(fd_start, fd_end) {
                fd_start = fd_start || 0;
                fd_end = fd_end || FS.MAX_OPEN_FDS;
                for(var fd = fd_start; fd <= fd_end; fd++){
                    if (!FS.streams[fd]) return fd;
                }
                throw new FS.ErrnoError(33);
            },
            getStream: function(fd) {
                return FS.streams[fd];
            },
            createStream: function(stream, fd_start, fd_end) {
                if (!FS.FSStream) {
                    FS.FSStream = function() {
                    };
                    FS.FSStream.prototype = {
                        object: {
                            get: function() {
                                return this.node;
                            },
                            set: function(val) {
                                this.node = val;
                            }
                        },
                        isRead: {
                            get: function() {
                                return (this.flags & 2097155) !== 1;
                            }
                        },
                        isWrite: {
                            get: function() {
                                return (this.flags & 2097155) !== 0;
                            }
                        },
                        isAppend: {
                            get: function() {
                                return this.flags & 1024;
                            }
                        }
                    };
                }
                var newStream = new FS.FSStream();
                for(var p in stream)newStream[p] = stream[p];
                stream = newStream;
                var fd = FS.nextfd(fd_start, fd_end);
                stream.fd = fd;
                FS.streams[fd] = stream;
                return stream;
            },
            closeStream: function(fd) {
                FS.streams[fd] = null;
            },
            chrdev_stream_ops: {
                open: function(stream) {
                    var device = FS.getDevice(stream.node.rdev);
                    stream.stream_ops = device.stream_ops;
                    if (stream.stream_ops.open) stream.stream_ops.open(stream);
                },
                llseek: function() {
                    throw new FS.ErrnoError(70);
                }
            },
            major: function(dev) {
                return dev >> 8;
            },
            minor: function(dev) {
                return dev & 255;
            },
            makedev: function(ma, mi) {
                return ma << 8 | mi;
            },
            registerDevice: function(dev, ops) {
                FS.devices[dev] = {
                    stream_ops: ops
                };
            },
            getDevice: function(dev) {
                return FS.devices[dev];
            },
            getMounts: function(mount) {
                var mounts = [];
                var check = [
                    mount
                ];
                while(check.length){
                    var m = check.pop();
                    mounts.push(m);
                    check.push.apply(check, m.mounts);
                }
                return mounts;
            },
            syncfs: function(populate, callback) {
                if (typeof populate === "function") {
                    callback = populate;
                    populate = false;
                }
                FS.syncFSRequests++;
                if (FS.syncFSRequests > 1) err("warning: " + FS.syncFSRequests + " FS.syncfs operations in flight at once, probably just doing extra work");
                var mounts = FS.getMounts(FS.root.mount);
                var completed = 0;
                function doCallback(errCode) {
                    assert(FS.syncFSRequests > 0);
                    FS.syncFSRequests--;
                    return callback(errCode);
                }
                function done(errCode) {
                    if (errCode) {
                        if (!done.errored) {
                            done.errored = true;
                            return doCallback(errCode);
                        }
                        return;
                    }
                    if ((++completed) >= mounts.length) doCallback(null);
                }
                mounts.forEach(function(mount) {
                    if (!mount.type.syncfs) return done(null);
                    mount.type.syncfs(mount, populate, done);
                });
            },
            mount: function(type, opts, mountpoint) {
                if (typeof type === "string") throw type;
                var root = mountpoint === "/";
                var pseudo = !mountpoint;
                var node;
                if (root && FS.root) throw new FS.ErrnoError(10);
                else if (!root && !pseudo) {
                    var lookup = FS.lookupPath(mountpoint, {
                        follow_mount: false
                    });
                    mountpoint = lookup.path;
                    node = lookup.node;
                    if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);
                    if (!FS.isDir(node.mode)) throw new FS.ErrnoError(54);
                }
                var mount = {
                    type: type,
                    opts: opts,
                    mountpoint: mountpoint,
                    mounts: []
                };
                var mountRoot = type.mount(mount);
                mountRoot.mount = mount;
                mount.root = mountRoot;
                if (root) FS.root = mountRoot;
                else if (node) {
                    node.mounted = mount;
                    if (node.mount) node.mount.mounts.push(mount);
                }
                return mountRoot;
            },
            unmount: function(mountpoint) {
                var lookup = FS.lookupPath(mountpoint, {
                    follow_mount: false
                });
                if (!FS.isMountpoint(lookup.node)) throw new FS.ErrnoError(28);
                var node = lookup.node;
                var mount = node.mounted;
                var mounts = FS.getMounts(mount);
                Object.keys(FS.nameTable).forEach(function(hash) {
                    var current = FS.nameTable[hash];
                    while(current){
                        var next = current.name_next;
                        if (mounts.includes(current.mount)) FS.destroyNode(current);
                        current = next;
                    }
                });
                node.mounted = null;
                var idx = node.mount.mounts.indexOf(mount);
                assert(idx !== -1);
                node.mount.mounts.splice(idx, 1);
            },
            lookup: function(parent, name) {
                return parent.node_ops.lookup(parent, name);
            },
            mknod: function(path, mode, dev) {
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                var name = PATH.basename(path);
                if (!name || name === "." || name === "..") throw new FS.ErrnoError(28);
                var errCode = FS.mayCreate(parent, name);
                if (errCode) throw new FS.ErrnoError(errCode);
                if (!parent.node_ops.mknod) throw new FS.ErrnoError(63);
                return parent.node_ops.mknod(parent, name, mode, dev);
            },
            create: function(path, mode) {
                mode = mode !== undefined ? mode : 438;
                mode &= 4095;
                mode |= 32768;
                return FS.mknod(path, mode, 0);
            },
            mkdir: function(path, mode) {
                mode = mode !== undefined ? mode : 511;
                mode &= 1023;
                mode |= 16384;
                return FS.mknod(path, mode, 0);
            },
            mkdirTree: function(path, mode) {
                var dirs = path.split("/");
                var d = "";
                for(var i = 0; i < dirs.length; ++i){
                    if (!dirs[i]) continue;
                    d += "/" + dirs[i];
                    try {
                        FS.mkdir(d, mode);
                    } catch (e) {
                        if (e.errno != 20) throw e;
                    }
                }
            },
            mkdev: function(path, mode, dev) {
                if (typeof dev === "undefined") {
                    dev = mode;
                    mode = 438;
                }
                mode |= 8192;
                return FS.mknod(path, mode, dev);
            },
            symlink: function(oldpath, newpath) {
                if (!PATH_FS.resolve(oldpath)) throw new FS.ErrnoError(44);
                var lookup = FS.lookupPath(newpath, {
                    parent: true
                });
                var parent = lookup.node;
                if (!parent) throw new FS.ErrnoError(44);
                var newname = PATH.basename(newpath);
                var errCode = FS.mayCreate(parent, newname);
                if (errCode) throw new FS.ErrnoError(errCode);
                if (!parent.node_ops.symlink) throw new FS.ErrnoError(63);
                return parent.node_ops.symlink(parent, newname, oldpath);
            },
            rename: function(old_path, new_path) {
                var old_dirname = PATH.dirname(old_path);
                var new_dirname = PATH.dirname(new_path);
                var old_name = PATH.basename(old_path);
                var new_name = PATH.basename(new_path);
                var lookup, old_dir, new_dir;
                lookup = FS.lookupPath(old_path, {
                    parent: true
                });
                old_dir = lookup.node;
                lookup = FS.lookupPath(new_path, {
                    parent: true
                });
                new_dir = lookup.node;
                if (!old_dir || !new_dir) throw new FS.ErrnoError(44);
                if (old_dir.mount !== new_dir.mount) throw new FS.ErrnoError(75);
                var old_node = FS.lookupNode(old_dir, old_name);
                var relative = PATH_FS.relative(old_path, new_dirname);
                if (relative.charAt(0) !== ".") throw new FS.ErrnoError(28);
                relative = PATH_FS.relative(new_path, old_dirname);
                if (relative.charAt(0) !== ".") throw new FS.ErrnoError(55);
                var new_node;
                try {
                    new_node = FS.lookupNode(new_dir, new_name);
                } catch (e) {
                }
                if (old_node === new_node) return;
                var isdir = FS.isDir(old_node.mode);
                var errCode = FS.mayDelete(old_dir, old_name, isdir);
                if (errCode) throw new FS.ErrnoError(errCode);
                errCode = new_node ? FS.mayDelete(new_dir, new_name, isdir) : FS.mayCreate(new_dir, new_name);
                if (errCode) throw new FS.ErrnoError(errCode);
                if (!old_dir.node_ops.rename) throw new FS.ErrnoError(63);
                if (FS.isMountpoint(old_node) || new_node && FS.isMountpoint(new_node)) throw new FS.ErrnoError(10);
                if (new_dir !== old_dir) {
                    errCode = FS.nodePermissions(old_dir, "w");
                    if (errCode) throw new FS.ErrnoError(errCode);
                }
                try {
                    if (FS.trackingDelegate["willMovePath"]) FS.trackingDelegate["willMovePath"](old_path, new_path);
                } catch (e) {
                    err("FS.trackingDelegate['willMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
                }
                FS.hashRemoveNode(old_node);
                try {
                    old_dir.node_ops.rename(old_node, new_dir, new_name);
                } catch (e) {
                    throw e;
                } finally{
                    FS.hashAddNode(old_node);
                }
                try {
                    if (FS.trackingDelegate["onMovePath"]) FS.trackingDelegate["onMovePath"](old_path, new_path);
                } catch (e) {
                    err("FS.trackingDelegate['onMovePath']('" + old_path + "', '" + new_path + "') threw an exception: " + e.message);
                }
            },
            rmdir: function(path) {
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                var name = PATH.basename(path);
                var node = FS.lookupNode(parent, name);
                var errCode = FS.mayDelete(parent, name, true);
                if (errCode) throw new FS.ErrnoError(errCode);
                if (!parent.node_ops.rmdir) throw new FS.ErrnoError(63);
                if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);
                try {
                    if (FS.trackingDelegate["willDeletePath"]) FS.trackingDelegate["willDeletePath"](path);
                } catch (e) {
                    err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
                }
                parent.node_ops.rmdir(parent, name);
                FS.destroyNode(node);
                try {
                    if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
                } catch (e) {
                    err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
                }
            },
            readdir: function(path) {
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                var node = lookup.node;
                if (!node.node_ops.readdir) throw new FS.ErrnoError(54);
                return node.node_ops.readdir(node);
            },
            unlink: function(path) {
                var lookup = FS.lookupPath(path, {
                    parent: true
                });
                var parent = lookup.node;
                var name = PATH.basename(path);
                var node = FS.lookupNode(parent, name);
                var errCode = FS.mayDelete(parent, name, false);
                if (errCode) throw new FS.ErrnoError(errCode);
                if (!parent.node_ops.unlink) throw new FS.ErrnoError(63);
                if (FS.isMountpoint(node)) throw new FS.ErrnoError(10);
                try {
                    if (FS.trackingDelegate["willDeletePath"]) FS.trackingDelegate["willDeletePath"](path);
                } catch (e) {
                    err("FS.trackingDelegate['willDeletePath']('" + path + "') threw an exception: " + e.message);
                }
                parent.node_ops.unlink(parent, name);
                FS.destroyNode(node);
                try {
                    if (FS.trackingDelegate["onDeletePath"]) FS.trackingDelegate["onDeletePath"](path);
                } catch (e) {
                    err("FS.trackingDelegate['onDeletePath']('" + path + "') threw an exception: " + e.message);
                }
            },
            readlink: function(path) {
                var lookup = FS.lookupPath(path);
                var link = lookup.node;
                if (!link) throw new FS.ErrnoError(44);
                if (!link.node_ops.readlink) throw new FS.ErrnoError(28);
                return PATH_FS.resolve(FS.getPath(link.parent), link.node_ops.readlink(link));
            },
            stat: function(path, dontFollow) {
                var lookup = FS.lookupPath(path, {
                    follow: !dontFollow
                });
                var node = lookup.node;
                if (!node) throw new FS.ErrnoError(44);
                if (!node.node_ops.getattr) throw new FS.ErrnoError(63);
                return node.node_ops.getattr(node);
            },
            lstat: function(path) {
                return FS.stat(path, true);
            },
            chmod: function(path, mode, dontFollow) {
                var node;
                if (typeof path === "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontFollow
                    });
                    node = lookup.node;
                } else node = path;
                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);
                node.node_ops.setattr(node, {
                    mode: mode & 4095 | node.mode & -4096,
                    timestamp: Date.now()
                });
            },
            lchmod: function(path, mode) {
                FS.chmod(path, mode, true);
            },
            fchmod: function(fd, mode) {
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                FS.chmod(stream.node, mode);
            },
            chown: function(path, uid, gid, dontFollow) {
                var node;
                if (typeof path === "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontFollow
                    });
                    node = lookup.node;
                } else node = path;
                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);
                node.node_ops.setattr(node, {
                    timestamp: Date.now()
                });
            },
            lchown: function(path, uid, gid) {
                FS.chown(path, uid, gid, true);
            },
            fchown: function(fd, uid, gid) {
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                FS.chown(stream.node, uid, gid);
            },
            truncate: function(path, len) {
                if (len < 0) throw new FS.ErrnoError(28);
                var node;
                if (typeof path === "string") {
                    var lookup = FS.lookupPath(path, {
                        follow: true
                    });
                    node = lookup.node;
                } else node = path;
                if (!node.node_ops.setattr) throw new FS.ErrnoError(63);
                if (FS.isDir(node.mode)) throw new FS.ErrnoError(31);
                if (!FS.isFile(node.mode)) throw new FS.ErrnoError(28);
                var errCode = FS.nodePermissions(node, "w");
                if (errCode) throw new FS.ErrnoError(errCode);
                node.node_ops.setattr(node, {
                    size: len,
                    timestamp: Date.now()
                });
            },
            ftruncate: function(fd, len) {
                var stream = FS.getStream(fd);
                if (!stream) throw new FS.ErrnoError(8);
                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(28);
                FS.truncate(stream.node, len);
            },
            utime: function(path, atime, mtime) {
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                var node = lookup.node;
                node.node_ops.setattr(node, {
                    timestamp: Math.max(atime, mtime)
                });
            },
            open: function(path, flags, mode, fd_start, fd_end) {
                if (path === "") throw new FS.ErrnoError(44);
                flags = typeof flags === "string" ? FS.modeStringToFlags(flags) : flags;
                mode = typeof mode === "undefined" ? 438 : mode;
                if (flags & 64) mode = mode & 4095 | 32768;
                else mode = 0;
                var node;
                if (typeof path === "object") node = path;
                else {
                    path = PATH.normalize(path);
                    try {
                        var lookup = FS.lookupPath(path, {
                            follow: !(flags & 131072)
                        });
                        node = lookup.node;
                    } catch (e) {
                    }
                }
                var created = false;
                if (flags & 64) {
                    if (node) {
                        if (flags & 128) throw new FS.ErrnoError(20);
                    } else {
                        node = FS.mknod(path, mode, 0);
                        created = true;
                    }
                }
                if (!node) throw new FS.ErrnoError(44);
                if (FS.isChrdev(node.mode)) flags &= -513;
                if (flags & 65536 && !FS.isDir(node.mode)) throw new FS.ErrnoError(54);
                if (!created) {
                    var errCode = FS.mayOpen(node, flags);
                    if (errCode) throw new FS.ErrnoError(errCode);
                }
                if (flags & 512) FS.truncate(node, 0);
                flags &= -131713;
                var stream = FS.createStream({
                    node: node,
                    path: FS.getPath(node),
                    flags: flags,
                    seekable: true,
                    position: 0,
                    stream_ops: node.stream_ops,
                    ungotten: [],
                    error: false
                }, fd_start, fd_end);
                if (stream.stream_ops.open) stream.stream_ops.open(stream);
                if (Module1["logReadFiles"] && !(flags & 1)) {
                    if (!FS.readFiles) FS.readFiles = {
                    };
                    if (!(path in FS.readFiles)) {
                        FS.readFiles[path] = 1;
                        err("FS.trackingDelegate error on read file: " + path);
                    }
                }
                try {
                    if (FS.trackingDelegate["onOpenFile"]) {
                        var trackingFlags = 0;
                        if ((flags & 2097155) !== 1) trackingFlags |= FS.tracking.openFlags.READ;
                        if ((flags & 2097155) !== 0) trackingFlags |= FS.tracking.openFlags.WRITE;
                        FS.trackingDelegate["onOpenFile"](path, trackingFlags);
                    }
                } catch (e) {
                    err("FS.trackingDelegate['onOpenFile']('" + path + "', flags) threw an exception: " + e.message);
                }
                return stream;
            },
            close: function(stream) {
                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);
                if (stream.getdents) stream.getdents = null;
                try {
                    if (stream.stream_ops.close) stream.stream_ops.close(stream);
                } catch (e) {
                    throw e;
                } finally{
                    FS.closeStream(stream.fd);
                }
                stream.fd = null;
            },
            isClosed: function(stream) {
                return stream.fd === null;
            },
            llseek: function(stream, offset, whence) {
                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);
                if (!stream.seekable || !stream.stream_ops.llseek) throw new FS.ErrnoError(70);
                if (whence != 0 && whence != 1 && whence != 2) throw new FS.ErrnoError(28);
                stream.position = stream.stream_ops.llseek(stream, offset, whence);
                stream.ungotten = [];
                return stream.position;
            },
            read: function(stream, buffer1, offset, length, position) {
                offset >>>= 0;
                if (length < 0 || position < 0) throw new FS.ErrnoError(28);
                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);
                if ((stream.flags & 2097155) === 1) throw new FS.ErrnoError(8);
                if (FS.isDir(stream.node.mode)) throw new FS.ErrnoError(31);
                if (!stream.stream_ops.read) throw new FS.ErrnoError(28);
                var seeking = typeof position !== "undefined";
                if (!seeking) position = stream.position;
                else if (!stream.seekable) throw new FS.ErrnoError(70);
                var bytesRead = stream.stream_ops.read(stream, buffer1, offset, length, position);
                if (!seeking) stream.position += bytesRead;
                return bytesRead;
            },
            write: function(stream, buffer1, offset, length, position, canOwn) {
                offset >>>= 0;
                if (length < 0 || position < 0) throw new FS.ErrnoError(28);
                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);
                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(8);
                if (FS.isDir(stream.node.mode)) throw new FS.ErrnoError(31);
                if (!stream.stream_ops.write) throw new FS.ErrnoError(28);
                if (stream.seekable && stream.flags & 1024) FS.llseek(stream, 0, 2);
                var seeking = typeof position !== "undefined";
                if (!seeking) position = stream.position;
                else if (!stream.seekable) throw new FS.ErrnoError(70);
                var bytesWritten = stream.stream_ops.write(stream, buffer1, offset, length, position, canOwn);
                if (!seeking) stream.position += bytesWritten;
                try {
                    if (stream.path && FS.trackingDelegate["onWriteToFile"]) FS.trackingDelegate["onWriteToFile"](stream.path);
                } catch (e) {
                    err("FS.trackingDelegate['onWriteToFile']('" + stream.path + "') threw an exception: " + e.message);
                }
                return bytesWritten;
            },
            allocate: function(stream, offset, length) {
                if (FS.isClosed(stream)) throw new FS.ErrnoError(8);
                if (offset < 0 || length <= 0) throw new FS.ErrnoError(28);
                if ((stream.flags & 2097155) === 0) throw new FS.ErrnoError(8);
                if (!FS.isFile(stream.node.mode) && !FS.isDir(stream.node.mode)) throw new FS.ErrnoError(43);
                if (!stream.stream_ops.allocate) throw new FS.ErrnoError(138);
                stream.stream_ops.allocate(stream, offset, length);
            },
            mmap: function(stream, address, length, position, prot, flags) {
                address >>>= 0;
                if ((prot & 2) !== 0 && (flags & 2) === 0 && (stream.flags & 2097155) !== 2) throw new FS.ErrnoError(2);
                if ((stream.flags & 2097155) === 1) throw new FS.ErrnoError(2);
                if (!stream.stream_ops.mmap) throw new FS.ErrnoError(43);
                return stream.stream_ops.mmap(stream, address, length, position, prot, flags);
            },
            msync: function(stream, buffer1, offset, length, mmapFlags) {
                offset >>>= 0;
                if (!stream || !stream.stream_ops.msync) return 0;
                return stream.stream_ops.msync(stream, buffer1, offset, length, mmapFlags);
            },
            munmap: function(stream) {
                return 0;
            },
            ioctl: function(stream, cmd, arg) {
                if (!stream.stream_ops.ioctl) throw new FS.ErrnoError(59);
                return stream.stream_ops.ioctl(stream, cmd, arg);
            },
            readFile: function(path, opts) {
                opts = opts || {
                };
                opts.flags = opts.flags || 0;
                opts.encoding = opts.encoding || "binary";
                if (opts.encoding !== "utf8" && opts.encoding !== "binary") throw new Error('Invalid encoding type "' + opts.encoding + '"');
                var ret;
                var stream = FS.open(path, opts.flags);
                var stat = FS.stat(path);
                var length = stat.size;
                var buf = new Uint8Array(length);
                FS.read(stream, buf, 0, length, 0);
                if (opts.encoding === "utf8") ret = UTF8ArrayToString(buf, 0);
                else if (opts.encoding === "binary") ret = buf;
                FS.close(stream);
                return ret;
            },
            writeFile: function(path, data, opts) {
                opts = opts || {
                };
                opts.flags = opts.flags || 577;
                var stream = FS.open(path, opts.flags, opts.mode);
                if (typeof data === "string") {
                    var buf = new Uint8Array(lengthBytesUTF8(data) + 1);
                    var actualNumBytes = stringToUTF8Array(data, buf, 0, buf.length);
                    FS.write(stream, buf, 0, actualNumBytes, undefined, opts.canOwn);
                } else if (ArrayBuffer.isView(data)) FS.write(stream, data, 0, data.byteLength, undefined, opts.canOwn);
                else throw new Error("Unsupported data type");
                FS.close(stream);
            },
            cwd: function() {
                return FS.currentPath;
            },
            chdir: function(path) {
                var lookup = FS.lookupPath(path, {
                    follow: true
                });
                if (lookup.node === null) throw new FS.ErrnoError(44);
                if (!FS.isDir(lookup.node.mode)) throw new FS.ErrnoError(54);
                var errCode = FS.nodePermissions(lookup.node, "x");
                if (errCode) throw new FS.ErrnoError(errCode);
                FS.currentPath = lookup.path;
            },
            createDefaultDirectories: function() {
                FS.mkdir("/tmp");
                FS.mkdir("/home");
                FS.mkdir("/home/web_user");
            },
            createDefaultDevices: function() {
                FS.mkdir("/dev");
                FS.registerDevice(FS.makedev(1, 3), {
                    read: function() {
                        return 0;
                    },
                    write: function(stream, buffer1, offset, length, pos) {
                        return length;
                    }
                });
                FS.mkdev("/dev/null", FS.makedev(1, 3));
                TTY.register(FS.makedev(5, 0), TTY.default_tty_ops);
                TTY.register(FS.makedev(6, 0), TTY.default_tty1_ops);
                FS.mkdev("/dev/tty", FS.makedev(5, 0));
                FS.mkdev("/dev/tty1", FS.makedev(6, 0));
                var random_device = getRandomDevice();
                FS.createDevice("/dev", "random", random_device);
                FS.createDevice("/dev", "urandom", random_device);
                FS.mkdir("/dev/shm");
                FS.mkdir("/dev/shm/tmp");
            },
            createSpecialDirectories: function() {
                FS.mkdir("/proc");
                var proc_self = FS.mkdir("/proc/self");
                FS.mkdir("/proc/self/fd");
                FS.mount({
                    mount: function() {
                        var node = FS.createNode(proc_self, "fd", 16895, 73);
                        node.node_ops = {
                            lookup: function(parent, name) {
                                var fd = +name;
                                var stream = FS.getStream(fd);
                                if (!stream) throw new FS.ErrnoError(8);
                                var ret = {
                                    parent: null,
                                    mount: {
                                        mountpoint: "fake"
                                    },
                                    node_ops: {
                                        readlink: function() {
                                            return stream.path;
                                        }
                                    }
                                };
                                ret.parent = ret;
                                return ret;
                            }
                        };
                        return node;
                    }
                }, {
                }, "/proc/self/fd");
            },
            createStandardStreams: function() {
                if (Module1["stdin"]) FS.createDevice("/dev", "stdin", Module1["stdin"]);
                else FS.symlink("/dev/tty", "/dev/stdin");
                if (Module1["stdout"]) FS.createDevice("/dev", "stdout", null, Module1["stdout"]);
                else FS.symlink("/dev/tty", "/dev/stdout");
                if (Module1["stderr"]) FS.createDevice("/dev", "stderr", null, Module1["stderr"]);
                else FS.symlink("/dev/tty1", "/dev/stderr");
                var stdin = FS.open("/dev/stdin", 0);
                var stdout = FS.open("/dev/stdout", 1);
                var stderr = FS.open("/dev/stderr", 1);
                assert(stdin.fd === 0, "invalid handle for stdin (" + stdin.fd + ")");
                assert(stdout.fd === 1, "invalid handle for stdout (" + stdout.fd + ")");
                assert(stderr.fd === 2, "invalid handle for stderr (" + stderr.fd + ")");
            },
            ensureErrnoError: function() {
                if (FS.ErrnoError) return;
                FS.ErrnoError = function ErrnoError(errno, node) {
                    this.node = node;
                    this.setErrno = function(errno1) {
                        this.errno = errno1;
                        for(var key1 in ERRNO_CODES)if (ERRNO_CODES[key1] === errno1) {
                            this.code = key1;
                            break;
                        }
                    };
                    this.setErrno(errno);
                    this.message = ERRNO_MESSAGES[errno];
                    if (this.stack) {
                        Object.defineProperty(this, "stack", {
                            value: new Error().stack,
                            writable: true
                        });
                        this.stack = demangleAll(this.stack);
                    }
                };
                FS.ErrnoError.prototype = new Error();
                FS.ErrnoError.prototype.constructor = FS.ErrnoError;
                [
                    44
                ].forEach(function(code) {
                    FS.genericErrors[code] = new FS.ErrnoError(code);
                    FS.genericErrors[code].stack = "<generic error, no stack>";
                });
            },
            staticInit: function() {
                FS.ensureErrnoError();
                FS.nameTable = new Array(4096);
                FS.mount(MEMFS, {
                }, "/");
                FS.createDefaultDirectories();
                FS.createDefaultDevices();
                FS.createSpecialDirectories();
                FS.filesystems = {
                    "MEMFS": MEMFS,
                    "IDBFS": IDBFS,
                    "WORKERFS": WORKERFS
                };
            },
            init: function(input, output, error) {
                assert(!FS.init.initialized, "FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)");
                FS.init.initialized = true;
                FS.ensureErrnoError();
                Module1["stdin"] = input || Module1["stdin"];
                Module1["stdout"] = output || Module1["stdout"];
                Module1["stderr"] = error || Module1["stderr"];
                FS.createStandardStreams();
            },
            quit: function() {
                FS.init.initialized = false;
                var fflush = Module1["_fflush"];
                if (fflush) fflush(0);
                for(var i = 0; i < FS.streams.length; i++){
                    var stream = FS.streams[i];
                    if (!stream) continue;
                    FS.close(stream);
                }
            },
            getMode: function(canRead, canWrite) {
                var mode = 0;
                if (canRead) mode |= 365;
                if (canWrite) mode |= 146;
                return mode;
            },
            findObject: function(path, dontResolveLastLink) {
                var ret = FS.analyzePath(path, dontResolveLastLink);
                if (ret.exists) return ret.object;
                else return null;
            },
            analyzePath: function(path, dontResolveLastLink) {
                try {
                    var lookup = FS.lookupPath(path, {
                        follow: !dontResolveLastLink
                    });
                    path = lookup.path;
                } catch (e) {
                }
                var ret = {
                    isRoot: false,
                    exists: false,
                    error: 0,
                    name: null,
                    path: null,
                    object: null,
                    parentExists: false,
                    parentPath: null,
                    parentObject: null
                };
                try {
                    var lookup = FS.lookupPath(path, {
                        parent: true
                    });
                    ret.parentExists = true;
                    ret.parentPath = lookup.path;
                    ret.parentObject = lookup.node;
                    ret.name = PATH.basename(path);
                    lookup = FS.lookupPath(path, {
                        follow: !dontResolveLastLink
                    });
                    ret.exists = true;
                    ret.path = lookup.path;
                    ret.object = lookup.node;
                    ret.name = lookup.node.name;
                    ret.isRoot = lookup.path === "/";
                } catch (e) {
                    ret.error = e.errno;
                }
                return ret;
            },
            createPath: function(parent, path, canRead, canWrite) {
                parent = typeof parent === "string" ? parent : FS.getPath(parent);
                var parts = path.split("/").reverse();
                while(parts.length){
                    var part = parts.pop();
                    if (!part) continue;
                    var current = PATH.join2(parent, part);
                    try {
                        FS.mkdir(current);
                    } catch (e) {
                    }
                    parent = current;
                }
                return current;
            },
            createFile: function(parent, name, properties, canRead, canWrite) {
                var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
                var mode = FS.getMode(canRead, canWrite);
                return FS.create(path, mode);
            },
            createDataFile: function(parent, name, data, canRead, canWrite, canOwn) {
                var path = name ? PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name) : parent;
                var mode = FS.getMode(canRead, canWrite);
                var node = FS.create(path, mode);
                if (data) {
                    if (typeof data === "string") {
                        var arr = new Array(data.length);
                        for(var i = 0, len = data.length; i < len; ++i)arr[i] = data.charCodeAt(i);
                        data = arr;
                    }
                    FS.chmod(node, mode | 146);
                    var stream = FS.open(node, 577);
                    FS.write(stream, data, 0, data.length, 0, canOwn);
                    FS.close(stream);
                    FS.chmod(node, mode);
                }
                return node;
            },
            createDevice: function(parent, name, input, output) {
                var path = PATH.join2(typeof parent === "string" ? parent : FS.getPath(parent), name);
                var mode = FS.getMode(!!input, !!output);
                if (!FS.createDevice.major) FS.createDevice.major = 64;
                var dev = FS.makedev(FS.createDevice.major++, 0);
                FS.registerDevice(dev, {
                    open: function(stream) {
                        stream.seekable = false;
                    },
                    close: function(stream) {
                        if (output && output.buffer && output.buffer.length) output(10);
                    },
                    read: function(stream, buffer1, offset, length, pos) {
                        var bytesRead = 0;
                        for(var i = 0; i < length; i++){
                            var result;
                            try {
                                result = input();
                            } catch (e) {
                                throw new FS.ErrnoError(29);
                            }
                            if (result === undefined && bytesRead === 0) throw new FS.ErrnoError(6);
                            if (result === null || result === undefined) break;
                            bytesRead++;
                            buffer1[offset + i] = result;
                        }
                        if (bytesRead) stream.node.timestamp = Date.now();
                        return bytesRead;
                    },
                    write: function(stream, buffer1, offset, length, pos) {
                        for(var i = 0; i < length; i++)try {
                            output(buffer1[offset + i]);
                        } catch (e) {
                            throw new FS.ErrnoError(29);
                        }
                        if (length) stream.node.timestamp = Date.now();
                        return i;
                    }
                });
                return FS.mkdev(path, mode, dev);
            },
            forceLoadFile: function(obj) {
                if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
                if (typeof XMLHttpRequest !== "undefined") throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
                else if (read_) try {
                    obj.contents = intArrayFromString(read_(obj.url), true);
                    obj.usedBytes = obj.contents.length;
                } catch (e) {
                    throw new FS.ErrnoError(29);
                }
                else throw new Error("Cannot load without read() or XMLHttpRequest.");
            },
            createLazyFile: function(parent, name, url, canRead, canWrite) {
                function LazyUint8Array() {
                    this.lengthKnown = false;
                    this.chunks = [];
                }
                LazyUint8Array.prototype.get = function LazyUint8Array_get(idx) {
                    if (idx > this.length - 1 || idx < 0) return undefined;
                    var chunkOffset = idx % this.chunkSize;
                    var chunkNum = idx / this.chunkSize | 0;
                    return this.getter(chunkNum)[chunkOffset];
                };
                LazyUint8Array.prototype.setDataGetter = function LazyUint8Array_setDataGetter(getter) {
                    this.getter = getter;
                };
                LazyUint8Array.prototype.cacheLength = function LazyUint8Array_cacheLength() {
                    var xhr = new XMLHttpRequest();
                    xhr.open("HEAD", url, false);
                    xhr.send(null);
                    if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
                    var datalength = Number(xhr.getResponseHeader("Content-length"));
                    var header;
                    var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
                    var usesGzip = (header = xhr.getResponseHeader("Content-Encoding")) && header === "gzip";
                    var chunkSize = 1048576;
                    if (!hasByteServing) chunkSize = datalength;
                    var doXHR = function(from, to) {
                        if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
                        if (to > datalength - 1) throw new Error("only " + datalength + " bytes available! programmer error!");
                        var xhr1 = new XMLHttpRequest();
                        xhr1.open("GET", url, false);
                        if (datalength !== chunkSize) xhr1.setRequestHeader("Range", "bytes=" + from + "-" + to);
                        if (typeof Uint8Array != "undefined") xhr1.responseType = "arraybuffer";
                        if (xhr1.overrideMimeType) xhr1.overrideMimeType("text/plain; charset=x-user-defined");
                        xhr1.send(null);
                        if (!(xhr1.status >= 200 && xhr1.status < 300 || xhr1.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr1.status);
                        if (xhr1.response !== undefined) return new Uint8Array(xhr1.response || []);
                        else return intArrayFromString(xhr1.responseText || "", true);
                    };
                    var lazyArray = this;
                    lazyArray.setDataGetter(function(chunkNum) {
                        var start = chunkNum * chunkSize;
                        var end = (chunkNum + 1) * chunkSize - 1;
                        end = Math.min(end, datalength - 1);
                        if (typeof lazyArray.chunks[chunkNum] === "undefined") lazyArray.chunks[chunkNum] = doXHR(start, end);
                        if (typeof lazyArray.chunks[chunkNum] === "undefined") throw new Error("doXHR failed!");
                        return lazyArray.chunks[chunkNum];
                    });
                    if (usesGzip || !datalength) {
                        chunkSize = datalength = 1;
                        datalength = this.getter(0).length;
                        chunkSize = datalength;
                        out("LazyFiles on gzip forces download of the whole file when length is accessed");
                    }
                    this._length = datalength;
                    this._chunkSize = chunkSize;
                    this.lengthKnown = true;
                };
                if (typeof XMLHttpRequest !== "undefined") {
                    if (!ENVIRONMENT_IS_WORKER) throw "Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc";
                    var lazyArray = new LazyUint8Array();
                    Object.defineProperties(lazyArray, {
                        length: {
                            get: function() {
                                if (!this.lengthKnown) this.cacheLength();
                                return this._length;
                            }
                        },
                        chunkSize: {
                            get: function() {
                                if (!this.lengthKnown) this.cacheLength();
                                return this._chunkSize;
                            }
                        }
                    });
                    var properties = {
                        isDevice: false,
                        contents: lazyArray
                    };
                } else var properties = {
                    isDevice: false,
                    url: url
                };
                var node = FS.createFile(parent, name, properties, canRead, canWrite);
                if (properties.contents) node.contents = properties.contents;
                else if (properties.url) {
                    node.contents = null;
                    node.url = properties.url;
                }
                Object.defineProperties(node, {
                    usedBytes: {
                        get: function() {
                            return this.contents.length;
                        }
                    }
                });
                var stream_ops = {
                };
                var keys = Object.keys(node.stream_ops);
                keys.forEach(function(key1) {
                    var fn = node.stream_ops[key1];
                    stream_ops[key1] = function forceLoadLazyFile() {
                        FS.forceLoadFile(node);
                        return fn.apply(null, arguments);
                    };
                });
                stream_ops.read = function stream_ops_read(stream, buffer1, offset, length, position) {
                    FS.forceLoadFile(node);
                    var contents = stream.node.contents;
                    if (position >= contents.length) return 0;
                    var size = Math.min(contents.length - position, length);
                    assert(size >= 0);
                    if (contents.slice) for(var i = 0; i < size; i++)buffer1[offset + i] = contents[position + i];
                    else for(var i = 0; i < size; i++)buffer1[offset + i] = contents.get(position + i);
                    return size;
                };
                node.stream_ops = stream_ops;
                return node;
            },
            createPreloadedFile: function(parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile, canOwn, preFinish) {
                Browser.init();
                var fullname = name ? PATH_FS.resolve(PATH.join2(parent, name)) : parent;
                var dep = getUniqueRunDependency("cp " + fullname);
                function processData(byteArray) {
                    function finish(byteArray1) {
                        if (preFinish) preFinish();
                        if (!dontCreateFile) FS.createDataFile(parent, name, byteArray1, canRead, canWrite, canOwn);
                        if (onload) onload();
                        removeRunDependency(dep);
                    }
                    var handled = false;
                    Module1["preloadPlugins"].forEach(function(plugin) {
                        if (handled) return;
                        if (plugin["canHandle"](fullname)) {
                            plugin["handle"](byteArray, fullname, finish, function() {
                                if (onerror) onerror();
                                removeRunDependency(dep);
                            });
                            handled = true;
                        }
                    });
                    if (!handled) finish(byteArray);
                }
                addRunDependency(dep);
                if (typeof url == "string") asyncLoad(url, function(byteArray) {
                    processData(byteArray);
                }, onerror);
                else processData(url);
            },
            indexedDB: function() {
                return window.indexedDB || window.mozIndexedDB || window.webkitIndexedDB || window.msIndexedDB;
            },
            DB_NAME: function() {
                return "EM_FS_" + window.location.pathname;
            },
            DB_VERSION: 20,
            DB_STORE_NAME: "FILE_DATA",
            saveFilesToDB: function(paths, onload, onerror) {
                onload = onload || function() {
                };
                onerror = onerror || function() {
                };
                var indexedDB = FS.indexedDB();
                try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                } catch (e) {
                    return onerror(e);
                }
                openRequest.onupgradeneeded = function openRequest_onupgradeneeded() {
                    out("creating db");
                    var db = openRequest.result;
                    db.createObjectStore(FS.DB_STORE_NAME);
                };
                openRequest.onsuccess = function openRequest_onsuccess() {
                    var db = openRequest.result;
                    var transaction = db.transaction([
                        FS.DB_STORE_NAME
                    ], "readwrite");
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                        if (fail == 0) onload();
                        else onerror();
                    }
                    paths.forEach(function(path) {
                        var putRequest = files.put(FS.analyzePath(path).object.contents, path);
                        putRequest.onsuccess = function putRequest_onsuccess() {
                            ok++;
                            if (ok + fail == total) finish();
                        };
                        putRequest.onerror = function putRequest_onerror() {
                            fail++;
                            if (ok + fail == total) finish();
                        };
                    });
                    transaction.onerror = onerror;
                };
                openRequest.onerror = onerror;
            },
            loadFilesFromDB: function(paths, onload, onerror) {
                onload = onload || function() {
                };
                onerror = onerror || function() {
                };
                var indexedDB = FS.indexedDB();
                try {
                    var openRequest = indexedDB.open(FS.DB_NAME(), FS.DB_VERSION);
                } catch (e) {
                    return onerror(e);
                }
                openRequest.onupgradeneeded = onerror;
                openRequest.onsuccess = function openRequest_onsuccess() {
                    var db = openRequest.result;
                    try {
                        var transaction = db.transaction([
                            FS.DB_STORE_NAME
                        ], "readonly");
                    } catch (e) {
                        onerror(e);
                        return;
                    }
                    var files = transaction.objectStore(FS.DB_STORE_NAME);
                    var ok = 0, fail = 0, total = paths.length;
                    function finish() {
                        if (fail == 0) onload();
                        else onerror();
                    }
                    paths.forEach(function(path) {
                        var getRequest = files.get(path);
                        getRequest.onsuccess = function getRequest_onsuccess() {
                            if (FS.analyzePath(path).exists) FS.unlink(path);
                            FS.createDataFile(PATH.dirname(path), PATH.basename(path), getRequest.result, true, true, true);
                            ok++;
                            if (ok + fail == total) finish();
                        };
                        getRequest.onerror = function getRequest_onerror() {
                            fail++;
                            if (ok + fail == total) finish();
                        };
                    });
                    transaction.onerror = onerror;
                };
                openRequest.onerror = onerror;
            },
            absolutePath: function() {
                abort("FS.absolutePath has been removed; use PATH_FS.resolve instead");
            },
            createFolder: function() {
                abort("FS.createFolder has been removed; use FS.mkdir instead");
            },
            createLink: function() {
                abort("FS.createLink has been removed; use FS.symlink instead");
            },
            joinPath: function() {
                abort("FS.joinPath has been removed; use PATH.join instead");
            },
            mmapAlloc: function() {
                abort("FS.mmapAlloc has been replaced by the top level function mmapAlloc");
            },
            standardizePath: function() {
                abort("FS.standardizePath has been removed; use PATH.normalize instead");
            }
        };
        function runAndAbortIfError(func) {
            try {
                return func();
            } catch (e) {
                abort(e);
            }
        }
        function callUserCallback(func, synchronous) {
            if (ABORT) {
                err("user callback triggered after application aborted.  Ignoring.");
                return;
            }
            if (synchronous) {
                func();
                return;
            }
            try {
                func();
            } catch (e) {
                if (e instanceof ExitStatus) return;
                else if (e !== "unwind") {
                    if (e && typeof e === "object" && e.stack) err("exception thrown: " + [
                        e,
                        e.stack
                    ]);
                    throw e;
                }
            }
        }
        function runtimeKeepalivePush() {
            runtimeKeepaliveCounter += 1;
        }
        function runtimeKeepalivePop() {
            assert(runtimeKeepaliveCounter > 0);
            runtimeKeepaliveCounter -= 1;
        }
        var Asyncify = {
            State: {
                Normal: 0,
                Unwinding: 1,
                Rewinding: 2,
                Disabled: 3
            },
            state: 0,
            StackSize: 4096,
            currData: null,
            handleSleepReturnValue: 0,
            exportCallStack: [],
            callStackNameToId: {
            },
            callStackIdToName: {
            },
            callStackId: 0,
            afterUnwind: null,
            asyncFinalizers: [],
            sleepCallbacks: [],
            getCallStackId: function(funcName) {
                var id = Asyncify.callStackNameToId[funcName];
                if (id === undefined) {
                    id = Asyncify.callStackId++;
                    Asyncify.callStackNameToId[funcName] = id;
                    Asyncify.callStackIdToName[id] = funcName;
                }
                return id;
            },
            instrumentWasmImports: function(imports) {
                var ASYNCIFY_IMPORTS = [
                    "env.invoke_*",
                    "env.emscripten_sleep",
                    "env.emscripten_wget",
                    "env.emscripten_wget_data",
                    "env.emscripten_idb_load",
                    "env.emscripten_idb_store",
                    "env.emscripten_idb_delete",
                    "env.emscripten_idb_exists",
                    "env.emscripten_idb_load_blob",
                    "env.emscripten_idb_store_blob",
                    "env.SDL_Delay",
                    "env.emscripten_scan_registers",
                    "env.emscripten_lazy_load_code",
                    "env.emscripten_fiber_swap",
                    "wasi_snapshot_preview1.fd_sync",
                    "env.__wasi_fd_sync",
                    "env._emval_await",
                    "env.dlopen"
                ].map(function(x) {
                    return x.split(".")[1];
                });
                for(var x in imports)(function(x1) {
                    var original = imports[x1];
                    if (typeof original === "function") imports[x1] = function() {
                        var originalAsyncifyState = Asyncify.state;
                        try {
                            return original.apply(null, arguments);
                        } finally{
                            if (Asyncify.state !== originalAsyncifyState && ASYNCIFY_IMPORTS.indexOf(x1) < 0 && !(x1.startsWith("invoke_") && true)) throw "import " + x1 + " was not in ASYNCIFY_IMPORTS, but changed the state";
                        }
                    };
                })(x);
            },
            instrumentWasmExports: function(exports) {
                var ret = {
                };
                for(var x in exports)(function(x1) {
                    var original = exports[x1];
                    if (typeof original === "function") ret[x1] = function() {
                        Asyncify.exportCallStack.push(x1);
                        try {
                            return original.apply(null, arguments);
                        } finally{
                            if (!ABORT) {
                                var y = Asyncify.exportCallStack.pop();
                                assert(y === x1);
                                Asyncify.maybeStopUnwind();
                            }
                        }
                    };
                    else ret[x1] = original;
                })(x);
                return ret;
            },
            maybeStopUnwind: function() {
                if (Asyncify.currData && Asyncify.state === Asyncify.State.Unwinding && Asyncify.exportCallStack.length === 0) {
                    Asyncify.state = Asyncify.State.Normal;
                    runAndAbortIfError(Module1["_asyncify_stop_unwind"]);
                    if (typeof Fibers !== "undefined") Fibers.trampoline();
                    if (Asyncify.afterUnwind) {
                        Asyncify.afterUnwind();
                        Asyncify.afterUnwind = null;
                    }
                }
            },
            whenDone: function() {
                assert(Asyncify.currData, "Tried to wait for an async operation when none is in progress.");
                assert(!Asyncify.asyncFinalizers.length, "Cannot have multiple async operations in flight at once");
                return new Promise(function(resolve) {
                    Asyncify.asyncFinalizers.push(resolve);
                });
            },
            allocateData: function() {
                var ptr = _malloc(12 + Asyncify.StackSize);
                Asyncify.setDataHeader(ptr, ptr + 12, Asyncify.StackSize);
                Asyncify.setDataRewindFunc(ptr);
                return ptr;
            },
            setDataHeader: function(ptr, stack, stackSize) {
                HEAP32[ptr >>> 2] = stack;
                HEAP32[ptr + 4 >>> 2] = stack + stackSize;
            },
            setDataRewindFunc: function(ptr) {
                var bottomOfCallStack = Asyncify.exportCallStack[0];
                var rewindId = Asyncify.getCallStackId(bottomOfCallStack);
                HEAP32[ptr + 8 >>> 2] = rewindId;
            },
            getDataRewindFunc: function(ptr) {
                var id = HEAP32[ptr + 8 >>> 2];
                var name = Asyncify.callStackIdToName[id];
                var func = Module1["asm"][name];
                return func;
            },
            doRewind: function(ptr) {
                var start = Asyncify.getDataRewindFunc(ptr);
                return start();
            },
            handleSleep: function(startAsync) {
                assert(Asyncify.state !== Asyncify.State.Disabled, "Asyncify cannot be done during or after the runtime exits");
                if (ABORT) return;
                if (Asyncify.state === Asyncify.State.Normal) {
                    var reachedCallback = false;
                    var reachedAfterCallback = false;
                    startAsync(function(handleSleepReturnValue) {
                        assert(!handleSleepReturnValue || typeof handleSleepReturnValue === "number" || typeof handleSleepReturnValue === "boolean");
                        if (ABORT) return;
                        Asyncify.handleSleepReturnValue = handleSleepReturnValue || 0;
                        reachedCallback = true;
                        if (!reachedAfterCallback) return;
                        assert(!Asyncify.exportCallStack.length, "Waking up (starting to rewind) must be done from JS, without compiled code on the stack.");
                        Asyncify.state = Asyncify.State.Rewinding;
                        runAndAbortIfError(function() {
                            Module1["_asyncify_start_rewind"](Asyncify.currData);
                        });
                        if (typeof Browser !== "undefined" && Browser.mainLoop.func) Browser.mainLoop.resume();
                        var asyncWasmReturnValue = Asyncify.doRewind(Asyncify.currData);
                        if (!Asyncify.currData) {
                            var asyncFinalizers = Asyncify.asyncFinalizers;
                            Asyncify.asyncFinalizers = [];
                            asyncFinalizers.forEach(function(func) {
                                func(asyncWasmReturnValue);
                            });
                        }
                    });
                    reachedAfterCallback = true;
                    if (!reachedCallback) {
                        Asyncify.state = Asyncify.State.Unwinding;
                        Asyncify.currData = Asyncify.allocateData();
                        runAndAbortIfError(function() {
                            Module1["_asyncify_start_unwind"](Asyncify.currData);
                        });
                        if (typeof Browser !== "undefined" && Browser.mainLoop.func) Browser.mainLoop.pause();
                    }
                } else if (Asyncify.state === Asyncify.State.Rewinding) {
                    Asyncify.state = Asyncify.State.Normal;
                    runAndAbortIfError(Module1["_asyncify_stop_rewind"]);
                    _free(Asyncify.currData);
                    Asyncify.currData = null;
                    Asyncify.sleepCallbacks.forEach(function(func) {
                        callUserCallback(func);
                    });
                } else abort("invalid state: " + Asyncify.state);
                return Asyncify.handleSleepReturnValue;
            },
            handleAsync: function(startAsync) {
                return Asyncify.handleSleep(function(wakeUp) {
                    startAsync().then(wakeUp);
                });
            }
        };
        embind_init_charCodes();
        BindingError = Module1["BindingError"] = extendError(Error, "BindingError");
        InternalError = Module1["InternalError"] = extendError(Error, "InternalError");
        init_emval();
        var FSNode = function(parent, name, mode, rdev) {
            if (!parent) parent = this;
            this.parent = parent;
            this.mount = parent.mount;
            this.mounted = null;
            this.id = FS.nextInode++;
            this.name = name;
            this.mode = mode;
            this.node_ops = {
            };
            this.stream_ops = {
            };
            this.rdev = rdev;
        };
        var readMode = 365;
        var writeMode = 146;
        Object.defineProperties(FSNode.prototype, {
            read: {
                get: function() {
                    return (this.mode & readMode) === readMode;
                },
                set: function(val) {
                    val ? this.mode |= readMode : this.mode &= ~readMode;
                }
            },
            write: {
                get: function() {
                    return (this.mode & writeMode) === writeMode;
                },
                set: function(val) {
                    val ? this.mode |= writeMode : this.mode &= ~writeMode;
                }
            },
            isFolder: {
                get: function() {
                    return FS.isDir(this.mode);
                }
            },
            isDevice: {
                get: function() {
                    return FS.isChrdev(this.mode);
                }
            }
        });
        FS.FSNode = FSNode;
        FS.staticInit();
        Module1["FS_createPath"] = FS.createPath;
        Module1["FS_createDataFile"] = FS.createDataFile;
        Module1["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module1["FS_createLazyFile"] = FS.createLazyFile;
        Module1["FS_createDevice"] = FS.createDevice;
        Module1["FS_unlink"] = FS.unlink;
        var ASSERTIONS = true;
        function intArrayFromString(stringy, dontAddNull, length) {
            var len = length > 0 ? length : lengthBytesUTF8(stringy) + 1;
            var u8array = new Array(len);
            var numBytesWritten = stringToUTF8Array(stringy, u8array, 0, u8array.length);
            if (dontAddNull) u8array.length = numBytesWritten;
            return u8array;
        }
        function intArrayToString(array) {
            var ret = [];
            for(var i = 0; i < array.length; i++){
                var chr = array[i];
                if (chr > 255) {
                    if (ASSERTIONS) assert(false, "Character code " + chr + " (" + String.fromCharCode(chr) + ")  at offset " + i + " not in 0x00-0xFF.");
                    chr &= 255;
                }
                ret.push(String.fromCharCode(chr));
            }
            return ret.join("");
        }
        var decodeBase64 = typeof atob === "function" ? atob : function(input) {
            var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");
            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));
                chr1 = enc1 << 2 | enc2 >> 4;
                chr2 = (enc2 & 15) << 4 | enc3 >> 2;
                chr3 = (enc3 & 3) << 6 | enc4;
                output = output + String.fromCharCode(chr1);
                if (enc3 !== 64) output = output + String.fromCharCode(chr2);
                if (enc4 !== 64) output = output + String.fromCharCode(chr3);
            }while (i < input.length)
            return output;
        };
        function intArrayFromBase64(s) {
            if (typeof ENVIRONMENT_IS_NODE === "boolean" && ENVIRONMENT_IS_NODE) {
                var buf = Buffer.from(s, "base64");
                return new Uint8Array(buf["buffer"], buf["byteOffset"], buf["byteLength"]);
            }
            try {
                var decoded = decodeBase64(s);
                var bytes = new Uint8Array(decoded.length);
                for(var i = 0; i < decoded.length; ++i)bytes[i] = decoded.charCodeAt(i);
                return bytes;
            } catch (_) {
                throw new Error("Converting base64 string to bytes failed.");
            }
        }
        function tryParseAsDataURI(filename) {
            if (!isDataURI(filename)) return;
            return intArrayFromBase64(filename.slice(dataURIPrefix.length));
        }
        var asmLibraryArg = {
            "_embind_register_bigint": __embind_register_bigint,
            "_embind_register_bool": __embind_register_bool,
            "_embind_register_emval": __embind_register_emval,
            "_embind_register_float": __embind_register_float,
            "_embind_register_integer": __embind_register_integer,
            "_embind_register_memory_view": __embind_register_memory_view,
            "_embind_register_std_string": __embind_register_std_string,
            "_embind_register_std_wstring": __embind_register_std_wstring,
            "_embind_register_void": __embind_register_void,
            "emscripten_memcpy_big": _emscripten_memcpy_big,
            "emscripten_resize_heap": _emscripten_resize_heap
        };
        Asyncify.instrumentWasmImports(asmLibraryArg);
        var asm = createWasm();
        var ___wasm_call_ctors = Module1["___wasm_call_ctors"] = createExportWrapper("__wasm_call_ctors");
        var _main = Module1["_main"] = createExportWrapper("main");
        var ___getTypeName = Module1["___getTypeName"] = createExportWrapper("__getTypeName");
        var ___embind_register_native_and_builtin_types = Module1["___embind_register_native_and_builtin_types"] = createExportWrapper("__embind_register_native_and_builtin_types");
        var _fflush = Module1["_fflush"] = createExportWrapper("fflush");
        var _malloc = Module1["_malloc"] = createExportWrapper("malloc");
        var ___errno_location = Module1["___errno_location"] = createExportWrapper("__errno_location");
        var stackSave = Module1["stackSave"] = createExportWrapper("stackSave");
        var stackRestore = Module1["stackRestore"] = createExportWrapper("stackRestore");
        var stackAlloc = Module1["stackAlloc"] = createExportWrapper("stackAlloc");
        var _emscripten_stack_init = Module1["_emscripten_stack_init"] = function() {
            return (_emscripten_stack_init = Module1["_emscripten_stack_init"] = Module1["asm"]["emscripten_stack_init"]).apply(null, arguments);
        };
        var _emscripten_stack_set_limits = Module1["_emscripten_stack_set_limits"] = function() {
            return (_emscripten_stack_set_limits = Module1["_emscripten_stack_set_limits"] = Module1["asm"]["emscripten_stack_set_limits"]).apply(null, arguments);
        };
        var _emscripten_stack_get_free = Module1["_emscripten_stack_get_free"] = function() {
            return (_emscripten_stack_get_free = Module1["_emscripten_stack_get_free"] = Module1["asm"]["emscripten_stack_get_free"]).apply(null, arguments);
        };
        var _emscripten_stack_get_base = Module1["_emscripten_stack_get_base"] = function() {
            return (_emscripten_stack_get_base = Module1["_emscripten_stack_get_base"] = Module1["asm"]["emscripten_stack_get_base"]).apply(null, arguments);
        };
        var _emscripten_stack_get_end = Module1["_emscripten_stack_get_end"] = function() {
            return (_emscripten_stack_get_end = Module1["_emscripten_stack_get_end"] = Module1["asm"]["emscripten_stack_get_end"]).apply(null, arguments);
        };
        var _free = Module1["_free"] = createExportWrapper("free");
        var dynCall_ii = Module1["dynCall_ii"] = createExportWrapper("dynCall_ii");
        var dynCall_vi = Module1["dynCall_vi"] = createExportWrapper("dynCall_vi");
        var dynCall_iiii = Module1["dynCall_iiii"] = createExportWrapper("dynCall_iiii");
        var dynCall_viiiiii = Module1["dynCall_viiiiii"] = createExportWrapper("dynCall_viiiiii");
        var dynCall_viiiii = Module1["dynCall_viiiii"] = createExportWrapper("dynCall_viiiii");
        var dynCall_viiii = Module1["dynCall_viiii"] = createExportWrapper("dynCall_viiii");
        var _asyncify_start_unwind = Module1["_asyncify_start_unwind"] = createExportWrapper("asyncify_start_unwind");
        var _asyncify_stop_unwind = Module1["_asyncify_stop_unwind"] = createExportWrapper("asyncify_stop_unwind");
        var _asyncify_start_rewind = Module1["_asyncify_start_rewind"] = createExportWrapper("asyncify_start_rewind");
        var _asyncify_stop_rewind = Module1["_asyncify_stop_rewind"] = createExportWrapper("asyncify_stop_rewind");
        if (!Object.getOwnPropertyDescriptor(Module1, "intArrayFromString")) Module1["intArrayFromString"] = function() {
            abort("'intArrayFromString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "intArrayToString")) Module1["intArrayToString"] = function() {
            abort("'intArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ccall")) Module1["ccall"] = function() {
            abort("'ccall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "cwrap")) Module1["cwrap"] = function() {
            abort("'cwrap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setValue")) Module1["setValue"] = function() {
            abort("'setValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getValue")) Module1["getValue"] = function() {
            abort("'getValue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "allocate")) Module1["allocate"] = function() {
            abort("'allocate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UTF8ArrayToString")) Module1["UTF8ArrayToString"] = function() {
            abort("'UTF8ArrayToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UTF8ToString")) Module1["UTF8ToString"] = function() {
            abort("'UTF8ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToUTF8Array")) Module1["stringToUTF8Array"] = function() {
            abort("'stringToUTF8Array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToUTF8")) Module1["stringToUTF8"] = function() {
            abort("'stringToUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "lengthBytesUTF8")) Module1["lengthBytesUTF8"] = function() {
            abort("'lengthBytesUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stackTrace")) Module1["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addOnPreRun")) Module1["addOnPreRun"] = function() {
            abort("'addOnPreRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addOnInit")) Module1["addOnInit"] = function() {
            abort("'addOnInit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addOnPreMain")) Module1["addOnPreMain"] = function() {
            abort("'addOnPreMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addOnExit")) Module1["addOnExit"] = function() {
            abort("'addOnExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addOnPostRun")) Module1["addOnPostRun"] = function() {
            abort("'addOnPostRun' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeStringToMemory")) Module1["writeStringToMemory"] = function() {
            abort("'writeStringToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeArrayToMemory")) Module1["writeArrayToMemory"] = function() {
            abort("'writeArrayToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeAsciiToMemory")) Module1["writeAsciiToMemory"] = function() {
            abort("'writeAsciiToMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        Module1["addRunDependency"] = addRunDependency;
        Module1["removeRunDependency"] = removeRunDependency;
        if (!Object.getOwnPropertyDescriptor(Module1, "FS_createFolder")) Module1["FS_createFolder"] = function() {
            abort("'FS_createFolder' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        Module1["FS_createPath"] = FS.createPath;
        Module1["FS_createDataFile"] = FS.createDataFile;
        Module1["FS_createPreloadedFile"] = FS.createPreloadedFile;
        Module1["FS_createLazyFile"] = FS.createLazyFile;
        if (!Object.getOwnPropertyDescriptor(Module1, "FS_createLink")) Module1["FS_createLink"] = function() {
            abort("'FS_createLink' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        Module1["FS_createDevice"] = FS.createDevice;
        Module1["FS_unlink"] = FS.unlink;
        if (!Object.getOwnPropertyDescriptor(Module1, "getLEB")) Module1["getLEB"] = function() {
            abort("'getLEB' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getFunctionTables")) Module1["getFunctionTables"] = function() {
            abort("'getFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "alignFunctionTables")) Module1["alignFunctionTables"] = function() {
            abort("'alignFunctionTables' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerFunctions")) Module1["registerFunctions"] = function() {
            abort("'registerFunctions' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "addFunction")) Module1["addFunction"] = function() {
            abort("'addFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "removeFunction")) Module1["removeFunction"] = function() {
            abort("'removeFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getFuncWrapper")) Module1["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "prettyPrint")) Module1["prettyPrint"] = function() {
            abort("'prettyPrint' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "dynCall")) Module1["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getCompilerSetting")) Module1["getCompilerSetting"] = function() {
            abort("'getCompilerSetting' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "print")) Module1["print"] = function() {
            abort("'print' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "printErr")) Module1["printErr"] = function() {
            abort("'printErr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getTempRet0")) Module1["getTempRet0"] = function() {
            abort("'getTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setTempRet0")) Module1["setTempRet0"] = function() {
            abort("'setTempRet0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "callMain")) Module1["callMain"] = function() {
            abort("'callMain' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "abort")) Module1["abort"] = function() {
            abort("'abort' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "keepRuntimeAlive")) Module1["keepRuntimeAlive"] = function() {
            abort("'keepRuntimeAlive' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "zeroMemory")) Module1["zeroMemory"] = function() {
            abort("'zeroMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToNewUTF8")) Module1["stringToNewUTF8"] = function() {
            abort("'stringToNewUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setFileTime")) Module1["setFileTime"] = function() {
            abort("'setFileTime' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emscripten_realloc_buffer")) Module1["emscripten_realloc_buffer"] = function() {
            abort("'emscripten_realloc_buffer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ENV")) Module1["ENV"] = function() {
            abort("'ENV' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ERRNO_CODES")) Module1["ERRNO_CODES"] = function() {
            abort("'ERRNO_CODES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ERRNO_MESSAGES")) Module1["ERRNO_MESSAGES"] = function() {
            abort("'ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setErrNo")) Module1["setErrNo"] = function() {
            abort("'setErrNo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "inetPton4")) Module1["inetPton4"] = function() {
            abort("'inetPton4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "inetNtop4")) Module1["inetNtop4"] = function() {
            abort("'inetNtop4' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "inetPton6")) Module1["inetPton6"] = function() {
            abort("'inetPton6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "inetNtop6")) Module1["inetNtop6"] = function() {
            abort("'inetNtop6' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readSockaddr")) Module1["readSockaddr"] = function() {
            abort("'readSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeSockaddr")) Module1["writeSockaddr"] = function() {
            abort("'writeSockaddr' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "DNS")) Module1["DNS"] = function() {
            abort("'DNS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getHostByName")) Module1["getHostByName"] = function() {
            abort("'getHostByName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GAI_ERRNO_MESSAGES")) Module1["GAI_ERRNO_MESSAGES"] = function() {
            abort("'GAI_ERRNO_MESSAGES' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "Protocols")) Module1["Protocols"] = function() {
            abort("'Protocols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "Sockets")) Module1["Sockets"] = function() {
            abort("'Sockets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getRandomDevice")) Module1["getRandomDevice"] = function() {
            abort("'getRandomDevice' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "traverseStack")) Module1["traverseStack"] = function() {
            abort("'traverseStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UNWIND_CACHE")) Module1["UNWIND_CACHE"] = function() {
            abort("'UNWIND_CACHE' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "withBuiltinMalloc")) Module1["withBuiltinMalloc"] = function() {
            abort("'withBuiltinMalloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readAsmConstArgsArray")) Module1["readAsmConstArgsArray"] = function() {
            abort("'readAsmConstArgsArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readAsmConstArgs")) Module1["readAsmConstArgs"] = function() {
            abort("'readAsmConstArgs' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "mainThreadEM_ASM")) Module1["mainThreadEM_ASM"] = function() {
            abort("'mainThreadEM_ASM' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "jstoi_q")) Module1["jstoi_q"] = function() {
            abort("'jstoi_q' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "jstoi_s")) Module1["jstoi_s"] = function() {
            abort("'jstoi_s' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getExecutableName")) Module1["getExecutableName"] = function() {
            abort("'getExecutableName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "listenOnce")) Module1["listenOnce"] = function() {
            abort("'listenOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "autoResumeAudioContext")) Module1["autoResumeAudioContext"] = function() {
            abort("'autoResumeAudioContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "dynCallLegacy")) Module1["dynCallLegacy"] = function() {
            abort("'dynCallLegacy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getDynCaller")) Module1["getDynCaller"] = function() {
            abort("'getDynCaller' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "dynCall")) Module1["dynCall"] = function() {
            abort("'dynCall' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "callRuntimeCallbacks")) Module1["callRuntimeCallbacks"] = function() {
            abort("'callRuntimeCallbacks' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "runtimeKeepalivePush")) Module1["runtimeKeepalivePush"] = function() {
            abort("'runtimeKeepalivePush' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "runtimeKeepalivePop")) Module1["runtimeKeepalivePop"] = function() {
            abort("'runtimeKeepalivePop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "callUserCallback")) Module1["callUserCallback"] = function() {
            abort("'callUserCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "maybeExit")) Module1["maybeExit"] = function() {
            abort("'maybeExit' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "safeSetTimeout")) Module1["safeSetTimeout"] = function() {
            abort("'safeSetTimeout' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "asmjsMangle")) Module1["asmjsMangle"] = function() {
            abort("'asmjsMangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "asyncLoad")) Module1["asyncLoad"] = function() {
            abort("'asyncLoad' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "alignMemory")) Module1["alignMemory"] = function() {
            abort("'alignMemory' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "mmapAlloc")) Module1["mmapAlloc"] = function() {
            abort("'mmapAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "reallyNegative")) Module1["reallyNegative"] = function() {
            abort("'reallyNegative' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "unSign")) Module1["unSign"] = function() {
            abort("'unSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "reSign")) Module1["reSign"] = function() {
            abort("'reSign' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "formatString")) Module1["formatString"] = function() {
            abort("'formatString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "PATH")) Module1["PATH"] = function() {
            abort("'PATH' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "PATH_FS")) Module1["PATH_FS"] = function() {
            abort("'PATH_FS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SYSCALLS")) Module1["SYSCALLS"] = function() {
            abort("'SYSCALLS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "syscallMmap2")) Module1["syscallMmap2"] = function() {
            abort("'syscallMmap2' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "syscallMunmap")) Module1["syscallMunmap"] = function() {
            abort("'syscallMunmap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getSocketFromFD")) Module1["getSocketFromFD"] = function() {
            abort("'getSocketFromFD' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getSocketAddress")) Module1["getSocketAddress"] = function() {
            abort("'getSocketAddress' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "JSEvents")) Module1["JSEvents"] = function() {
            abort("'JSEvents' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerKeyEventCallback")) Module1["registerKeyEventCallback"] = function() {
            abort("'registerKeyEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "specialHTMLTargets")) Module1["specialHTMLTargets"] = function() {
            abort("'specialHTMLTargets' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "maybeCStringToJsString")) Module1["maybeCStringToJsString"] = function() {
            abort("'maybeCStringToJsString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "findEventTarget")) Module1["findEventTarget"] = function() {
            abort("'findEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "findCanvasEventTarget")) Module1["findCanvasEventTarget"] = function() {
            abort("'findCanvasEventTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getBoundingClientRect")) Module1["getBoundingClientRect"] = function() {
            abort("'getBoundingClientRect' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillMouseEventData")) Module1["fillMouseEventData"] = function() {
            abort("'fillMouseEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerMouseEventCallback")) Module1["registerMouseEventCallback"] = function() {
            abort("'registerMouseEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerWheelEventCallback")) Module1["registerWheelEventCallback"] = function() {
            abort("'registerWheelEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerUiEventCallback")) Module1["registerUiEventCallback"] = function() {
            abort("'registerUiEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerFocusEventCallback")) Module1["registerFocusEventCallback"] = function() {
            abort("'registerFocusEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillDeviceOrientationEventData")) Module1["fillDeviceOrientationEventData"] = function() {
            abort("'fillDeviceOrientationEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerDeviceOrientationEventCallback")) Module1["registerDeviceOrientationEventCallback"] = function() {
            abort("'registerDeviceOrientationEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillDeviceMotionEventData")) Module1["fillDeviceMotionEventData"] = function() {
            abort("'fillDeviceMotionEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerDeviceMotionEventCallback")) Module1["registerDeviceMotionEventCallback"] = function() {
            abort("'registerDeviceMotionEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "screenOrientation")) Module1["screenOrientation"] = function() {
            abort("'screenOrientation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillOrientationChangeEventData")) Module1["fillOrientationChangeEventData"] = function() {
            abort("'fillOrientationChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerOrientationChangeEventCallback")) Module1["registerOrientationChangeEventCallback"] = function() {
            abort("'registerOrientationChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillFullscreenChangeEventData")) Module1["fillFullscreenChangeEventData"] = function() {
            abort("'fillFullscreenChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerFullscreenChangeEventCallback")) Module1["registerFullscreenChangeEventCallback"] = function() {
            abort("'registerFullscreenChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerRestoreOldStyle")) Module1["registerRestoreOldStyle"] = function() {
            abort("'registerRestoreOldStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "hideEverythingExceptGivenElement")) Module1["hideEverythingExceptGivenElement"] = function() {
            abort("'hideEverythingExceptGivenElement' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "restoreHiddenElements")) Module1["restoreHiddenElements"] = function() {
            abort("'restoreHiddenElements' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setLetterbox")) Module1["setLetterbox"] = function() {
            abort("'setLetterbox' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "currentFullscreenStrategy")) Module1["currentFullscreenStrategy"] = function() {
            abort("'currentFullscreenStrategy' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "restoreOldWindowedStyle")) Module1["restoreOldWindowedStyle"] = function() {
            abort("'restoreOldWindowedStyle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "softFullscreenResizeWebGLRenderTarget")) Module1["softFullscreenResizeWebGLRenderTarget"] = function() {
            abort("'softFullscreenResizeWebGLRenderTarget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "doRequestFullscreen")) Module1["doRequestFullscreen"] = function() {
            abort("'doRequestFullscreen' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillPointerlockChangeEventData")) Module1["fillPointerlockChangeEventData"] = function() {
            abort("'fillPointerlockChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerPointerlockChangeEventCallback")) Module1["registerPointerlockChangeEventCallback"] = function() {
            abort("'registerPointerlockChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerPointerlockErrorEventCallback")) Module1["registerPointerlockErrorEventCallback"] = function() {
            abort("'registerPointerlockErrorEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "requestPointerLock")) Module1["requestPointerLock"] = function() {
            abort("'requestPointerLock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillVisibilityChangeEventData")) Module1["fillVisibilityChangeEventData"] = function() {
            abort("'fillVisibilityChangeEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerVisibilityChangeEventCallback")) Module1["registerVisibilityChangeEventCallback"] = function() {
            abort("'registerVisibilityChangeEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerTouchEventCallback")) Module1["registerTouchEventCallback"] = function() {
            abort("'registerTouchEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillGamepadEventData")) Module1["fillGamepadEventData"] = function() {
            abort("'fillGamepadEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerGamepadEventCallback")) Module1["registerGamepadEventCallback"] = function() {
            abort("'registerGamepadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerBeforeUnloadEventCallback")) Module1["registerBeforeUnloadEventCallback"] = function() {
            abort("'registerBeforeUnloadEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "fillBatteryEventData")) Module1["fillBatteryEventData"] = function() {
            abort("'fillBatteryEventData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "battery")) Module1["battery"] = function() {
            abort("'battery' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerBatteryEventCallback")) Module1["registerBatteryEventCallback"] = function() {
            abort("'registerBatteryEventCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setCanvasElementSize")) Module1["setCanvasElementSize"] = function() {
            abort("'setCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getCanvasElementSize")) Module1["getCanvasElementSize"] = function() {
            abort("'getCanvasElementSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "polyfillSetImmediate")) Module1["polyfillSetImmediate"] = function() {
            abort("'polyfillSetImmediate' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "demangle")) Module1["demangle"] = function() {
            abort("'demangle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "demangleAll")) Module1["demangleAll"] = function() {
            abort("'demangleAll' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "jsStackTrace")) Module1["jsStackTrace"] = function() {
            abort("'jsStackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stackTrace")) Module1["stackTrace"] = function() {
            abort("'stackTrace' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getEnvStrings")) Module1["getEnvStrings"] = function() {
            abort("'getEnvStrings' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "checkWasiClock")) Module1["checkWasiClock"] = function() {
            abort("'checkWasiClock' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeI53ToI64")) Module1["writeI53ToI64"] = function() {
            abort("'writeI53ToI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeI53ToI64Clamped")) Module1["writeI53ToI64Clamped"] = function() {
            abort("'writeI53ToI64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeI53ToI64Signaling")) Module1["writeI53ToI64Signaling"] = function() {
            abort("'writeI53ToI64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeI53ToU64Clamped")) Module1["writeI53ToU64Clamped"] = function() {
            abort("'writeI53ToU64Clamped' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeI53ToU64Signaling")) Module1["writeI53ToU64Signaling"] = function() {
            abort("'writeI53ToU64Signaling' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readI53FromI64")) Module1["readI53FromI64"] = function() {
            abort("'readI53FromI64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readI53FromU64")) Module1["readI53FromU64"] = function() {
            abort("'readI53FromU64' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "convertI32PairToI53")) Module1["convertI32PairToI53"] = function() {
            abort("'convertI32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "convertU32PairToI53")) Module1["convertU32PairToI53"] = function() {
            abort("'convertU32PairToI53' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "uncaughtExceptionCount")) Module1["uncaughtExceptionCount"] = function() {
            abort("'uncaughtExceptionCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "exceptionLast")) Module1["exceptionLast"] = function() {
            abort("'exceptionLast' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "exceptionCaught")) Module1["exceptionCaught"] = function() {
            abort("'exceptionCaught' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ExceptionInfo")) Module1["ExceptionInfo"] = function() {
            abort("'ExceptionInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "CatchInfo")) Module1["CatchInfo"] = function() {
            abort("'CatchInfo' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "exception_addRef")) Module1["exception_addRef"] = function() {
            abort("'exception_addRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "exception_decRef")) Module1["exception_decRef"] = function() {
            abort("'exception_decRef' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "Browser")) Module1["Browser"] = function() {
            abort("'Browser' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "funcWrappers")) Module1["funcWrappers"] = function() {
            abort("'funcWrappers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getFuncWrapper")) Module1["getFuncWrapper"] = function() {
            abort("'getFuncWrapper' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setMainLoop")) Module1["setMainLoop"] = function() {
            abort("'setMainLoop' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "wget")) Module1["wget"] = function() {
            abort("'wget' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        Module1["FS"] = FS;
        if (!Object.getOwnPropertyDescriptor(Module1, "MEMFS")) Module1["MEMFS"] = function() {
            abort("'MEMFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "TTY")) Module1["TTY"] = function() {
            abort("'TTY' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "PIPEFS")) Module1["PIPEFS"] = function() {
            abort("'PIPEFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SOCKFS")) Module1["SOCKFS"] = function() {
            abort("'SOCKFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "_setNetworkCallback")) Module1["_setNetworkCallback"] = function() {
            abort("'_setNetworkCallback' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "tempFixedLengthArray")) Module1["tempFixedLengthArray"] = function() {
            abort("'tempFixedLengthArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "miniTempWebGLFloatBuffers")) Module1["miniTempWebGLFloatBuffers"] = function() {
            abort("'miniTempWebGLFloatBuffers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "heapObjectForWebGLType")) Module1["heapObjectForWebGLType"] = function() {
            abort("'heapObjectForWebGLType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "heapAccessShiftForWebGLHeap")) Module1["heapAccessShiftForWebGLHeap"] = function() {
            abort("'heapAccessShiftForWebGLHeap' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GL")) Module1["GL"] = function() {
            abort("'GL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emscriptenWebGLGet")) Module1["emscriptenWebGLGet"] = function() {
            abort("'emscriptenWebGLGet' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "computeUnpackAlignedImageSize")) Module1["computeUnpackAlignedImageSize"] = function() {
            abort("'computeUnpackAlignedImageSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emscriptenWebGLGetTexPixelData")) Module1["emscriptenWebGLGetTexPixelData"] = function() {
            abort("'emscriptenWebGLGetTexPixelData' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emscriptenWebGLGetUniform")) Module1["emscriptenWebGLGetUniform"] = function() {
            abort("'emscriptenWebGLGetUniform' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "webglGetUniformLocation")) Module1["webglGetUniformLocation"] = function() {
            abort("'webglGetUniformLocation' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "webglPrepareUniformLocationsBeforeFirstUse")) Module1["webglPrepareUniformLocationsBeforeFirstUse"] = function() {
            abort("'webglPrepareUniformLocationsBeforeFirstUse' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "webglGetLeftBracePos")) Module1["webglGetLeftBracePos"] = function() {
            abort("'webglGetLeftBracePos' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emscriptenWebGLGetVertexAttrib")) Module1["emscriptenWebGLGetVertexAttrib"] = function() {
            abort("'emscriptenWebGLGetVertexAttrib' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "writeGLArray")) Module1["writeGLArray"] = function() {
            abort("'writeGLArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "AL")) Module1["AL"] = function() {
            abort("'AL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SDL_unicode")) Module1["SDL_unicode"] = function() {
            abort("'SDL_unicode' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SDL_ttfContext")) Module1["SDL_ttfContext"] = function() {
            abort("'SDL_ttfContext' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SDL_audio")) Module1["SDL_audio"] = function() {
            abort("'SDL_audio' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SDL")) Module1["SDL"] = function() {
            abort("'SDL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "SDL_gfx")) Module1["SDL_gfx"] = function() {
            abort("'SDL_gfx' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GLUT")) Module1["GLUT"] = function() {
            abort("'GLUT' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "EGL")) Module1["EGL"] = function() {
            abort("'EGL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GLFW_Window")) Module1["GLFW_Window"] = function() {
            abort("'GLFW_Window' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GLFW")) Module1["GLFW"] = function() {
            abort("'GLFW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "GLEW")) Module1["GLEW"] = function() {
            abort("'GLEW' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "IDBStore")) Module1["IDBStore"] = function() {
            abort("'IDBStore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "runAndAbortIfError")) Module1["runAndAbortIfError"] = function() {
            abort("'runAndAbortIfError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "Asyncify")) Module1["Asyncify"] = function() {
            abort("'Asyncify' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "Fibers")) Module1["Fibers"] = function() {
            abort("'Fibers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_handle_array")) Module1["emval_handle_array"] = function() {
            abort("'emval_handle_array' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_free_list")) Module1["emval_free_list"] = function() {
            abort("'emval_free_list' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_symbols")) Module1["emval_symbols"] = function() {
            abort("'emval_symbols' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "init_emval")) Module1["init_emval"] = function() {
            abort("'init_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "count_emval_handles")) Module1["count_emval_handles"] = function() {
            abort("'count_emval_handles' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "get_first_emval")) Module1["get_first_emval"] = function() {
            abort("'get_first_emval' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getStringOrSymbol")) Module1["getStringOrSymbol"] = function() {
            abort("'getStringOrSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "requireHandle")) Module1["requireHandle"] = function() {
            abort("'requireHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_newers")) Module1["emval_newers"] = function() {
            abort("'emval_newers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "craftEmvalAllocator")) Module1["craftEmvalAllocator"] = function() {
            abort("'craftEmvalAllocator' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_get_global")) Module1["emval_get_global"] = function() {
            abort("'emval_get_global' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "emval_methodCallers")) Module1["emval_methodCallers"] = function() {
            abort("'emval_methodCallers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "InternalError")) Module1["InternalError"] = function() {
            abort("'InternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "BindingError")) Module1["BindingError"] = function() {
            abort("'BindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UnboundTypeError")) Module1["UnboundTypeError"] = function() {
            abort("'UnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "PureVirtualError")) Module1["PureVirtualError"] = function() {
            abort("'PureVirtualError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "init_embind")) Module1["init_embind"] = function() {
            abort("'init_embind' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "throwInternalError")) Module1["throwInternalError"] = function() {
            abort("'throwInternalError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "throwBindingError")) Module1["throwBindingError"] = function() {
            abort("'throwBindingError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "throwUnboundTypeError")) Module1["throwUnboundTypeError"] = function() {
            abort("'throwUnboundTypeError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ensureOverloadTable")) Module1["ensureOverloadTable"] = function() {
            abort("'ensureOverloadTable' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "exposePublicSymbol")) Module1["exposePublicSymbol"] = function() {
            abort("'exposePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "replacePublicSymbol")) Module1["replacePublicSymbol"] = function() {
            abort("'replacePublicSymbol' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "extendError")) Module1["extendError"] = function() {
            abort("'extendError' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "createNamedFunction")) Module1["createNamedFunction"] = function() {
            abort("'createNamedFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registeredInstances")) Module1["registeredInstances"] = function() {
            abort("'registeredInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getBasestPointer")) Module1["getBasestPointer"] = function() {
            abort("'getBasestPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerInheritedInstance")) Module1["registerInheritedInstance"] = function() {
            abort("'registerInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "unregisterInheritedInstance")) Module1["unregisterInheritedInstance"] = function() {
            abort("'unregisterInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getInheritedInstance")) Module1["getInheritedInstance"] = function() {
            abort("'getInheritedInstance' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getInheritedInstanceCount")) Module1["getInheritedInstanceCount"] = function() {
            abort("'getInheritedInstanceCount' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getLiveInheritedInstances")) Module1["getLiveInheritedInstances"] = function() {
            abort("'getLiveInheritedInstances' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registeredTypes")) Module1["registeredTypes"] = function() {
            abort("'registeredTypes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "awaitingDependencies")) Module1["awaitingDependencies"] = function() {
            abort("'awaitingDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "typeDependencies")) Module1["typeDependencies"] = function() {
            abort("'typeDependencies' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registeredPointers")) Module1["registeredPointers"] = function() {
            abort("'registeredPointers' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "registerType")) Module1["registerType"] = function() {
            abort("'registerType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "whenDependentTypesAreResolved")) Module1["whenDependentTypesAreResolved"] = function() {
            abort("'whenDependentTypesAreResolved' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "embind_charCodes")) Module1["embind_charCodes"] = function() {
            abort("'embind_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "embind_init_charCodes")) Module1["embind_init_charCodes"] = function() {
            abort("'embind_init_charCodes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "readLatin1String")) Module1["readLatin1String"] = function() {
            abort("'readLatin1String' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getTypeName")) Module1["getTypeName"] = function() {
            abort("'getTypeName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "heap32VectorToArray")) Module1["heap32VectorToArray"] = function() {
            abort("'heap32VectorToArray' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "requireRegisteredType")) Module1["requireRegisteredType"] = function() {
            abort("'requireRegisteredType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "getShiftFromSize")) Module1["getShiftFromSize"] = function() {
            abort("'getShiftFromSize' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "integerReadValueFromPointer")) Module1["integerReadValueFromPointer"] = function() {
            abort("'integerReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "enumReadValueFromPointer")) Module1["enumReadValueFromPointer"] = function() {
            abort("'enumReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "floatReadValueFromPointer")) Module1["floatReadValueFromPointer"] = function() {
            abort("'floatReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "simpleReadValueFromPointer")) Module1["simpleReadValueFromPointer"] = function() {
            abort("'simpleReadValueFromPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "runDestructors")) Module1["runDestructors"] = function() {
            abort("'runDestructors' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "new_")) Module1["new_"] = function() {
            abort("'new_' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "craftInvokerFunction")) Module1["craftInvokerFunction"] = function() {
            abort("'craftInvokerFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "embind__requireFunction")) Module1["embind__requireFunction"] = function() {
            abort("'embind__requireFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "tupleRegistrations")) Module1["tupleRegistrations"] = function() {
            abort("'tupleRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "structRegistrations")) Module1["structRegistrations"] = function() {
            abort("'structRegistrations' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "genericPointerToWireType")) Module1["genericPointerToWireType"] = function() {
            abort("'genericPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "constNoSmartPtrRawPointerToWireType")) Module1["constNoSmartPtrRawPointerToWireType"] = function() {
            abort("'constNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "nonConstNoSmartPtrRawPointerToWireType")) Module1["nonConstNoSmartPtrRawPointerToWireType"] = function() {
            abort("'nonConstNoSmartPtrRawPointerToWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "init_RegisteredPointer")) Module1["init_RegisteredPointer"] = function() {
            abort("'init_RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredPointer")) Module1["RegisteredPointer"] = function() {
            abort("'RegisteredPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredPointer_getPointee")) Module1["RegisteredPointer_getPointee"] = function() {
            abort("'RegisteredPointer_getPointee' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredPointer_destructor")) Module1["RegisteredPointer_destructor"] = function() {
            abort("'RegisteredPointer_destructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredPointer_deleteObject")) Module1["RegisteredPointer_deleteObject"] = function() {
            abort("'RegisteredPointer_deleteObject' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredPointer_fromWireType")) Module1["RegisteredPointer_fromWireType"] = function() {
            abort("'RegisteredPointer_fromWireType' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "runDestructor")) Module1["runDestructor"] = function() {
            abort("'runDestructor' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "releaseClassHandle")) Module1["releaseClassHandle"] = function() {
            abort("'releaseClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "finalizationGroup")) Module1["finalizationGroup"] = function() {
            abort("'finalizationGroup' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "detachFinalizer_deps")) Module1["detachFinalizer_deps"] = function() {
            abort("'detachFinalizer_deps' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "detachFinalizer")) Module1["detachFinalizer"] = function() {
            abort("'detachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "attachFinalizer")) Module1["attachFinalizer"] = function() {
            abort("'attachFinalizer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "makeClassHandle")) Module1["makeClassHandle"] = function() {
            abort("'makeClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "init_ClassHandle")) Module1["init_ClassHandle"] = function() {
            abort("'init_ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle")) Module1["ClassHandle"] = function() {
            abort("'ClassHandle' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle_isAliasOf")) Module1["ClassHandle_isAliasOf"] = function() {
            abort("'ClassHandle_isAliasOf' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "throwInstanceAlreadyDeleted")) Module1["throwInstanceAlreadyDeleted"] = function() {
            abort("'throwInstanceAlreadyDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle_clone")) Module1["ClassHandle_clone"] = function() {
            abort("'ClassHandle_clone' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle_delete")) Module1["ClassHandle_delete"] = function() {
            abort("'ClassHandle_delete' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "deletionQueue")) Module1["deletionQueue"] = function() {
            abort("'deletionQueue' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle_isDeleted")) Module1["ClassHandle_isDeleted"] = function() {
            abort("'ClassHandle_isDeleted' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "ClassHandle_deleteLater")) Module1["ClassHandle_deleteLater"] = function() {
            abort("'ClassHandle_deleteLater' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "flushPendingDeletes")) Module1["flushPendingDeletes"] = function() {
            abort("'flushPendingDeletes' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "delayFunction")) Module1["delayFunction"] = function() {
            abort("'delayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "setDelayFunction")) Module1["setDelayFunction"] = function() {
            abort("'setDelayFunction' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "RegisteredClass")) Module1["RegisteredClass"] = function() {
            abort("'RegisteredClass' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "shallowCopyInternalPointer")) Module1["shallowCopyInternalPointer"] = function() {
            abort("'shallowCopyInternalPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "downcastPointer")) Module1["downcastPointer"] = function() {
            abort("'downcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "upcastPointer")) Module1["upcastPointer"] = function() {
            abort("'upcastPointer' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "validateThis")) Module1["validateThis"] = function() {
            abort("'validateThis' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "char_0")) Module1["char_0"] = function() {
            abort("'char_0' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "char_9")) Module1["char_9"] = function() {
            abort("'char_9' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "makeLegalFunctionName")) Module1["makeLegalFunctionName"] = function() {
            abort("'makeLegalFunctionName' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "IDBFS")) Module1["IDBFS"] = function() {
            abort("'IDBFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "WORKERFS")) Module1["WORKERFS"] = function() {
            abort("'WORKERFS' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "warnOnce")) Module1["warnOnce"] = function() {
            abort("'warnOnce' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stackSave")) Module1["stackSave"] = function() {
            abort("'stackSave' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stackRestore")) Module1["stackRestore"] = function() {
            abort("'stackRestore' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stackAlloc")) Module1["stackAlloc"] = function() {
            abort("'stackAlloc' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "AsciiToString")) Module1["AsciiToString"] = function() {
            abort("'AsciiToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToAscii")) Module1["stringToAscii"] = function() {
            abort("'stringToAscii' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UTF16ToString")) Module1["UTF16ToString"] = function() {
            abort("'UTF16ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToUTF16")) Module1["stringToUTF16"] = function() {
            abort("'stringToUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "lengthBytesUTF16")) Module1["lengthBytesUTF16"] = function() {
            abort("'lengthBytesUTF16' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "UTF32ToString")) Module1["UTF32ToString"] = function() {
            abort("'UTF32ToString' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "stringToUTF32")) Module1["stringToUTF32"] = function() {
            abort("'stringToUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "lengthBytesUTF32")) Module1["lengthBytesUTF32"] = function() {
            abort("'lengthBytesUTF32' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "allocateUTF8")) Module1["allocateUTF8"] = function() {
            abort("'allocateUTF8' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        if (!Object.getOwnPropertyDescriptor(Module1, "allocateUTF8OnStack")) Module1["allocateUTF8OnStack"] = function() {
            abort("'allocateUTF8OnStack' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
        };
        Module1["writeStackCookie"] = writeStackCookie;
        Module1["checkStackCookie"] = checkStackCookie;
        if (!Object.getOwnPropertyDescriptor(Module1, "ALLOC_NORMAL")) Object.defineProperty(Module1, "ALLOC_NORMAL", {
            configurable: true,
            get: function() {
                abort("'ALLOC_NORMAL' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
            }
        });
        if (!Object.getOwnPropertyDescriptor(Module1, "ALLOC_STACK")) Object.defineProperty(Module1, "ALLOC_STACK", {
            configurable: true,
            get: function() {
                abort("'ALLOC_STACK' was not exported. add it to EXPORTED_RUNTIME_METHODS (see the FAQ)");
            }
        });
        var calledRun;
        function ExitStatus(status) {
            this.name = "ExitStatus";
            this.message = "Program terminated with exit(" + status + ")";
            this.status = status;
        }
        var calledMain = false;
        dependenciesFulfilled = function runCaller() {
            if (!calledRun) run();
            if (!calledRun) dependenciesFulfilled = runCaller;
        };
        function callMain(args) {
            assert(runDependencies == 0, 'cannot call main when async dependencies remain! (listen on Module["onRuntimeInitialized"])');
            assert(__ATPRERUN__.length == 0, "cannot call main when preRun functions remain to be called");
            var entryFunction = Module1["_main"];
            args = args || [];
            var argc = args.length + 1;
            var argv = stackAlloc((argc + 1) * 4);
            HEAP32[argv >>> 2] = allocateUTF8OnStack(thisProgram);
            for(var i = 1; i < argc; i++)HEAP32[(argv >> 2) + i >>> 0] = allocateUTF8OnStack(args[i - 1]);
            HEAP32[(argv >> 2) + argc >>> 0] = 0;
            try {
                var ret = entryFunction(argc, argv);
                exit(ret, true);
            } catch (e) {
                if (e instanceof ExitStatus || e == "unwind") return;
                var toLog = e;
                if (e && typeof e === "object" && e.stack) toLog = [
                    e,
                    e.stack
                ];
                err("exception thrown: " + toLog);
                quit_(1, e);
            } finally{
                calledMain = true;
            }
        }
        function stackCheckInit() {
            _emscripten_stack_init();
            writeStackCookie();
        }
        function run(args) {
            args = args || arguments_;
            if (runDependencies > 0) return;
            stackCheckInit();
            preRun();
            if (runDependencies > 0) return;
            function doRun() {
                if (calledRun) return;
                calledRun = true;
                Module1["calledRun"] = true;
                if (ABORT) return;
                initRuntime();
                preMain();
                readyPromiseResolve(Module1);
                if (Module1["onRuntimeInitialized"]) Module1["onRuntimeInitialized"]();
                if (shouldRunNow) callMain(args);
                postRun();
            }
            if (Module1["setStatus"]) {
                Module1["setStatus"]("Running...");
                setTimeout(function() {
                    setTimeout(function() {
                        Module1["setStatus"]("");
                    }, 1);
                    doRun();
                }, 1);
            } else doRun();
            checkStackCookie();
        }
        Module1["run"] = run;
        function checkUnflushedContent() {
            var oldOut = out;
            var oldErr = err;
            var has = false;
            out = err = function(x) {
                has = true;
            };
            try {
                var flush = Module1["_fflush"];
                if (flush) flush(0);
                [
                    "stdout",
                    "stderr"
                ].forEach(function(name) {
                    var info = FS.analyzePath("/dev/" + name);
                    if (!info) return;
                    var stream = info.object;
                    var rdev = stream.rdev;
                    var tty = TTY.ttys[rdev];
                    if (tty && tty.output && tty.output.length) has = true;
                });
            } catch (e) {
            }
            out = oldOut;
            err = oldErr;
            if (has) warnOnce("stdio streams had content in them that was not flushed. you should set EXIT_RUNTIME to 1 (see the FAQ), or make sure to emit a newline when you printf etc.");
        }
        function exit(status, implicit) {
            EXITSTATUS = status;
            checkUnflushedContent();
            if (keepRuntimeAlive()) {
                if (!implicit) {
                    var msg = "program exited (with status: " + status + "), but EXIT_RUNTIME is not set, so halting execution but not exiting the runtime or preventing further async execution (build with EXIT_RUNTIME=1, if you want a true shutdown)";
                    readyPromiseReject(msg);
                    err(msg);
                }
            } else exitRuntime();
            procExit(status);
        }
        function procExit(code) {
            EXITSTATUS = code;
            if (!keepRuntimeAlive()) {
                if (Module1["onExit"]) Module1["onExit"](code);
                ABORT = true;
            }
            quit_(code, new ExitStatus(code));
        }
        if (Module1["preInit"]) {
            if (typeof Module1["preInit"] == "function") Module1["preInit"] = [
                Module1["preInit"]
            ];
            while(Module1["preInit"].length > 0)Module1["preInit"].pop()();
        }
        var shouldRunNow = true;
        if (Module1["noInitialRun"]) shouldRunNow = false;
        run();
        return Module1.ready;
    };
}();
exports.default = Module;

},{"process":"glFWE","buffer":"kPwYH","path":"7kBkj","fs":"lnuW3","crypto":"fJDcU","@parcel/transformer-js/src/esmodule-helpers.js":"dKQH3"}],"glFWE":[function(require,module,exports) {
// shim for using process in browser
var process = module.exports = {
};
// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.
var cachedSetTimeout;
var cachedClearTimeout;
function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout() {
    throw new Error('clearTimeout has not been defined');
}
(function() {
    try {
        if (typeof setTimeout === 'function') cachedSetTimeout = setTimeout;
        else cachedSetTimeout = defaultSetTimout;
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') cachedClearTimeout = clearTimeout;
        else cachedClearTimeout = defaultClearTimeout;
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
})();
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) //normal enviroments in sane situations
    return setTimeout(fun, 0);
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }
}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) //normal enviroments in sane situations
    return clearTimeout(marker);
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e) {
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e1) {
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }
}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;
function cleanUpNextTick() {
    if (!draining || !currentQueue) return;
    draining = false;
    if (currentQueue.length) queue = currentQueue.concat(queue);
    else queueIndex = -1;
    if (queue.length) drainQueue();
}
function drainQueue() {
    if (draining) return;
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;
    var len = queue.length;
    while(len){
        currentQueue = queue;
        queue = [];
        while((++queueIndex) < len)if (currentQueue) currentQueue[queueIndex].run();
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}
process.nextTick = function(fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) for(var i = 1; i < arguments.length; i++)args[i - 1] = arguments[i];
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) runTimeout(drainQueue);
};
// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function() {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {
};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {
};
function noop() {
}
process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;
process.listeners = function(name) {
    return [];
};
process.binding = function(name) {
    throw new Error('process.binding is not supported');
};
process.cwd = function() {
    return '/';
};
process.chdir = function(dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() {
    return 0;
};

},{}],"kPwYH":[function(require,module,exports) {
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <https://feross.org>
 * @license  MIT
 */ /* eslint-disable no-proto */ 'use strict';
var base64 = require('base64-js');
var ieee754 = require('ieee754');
var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol['for'] === 'function' ? Symbol['for']('nodejs.util.inspect.custom') // eslint-disable-line dot-notation
 : null;
exports.Buffer = Buffer;
exports.SlowBuffer = SlowBuffer;
exports.INSPECT_MAX_BYTES = 50;
var K_MAX_LENGTH = 2147483647;
exports.kMaxLength = K_MAX_LENGTH;
/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Print warning and recommend using `buffer` v4.x which has an Object
 *               implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * We report that the browser does not support typed arrays if the are not subclassable
 * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`
 * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support
 * for __proto__ and has a buggy typed array implementation.
 */ Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();
if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') console.error("This browser lacks typed array (Uint8Array) support which is required by `buffer` v5.x. Use `buffer` v4.x if you require old browser support.");
function typedArraySupport() {
    // Can typed array instances can be augmented?
    try {
        var arr = new Uint8Array(1);
        var proto = {
            foo: function() {
                return 42;
            }
        };
        Object.setPrototypeOf(proto, Uint8Array.prototype);
        Object.setPrototypeOf(arr, proto);
        return arr.foo() === 42;
    } catch (e) {
        return false;
    }
}
Object.defineProperty(Buffer.prototype, 'parent', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.buffer;
    }
});
Object.defineProperty(Buffer.prototype, 'offset', {
    enumerable: true,
    get: function() {
        if (!Buffer.isBuffer(this)) return undefined;
        return this.byteOffset;
    }
});
function createBuffer(length) {
    if (length > K_MAX_LENGTH) throw new RangeError('The value "' + length + '" is invalid for option "size"');
    // Return an augmented `Uint8Array` instance
    var buf = new Uint8Array(length);
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
/**
 * The Buffer constructor returns instances of `Uint8Array` that have their
 * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
 * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
 * and the `Uint8Array` methods. Square bracket notation works as expected -- it
 * returns a single octet.
 *
 * The `Uint8Array` prototype remains unmodified.
 */ function Buffer(arg, encodingOrOffset, length) {
    // Common case.
    if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') throw new TypeError('The "string" argument must be of type string. Received type number');
        return allocUnsafe(arg);
    }
    return from(arg, encodingOrOffset, length);
}
Buffer.poolSize = 8192 // not used by this implementation
;
function from(value, encodingOrOffset, length) {
    if (typeof value === 'string') return fromString(value, encodingOrOffset);
    if (ArrayBuffer.isView(value)) return fromArrayView(value);
    if (value == null) throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
    if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof SharedArrayBuffer !== 'undefined' && (isInstance(value, SharedArrayBuffer) || value && isInstance(value.buffer, SharedArrayBuffer))) return fromArrayBuffer(value, encodingOrOffset, length);
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type number');
    var valueOf = value.valueOf && value.valueOf();
    if (valueOf != null && valueOf !== value) return Buffer.from(valueOf, encodingOrOffset, length);
    var b = fromObject(value);
    if (b) return b;
    if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);
    throw new TypeError("The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type " + typeof value);
}
/**
 * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
 * if value is a number.
 * Buffer.from(str[, encoding])
 * Buffer.from(array)
 * Buffer.from(buffer)
 * Buffer.from(arrayBuffer[, byteOffset[, length]])
 **/ Buffer.from = function(value, encodingOrOffset, length) {
    return from(value, encodingOrOffset, length);
};
// Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:
// https://github.com/feross/buffer/pull/148
Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);
Object.setPrototypeOf(Buffer, Uint8Array);
function assertSize(size) {
    if (typeof size !== 'number') throw new TypeError('"size" argument must be of type number');
    else if (size < 0) throw new RangeError('The value "' + size + '" is invalid for option "size"');
}
function alloc(size, fill, encoding) {
    assertSize(size);
    if (size <= 0) return createBuffer(size);
    if (fill !== undefined) // Only pay attention to encoding if it's a string. This
    // prevents accidentally sending in a number that would
    // be interpreted as a start offset.
    return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);
    return createBuffer(size);
}
/**
 * Creates a new filled Buffer instance.
 * alloc(size[, fill[, encoding]])
 **/ Buffer.alloc = function(size, fill, encoding) {
    return alloc(size, fill, encoding);
};
function allocUnsafe(size) {
    assertSize(size);
    return createBuffer(size < 0 ? 0 : checked(size) | 0);
}
/**
 * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
 * */ Buffer.allocUnsafe = function(size) {
    return allocUnsafe(size);
};
/**
 * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
 */ Buffer.allocUnsafeSlow = function(size) {
    return allocUnsafe(size);
};
function fromString(string, encoding) {
    if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8';
    if (!Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
    var length = byteLength(string, encoding) | 0;
    var buf = createBuffer(length);
    var actual = buf.write(string, encoding);
    if (actual !== length) // Writing a hex string, for example, that contains invalid characters will
    // cause everything after the first invalid character to be ignored. (e.g.
    // 'abxxcd' will be treated as 'ab')
    buf = buf.slice(0, actual);
    return buf;
}
function fromArrayLike(array) {
    var length = array.length < 0 ? 0 : checked(array.length) | 0;
    var buf = createBuffer(length);
    for(var i = 0; i < length; i += 1)buf[i] = array[i] & 255;
    return buf;
}
function fromArrayView(arrayView) {
    if (isInstance(arrayView, Uint8Array)) {
        var copy = new Uint8Array(arrayView);
        return fromArrayBuffer(copy.buffer, copy.byteOffset, copy.byteLength);
    }
    return fromArrayLike(arrayView);
}
function fromArrayBuffer(array, byteOffset, length) {
    if (byteOffset < 0 || array.byteLength < byteOffset) throw new RangeError('"offset" is outside of buffer bounds');
    if (array.byteLength < byteOffset + (length || 0)) throw new RangeError('"length" is outside of buffer bounds');
    var buf;
    if (byteOffset === undefined && length === undefined) buf = new Uint8Array(array);
    else if (length === undefined) buf = new Uint8Array(array, byteOffset);
    else buf = new Uint8Array(array, byteOffset, length);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(buf, Buffer.prototype);
    return buf;
}
function fromObject(obj) {
    if (Buffer.isBuffer(obj)) {
        var len = checked(obj.length) | 0;
        var buf = createBuffer(len);
        if (buf.length === 0) return buf;
        obj.copy(buf, 0, 0, len);
        return buf;
    }
    if (obj.length !== undefined) {
        if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) return createBuffer(0);
        return fromArrayLike(obj);
    }
    if (obj.type === 'Buffer' && Array.isArray(obj.data)) return fromArrayLike(obj.data);
}
function checked(length) {
    // Note: cannot use `length < K_MAX_LENGTH` here because that fails when
    // length is NaN (which is otherwise coerced to zero.)
    if (length >= K_MAX_LENGTH) throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x" + K_MAX_LENGTH.toString(16) + ' bytes');
    return length | 0;
}
function SlowBuffer(length) {
    if (+length != length) length = 0;
    return Buffer.alloc(+length);
}
Buffer.isBuffer = function isBuffer(b) {
    return b != null && b._isBuffer === true && b !== Buffer.prototype // so Buffer.isBuffer(Buffer.prototype) will be false
    ;
};
Buffer.compare = function compare(a, b) {
    if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);
    if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);
    if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) throw new TypeError('The "buf1", "buf2" arguments must be one of type Buffer or Uint8Array');
    if (a === b) return 0;
    var x = a.length;
    var y = b.length;
    for(var i = 0, len = Math.min(x, y); i < len; ++i)if (a[i] !== b[i]) {
        x = a[i];
        y = b[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
Buffer.isEncoding = function isEncoding(encoding) {
    switch(String(encoding).toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return true;
        default:
            return false;
    }
};
Buffer.concat = function concat(list, length) {
    if (!Array.isArray(list)) throw new TypeError('"list" argument must be an Array of Buffers');
    if (list.length === 0) return Buffer.alloc(0);
    var i;
    if (length === undefined) {
        length = 0;
        for(i = 0; i < list.length; ++i)length += list[i].length;
    }
    var buffer = Buffer.allocUnsafe(length);
    var pos = 0;
    for(i = 0; i < list.length; ++i){
        var buf = list[i];
        if (isInstance(buf, Uint8Array)) {
            if (pos + buf.length > buffer.length) Buffer.from(buf).copy(buffer, pos);
            else Uint8Array.prototype.set.call(buffer, buf, pos);
        } else if (!Buffer.isBuffer(buf)) throw new TypeError('"list" argument must be an Array of Buffers');
        else buf.copy(buffer, pos);
        pos += buf.length;
    }
    return buffer;
};
function byteLength(string, encoding) {
    if (Buffer.isBuffer(string)) return string.length;
    if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) return string.byteLength;
    if (typeof string !== 'string') throw new TypeError("The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. Received type " + typeof string);
    var len = string.length;
    var mustMatch = arguments.length > 2 && arguments[2] === true;
    if (!mustMatch && len === 0) return 0;
    // Use a for loop to avoid recursion
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'ascii':
        case 'latin1':
        case 'binary':
            return len;
        case 'utf8':
        case 'utf-8':
            return utf8ToBytes(string).length;
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return len * 2;
        case 'hex':
            return len >>> 1;
        case 'base64':
            return base64ToBytes(string).length;
        default:
            if (loweredCase) return mustMatch ? -1 : utf8ToBytes(string).length // assume utf8
            ;
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
}
Buffer.byteLength = byteLength;
function slowToString(encoding, start, end) {
    var loweredCase = false;
    // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
    // property of a typed array.
    // This behaves neither like String nor Uint8Array in that we set start/end
    // to their upper/lower bounds if the value passed is out of range.
    // undefined is handled specially as per ECMA-262 6th Edition,
    // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
    if (start === undefined || start < 0) start = 0;
    // Return early if start > this.length. Done here to prevent potential uint32
    // coercion fail below.
    if (start > this.length) return '';
    if (end === undefined || end > this.length) end = this.length;
    if (end <= 0) return '';
    // Force coercion to uint32. This will also coerce falsey/NaN values to 0.
    end >>>= 0;
    start >>>= 0;
    if (end <= start) return '';
    if (!encoding) encoding = 'utf8';
    while(true)switch(encoding){
        case 'hex':
            return hexSlice(this, start, end);
        case 'utf8':
        case 'utf-8':
            return utf8Slice(this, start, end);
        case 'ascii':
            return asciiSlice(this, start, end);
        case 'latin1':
        case 'binary':
            return latin1Slice(this, start, end);
        case 'base64':
            return base64Slice(this, start, end);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return utf16leSlice(this, start, end);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
    }
}
// This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)
// to detect a Buffer instance. It's not possible to use `instanceof Buffer`
// reliably in a browserify context because there could be multiple different
// copies of the 'buffer' package in use. This method works even for Buffer
// instances that were created from another copy of the `buffer` package.
// See: https://github.com/feross/buffer/issues/154
Buffer.prototype._isBuffer = true;
function swap(b, n, m) {
    var i = b[n];
    b[n] = b[m];
    b[m] = i;
}
Buffer.prototype.swap16 = function swap16() {
    var len = this.length;
    if (len % 2 !== 0) throw new RangeError('Buffer size must be a multiple of 16-bits');
    for(var i = 0; i < len; i += 2)swap(this, i, i + 1);
    return this;
};
Buffer.prototype.swap32 = function swap32() {
    var len = this.length;
    if (len % 4 !== 0) throw new RangeError('Buffer size must be a multiple of 32-bits');
    for(var i = 0; i < len; i += 4){
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
    }
    return this;
};
Buffer.prototype.swap64 = function swap64() {
    var len = this.length;
    if (len % 8 !== 0) throw new RangeError('Buffer size must be a multiple of 64-bits');
    for(var i = 0; i < len; i += 8){
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
    }
    return this;
};
Buffer.prototype.toString = function toString() {
    var length = this.length;
    if (length === 0) return '';
    if (arguments.length === 0) return utf8Slice(this, 0, length);
    return slowToString.apply(this, arguments);
};
Buffer.prototype.toLocaleString = Buffer.prototype.toString;
Buffer.prototype.equals = function equals(b) {
    if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');
    if (this === b) return true;
    return Buffer.compare(this, b) === 0;
};
Buffer.prototype.inspect = function inspect() {
    var str = '';
    var max = exports.INSPECT_MAX_BYTES;
    str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();
    if (this.length > max) str += ' ... ';
    return '<Buffer ' + str + '>';
};
if (customInspectSymbol) Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;
Buffer.prototype.compare = function compare1(target, start, end, thisStart, thisEnd) {
    if (isInstance(target, Uint8Array)) target = Buffer.from(target, target.offset, target.byteLength);
    if (!Buffer.isBuffer(target)) throw new TypeError("The \"target\" argument must be one of type Buffer or Uint8Array. Received type " + typeof target);
    if (start === undefined) start = 0;
    if (end === undefined) end = target ? target.length : 0;
    if (thisStart === undefined) thisStart = 0;
    if (thisEnd === undefined) thisEnd = this.length;
    if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) throw new RangeError('out of range index');
    if (thisStart >= thisEnd && start >= end) return 0;
    if (thisStart >= thisEnd) return -1;
    if (start >= end) return 1;
    start >>>= 0;
    end >>>= 0;
    thisStart >>>= 0;
    thisEnd >>>= 0;
    if (this === target) return 0;
    var x = thisEnd - thisStart;
    var y = end - start;
    var len = Math.min(x, y);
    var thisCopy = this.slice(thisStart, thisEnd);
    var targetCopy = target.slice(start, end);
    for(var i = 0; i < len; ++i)if (thisCopy[i] !== targetCopy[i]) {
        x = thisCopy[i];
        y = targetCopy[i];
        break;
    }
    if (x < y) return -1;
    if (y < x) return 1;
    return 0;
};
// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
// OR the last index of `val` in `buffer` at offset <= `byteOffset`.
//
// Arguments:
// - buffer - a Buffer to search
// - val - a string, Buffer, or number
// - byteOffset - an index into `buffer`; will be clamped to an int32
// - encoding - an optional encoding, relevant is val is a string
// - dir - true for indexOf, false for lastIndexOf
function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {
    // Empty buffer means no match
    if (buffer.length === 0) return -1;
    // Normalize byteOffset
    if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
    } else if (byteOffset > 2147483647) byteOffset = 2147483647;
    else if (byteOffset < -2147483648) byteOffset = -2147483648;
    byteOffset = +byteOffset // Coerce to Number.
    ;
    if (numberIsNaN(byteOffset)) // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
    byteOffset = dir ? 0 : buffer.length - 1;
    // Normalize byteOffset: negative offsets start from the end of the buffer
    if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
    if (byteOffset >= buffer.length) {
        if (dir) return -1;
        else byteOffset = buffer.length - 1;
    } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1;
    }
    // Normalize val
    if (typeof val === 'string') val = Buffer.from(val, encoding);
    // Finally, search either indexOf (if dir is true) or lastIndexOf
    if (Buffer.isBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) return -1;
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir);
    } else if (typeof val === 'number') {
        val = val & 255 // Search for a byte value [0-255]
        ;
        if (typeof Uint8Array.prototype.indexOf === 'function') {
            if (dir) return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);
            else return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);
        }
        return arrayIndexOf(buffer, [
            val
        ], byteOffset, encoding, dir);
    }
    throw new TypeError('val must be string, number or Buffer');
}
function arrayIndexOf(arr, val, byteOffset, encoding, dir) {
    var indexSize = 1;
    var arrLength = arr.length;
    var valLength = val.length;
    if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {
            if (arr.length < 2 || val.length < 2) return -1;
            indexSize = 2;
            arrLength /= 2;
            valLength /= 2;
            byteOffset /= 2;
        }
    }
    function read(buf, i) {
        if (indexSize === 1) return buf[i];
        else return buf.readUInt16BE(i * indexSize);
    }
    var i;
    if (dir) {
        var foundIndex = -1;
        for(i = byteOffset; i < arrLength; i++)if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;
        } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
        }
    } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for(i = byteOffset; i >= 0; i--){
            var found = true;
            for(var j = 0; j < valLength; j++)if (read(arr, i + j) !== read(val, j)) {
                found = false;
                break;
            }
            if (found) return i;
        }
    }
    return -1;
}
Buffer.prototype.includes = function includes(val, byteOffset, encoding) {
    return this.indexOf(val, byteOffset, encoding) !== -1;
};
Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, true);
};
Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {
    return bidirectionalIndexOf(this, val, byteOffset, encoding, false);
};
function hexWrite(buf, string, offset, length) {
    offset = Number(offset) || 0;
    var remaining = buf.length - offset;
    if (!length) length = remaining;
    else {
        length = Number(length);
        if (length > remaining) length = remaining;
    }
    var strLen = string.length;
    if (length > strLen / 2) length = strLen / 2;
    for(var i = 0; i < length; ++i){
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (numberIsNaN(parsed)) return i;
        buf[offset + i] = parsed;
    }
    return i;
}
function utf8Write(buf, string, offset, length) {
    return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);
}
function asciiWrite(buf, string, offset, length) {
    return blitBuffer(asciiToBytes(string), buf, offset, length);
}
function base64Write(buf, string, offset, length) {
    return blitBuffer(base64ToBytes(string), buf, offset, length);
}
function ucs2Write(buf, string, offset, length) {
    return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);
}
Buffer.prototype.write = function write(string, offset, length, encoding) {
    // Buffer#write(string)
    if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
    // Buffer#write(string, encoding)
    } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
    // Buffer#write(string, offset[, length][, encoding])
    } else if (isFinite(offset)) {
        offset = offset >>> 0;
        if (isFinite(length)) {
            length = length >>> 0;
            if (encoding === undefined) encoding = 'utf8';
        } else {
            encoding = length;
            length = undefined;
        }
    } else throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');
    var remaining = this.length - offset;
    if (length === undefined || length > remaining) length = remaining;
    if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) throw new RangeError('Attempt to write outside buffer bounds');
    if (!encoding) encoding = 'utf8';
    var loweredCase = false;
    for(;;)switch(encoding){
        case 'hex':
            return hexWrite(this, string, offset, length);
        case 'utf8':
        case 'utf-8':
            return utf8Write(this, string, offset, length);
        case 'ascii':
        case 'latin1':
        case 'binary':
            return asciiWrite(this, string, offset, length);
        case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length);
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return ucs2Write(this, string, offset, length);
        default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
    }
};
Buffer.prototype.toJSON = function toJSON() {
    return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
    };
};
function base64Slice(buf, start, end) {
    if (start === 0 && end === buf.length) return base64.fromByteArray(buf);
    else return base64.fromByteArray(buf.slice(start, end));
}
function utf8Slice(buf, start, end) {
    end = Math.min(buf.length, end);
    var res = [];
    var i = start;
    while(i < end){
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = firstByte > 239 ? 4 : firstByte > 223 ? 3 : firstByte > 191 ? 2 : 1;
        if (i + bytesPerSequence <= end) {
            var secondByte, thirdByte, fourthByte, tempCodePoint;
            switch(bytesPerSequence){
                case 1:
                    if (firstByte < 128) codePoint = firstByte;
                    break;
                case 2:
                    secondByte = buf[i + 1];
                    if ((secondByte & 192) === 128) {
                        tempCodePoint = (firstByte & 31) << 6 | secondByte & 63;
                        if (tempCodePoint > 127) codePoint = tempCodePoint;
                    }
                    break;
                case 3:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 12 | (secondByte & 63) << 6 | thirdByte & 63;
                        if (tempCodePoint > 2047 && (tempCodePoint < 55296 || tempCodePoint > 57343)) codePoint = tempCodePoint;
                    }
                    break;
                case 4:
                    secondByte = buf[i + 1];
                    thirdByte = buf[i + 2];
                    fourthByte = buf[i + 3];
                    if ((secondByte & 192) === 128 && (thirdByte & 192) === 128 && (fourthByte & 192) === 128) {
                        tempCodePoint = (firstByte & 15) << 18 | (secondByte & 63) << 12 | (thirdByte & 63) << 6 | fourthByte & 63;
                        if (tempCodePoint > 65535 && tempCodePoint < 1114112) codePoint = tempCodePoint;
                    }
            }
        }
        if (codePoint === null) {
            // we did not generate a valid codePoint so insert a
            // replacement char (U+FFFD) and advance only 1 byte
            codePoint = 65533;
            bytesPerSequence = 1;
        } else if (codePoint > 65535) {
            // encode to utf16 (surrogate pair dance)
            codePoint -= 65536;
            res.push(codePoint >>> 10 & 1023 | 55296);
            codePoint = 56320 | codePoint & 1023;
        }
        res.push(codePoint);
        i += bytesPerSequence;
    }
    return decodeCodePointsArray(res);
}
// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 4096;
function decodeCodePointsArray(codePoints) {
    var len = codePoints.length;
    if (len <= MAX_ARGUMENTS_LENGTH) return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
    ;
    // Decode in chunks to avoid "call stack size exceeded".
    var res = '';
    var i = 0;
    while(i < len)res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));
    return res;
}
function asciiSlice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i] & 127);
    return ret;
}
function latin1Slice(buf, start, end) {
    var ret = '';
    end = Math.min(buf.length, end);
    for(var i = start; i < end; ++i)ret += String.fromCharCode(buf[i]);
    return ret;
}
function hexSlice(buf, start, end) {
    var len = buf.length;
    if (!start || start < 0) start = 0;
    if (!end || end < 0 || end > len) end = len;
    var out = '';
    for(var i = start; i < end; ++i)out += hexSliceLookupTable[buf[i]];
    return out;
}
function utf16leSlice(buf, start, end) {
    var bytes = buf.slice(start, end);
    var res = '';
    // If bytes.length is odd, the last 8 bits must be ignored (same as node.js)
    for(var i = 0; i < bytes.length - 1; i += 2)res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
    return res;
}
Buffer.prototype.slice = function slice(start, end) {
    var len = this.length;
    start = ~~start;
    end = end === undefined ? len : ~~end;
    if (start < 0) {
        start += len;
        if (start < 0) start = 0;
    } else if (start > len) start = len;
    if (end < 0) {
        end += len;
        if (end < 0) end = 0;
    } else if (end > len) end = len;
    if (end < start) end = start;
    var newBuf = this.subarray(start, end);
    // Return an augmented `Uint8Array` instance
    Object.setPrototypeOf(newBuf, Buffer.prototype);
    return newBuf;
};
/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */ function checkOffset(offset, ext, length) {
    if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');
    if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');
}
Buffer.prototype.readUintLE = Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while((++i) < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    return val;
};
Buffer.prototype.readUintBE = Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset + --byteLength1];
    var mul = 1;
    while(byteLength1 > 0 && (mul *= 256))val += this[offset + --byteLength1] * mul;
    return val;
};
Buffer.prototype.readUint8 = Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    return this[offset];
};
Buffer.prototype.readUint16LE = Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] | this[offset + 1] << 8;
};
Buffer.prototype.readUint16BE = Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    return this[offset] << 8 | this[offset + 1];
};
Buffer.prototype.readUint32LE = Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 16777216;
};
Buffer.prototype.readUint32BE = Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] * 16777216 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);
};
Buffer.prototype.readIntLE = function readIntLE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var val = this[offset];
    var mul = 1;
    var i = 0;
    while((++i) < byteLength1 && (mul *= 256))val += this[offset + i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength1);
    return val;
};
Buffer.prototype.readIntBE = function readIntBE(offset, byteLength1, noAssert) {
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) checkOffset(offset, byteLength1, this.length);
    var i = byteLength1;
    var mul = 1;
    var val = this[offset + --i];
    while(i > 0 && (mul *= 256))val += this[offset + --i] * mul;
    mul *= 128;
    if (val >= mul) val -= Math.pow(2, 8 * byteLength1);
    return val;
};
Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 1, this.length);
    if (!(this[offset] & 128)) return this[offset];
    return (255 - this[offset] + 1) * -1;
};
Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset] | this[offset + 1] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 2, this.length);
    var val = this[offset + 1] | this[offset] << 8;
    return val & 32768 ? val | 4294901760 : val;
};
Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;
};
Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];
};
Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, true, 23, 4);
};
Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 4, this.length);
    return ieee754.read(this, offset, false, 23, 4);
};
Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, true, 52, 8);
};
Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {
    offset = offset >>> 0;
    if (!noAssert) checkOffset(offset, 8, this.length);
    return ieee754.read(this, offset, false, 52, 8);
};
function checkInt(buf, value, offset, ext, max, min) {
    if (!Buffer.isBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance');
    if (value > max || value < min) throw new RangeError('"value" argument is out of bounds');
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
}
Buffer.prototype.writeUintLE = Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength1) - 1;
        checkInt(this, value, offset, byteLength1, maxBytes, 0);
    }
    var mul = 1;
    var i = 0;
    this[offset] = value & 255;
    while((++i) < byteLength1 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength1;
};
Buffer.prototype.writeUintBE = Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    byteLength1 = byteLength1 >>> 0;
    if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength1) - 1;
        checkInt(this, value, offset, byteLength1, maxBytes, 0);
    }
    var i = byteLength1 - 1;
    var mul = 1;
    this[offset + i] = value & 255;
    while((--i) >= 0 && (mul *= 256))this[offset + i] = value / mul & 255;
    return offset + byteLength1;
};
Buffer.prototype.writeUint8 = Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 255, 0);
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeUint16LE = Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeUint16BE = Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 65535, 0);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeUint32LE = Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset + 3] = value >>> 24;
    this[offset + 2] = value >>> 16;
    this[offset + 1] = value >>> 8;
    this[offset] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeUint32BE = Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 4294967295, 0);
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength1 - 1);
        checkInt(this, value, offset, byteLength1, limit - 1, -limit);
    }
    var i = 0;
    var mul = 1;
    var sub = 0;
    this[offset] = value & 255;
    while((++i) < byteLength1 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength1;
};
Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength1, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength1 - 1);
        checkInt(this, value, offset, byteLength1, limit - 1, -limit);
    }
    var i = byteLength1 - 1;
    var mul = 1;
    var sub = 0;
    this[offset + i] = value & 255;
    while((--i) >= 0 && (mul *= 256)){
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) sub = 1;
        this[offset + i] = (value / mul >> 0) - sub & 255;
    }
    return offset + byteLength1;
};
Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 1, 127, -128);
    if (value < 0) value = 255 + value + 1;
    this[offset] = value & 255;
    return offset + 1;
};
Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    return offset + 2;
};
Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 2, 32767, -32768);
    this[offset] = value >>> 8;
    this[offset + 1] = value & 255;
    return offset + 2;
};
Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    this[offset] = value & 255;
    this[offset + 1] = value >>> 8;
    this[offset + 2] = value >>> 16;
    this[offset + 3] = value >>> 24;
    return offset + 4;
};
Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkInt(this, value, offset, 4, 2147483647, -2147483648);
    if (value < 0) value = 4294967295 + value + 1;
    this[offset] = value >>> 24;
    this[offset + 1] = value >>> 16;
    this[offset + 2] = value >>> 8;
    this[offset + 3] = value & 255;
    return offset + 4;
};
function checkIEEE754(buf, value, offset, ext, max, min) {
    if (offset + ext > buf.length) throw new RangeError('Index out of range');
    if (offset < 0) throw new RangeError('Index out of range');
}
function writeFloat(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset, 4, 340282346638528860000000000000000000000, -340282346638528860000000000000000000000);
    ieee754.write(buf, value, offset, littleEndian, 23, 4);
    return offset + 4;
}
Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {
    return writeFloat(this, value, offset, true, noAssert);
};
Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {
    return writeFloat(this, value, offset, false, noAssert);
};
function writeDouble(buf, value, offset, littleEndian, noAssert) {
    value = +value;
    offset = offset >>> 0;
    if (!noAssert) checkIEEE754(buf, value, offset
    ieee754.write(buf, value, offset, littleEndian, 52, 8);
    return offset + 8;
}
Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {
    return writeDouble(this, value, offset, true, noAssert);
};
Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {
    return writeDouble(this, value, offset, false, noAssert);
};
// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy(target, targetStart, start, end) {
    if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');
    if (!start) start = 0;
    if (!end && end !== 0) end = this.length;
    if (targetStart >= target.length) targetStart = target.length;
    if (!targetStart) targetStart = 0;
    if (end > 0 && end < start) end = start;
    // Copy 0 bytes; we're done
    if (end === start) return 0;
    if (target.length === 0 || this.length === 0) return 0;
    // Fatal error conditions
    if (targetStart < 0) throw new RangeError('targetStart out of bounds');
    if (start < 0 || start >= this.length) throw new RangeError('Index out of range');
    if (end < 0) throw new RangeError('sourceEnd out of bounds');
    // Are we oob?
    if (end > this.length) end = this.length;
    if (target.length - targetStart < end - start) end = target.length - targetStart + start;
    var len = end - start;
    if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') // Use built-in when available, missing from IE11
    this.copyWithin(targetStart, start, end);
    else Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);
    return len;
};
// Usage:
//    buffer.fill(number[, offset[, end]])
//    buffer.fill(buffer[, offset[, end]])
//    buffer.fill(string[, offset[, end]][, encoding])
Buffer.prototype.fill = function fill(val, start, end, encoding) {
    // Handle string cases:
    if (typeof val === 'string') {
        if (typeof start === 'string') {
            encoding = start;
            start = 0;
            end = this.length;
        } else if (typeof end === 'string') {
            encoding = end;
            end = this.length;
        }
        if (encoding !== undefined && typeof encoding !== 'string') throw new TypeError('encoding must be a string');
        if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) throw new TypeError('Unknown encoding: ' + encoding);
        if (val.length === 1) {
            var code = val.charCodeAt(0);
            if (encoding === 'utf8' && code < 128 || encoding === 'latin1') // Fast path: If `val` fits into a single byte, use that numeric value.
            val = code;
        }
    } else if (typeof val === 'number') val = val & 255;
    else if (typeof val === 'boolean') val = Number(val);
    // Invalid ranges are not set to a default, so can range check early.
    if (start < 0 || this.length < start || this.length < end) throw new RangeError('Out of range index');
    if (end <= start) return this;
    start = start >>> 0;
    end = end === undefined ? this.length : end >>> 0;
    if (!val) val = 0;
    var i;
    if (typeof val === 'number') for(i = start; i < end; ++i)this[i] = val;
    else {
        var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);
        var len = bytes.length;
        if (len === 0) throw new TypeError('The value "' + val + '" is invalid for argument "value"');
        for(i = 0; i < end - start; ++i)this[i + start] = bytes[i % len];
    }
    return this;
};
// HELPER FUNCTIONS
// ================
var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;
function base64clean(str) {
    // Node takes equal signs as end of the Base64 encoding
    str = str.split('=')[0];
    // Node strips out invalid characters like \n and \t from the string, base64-js does not
    str = str.trim().replace(INVALID_BASE64_RE, '');
    // Node converts strings with length < 2 to ''
    if (str.length < 2) return '';
    // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
    while(str.length % 4 !== 0)str = str + '=';
    return str;
}
function utf8ToBytes(string, units) {
    units = units || Infinity;
    var codePoint;
    var length = string.length;
    var leadSurrogate = null;
    var bytes = [];
    for(var i = 0; i < length; ++i){
        codePoint = string.charCodeAt(i);
        // is surrogate component
        if (codePoint > 55295 && codePoint < 57344) {
            // last char was a lead
            if (!leadSurrogate) {
                // no lead yet
                if (codePoint > 56319) {
                    // unexpected trail
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                } else if (i + 1 === length) {
                    // unpaired lead
                    if ((units -= 3) > -1) bytes.push(239, 191, 189);
                    continue;
                }
                // valid lead
                leadSurrogate = codePoint;
                continue;
            }
            // 2 leads in a row
            if (codePoint < 56320) {
                if ((units -= 3) > -1) bytes.push(239, 191, 189);
                leadSurrogate = codePoint;
                continue;
            }
            // valid surrogate pair
            codePoint = (leadSurrogate - 55296 << 10 | codePoint - 56320) + 65536;
        } else if (leadSurrogate) // valid bmp char, but last char was a lead
        {
            if ((units -= 3) > -1) bytes.push(239, 191, 189);
        }
        leadSurrogate = null;
        // encode utf8
        if (codePoint < 128) {
            if ((units -= 1) < 0) break;
            bytes.push(codePoint);
        } else if (codePoint < 2048) {
            if ((units -= 2) < 0) break;
            bytes.push(codePoint >> 6 | 192, codePoint & 63 | 128);
        } else if (codePoint < 65536) {
            if ((units -= 3) < 0) break;
            bytes.push(codePoint >> 12 | 224, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else if (codePoint < 1114112) {
            if ((units -= 4) < 0) break;
            bytes.push(codePoint >> 18 | 240, codePoint >> 12 & 63 | 128, codePoint >> 6 & 63 | 128, codePoint & 63 | 128);
        } else throw new Error('Invalid code point');
    }
    return bytes;
}
function asciiToBytes(str) {
    var byteArray = [];
    for(var i = 0; i < str.length; ++i)// Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 255);
    return byteArray;
}
function utf16leToBytes(str, units) {
    var c, hi, lo;
    var byteArray = [];
    for(var i = 0; i < str.length; ++i){
        if ((units -= 2) < 0) break;
        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
    }
    return byteArray;
}
function base64ToBytes(str) {
    return base64.toByteArray(base64clean(str));
}
function blitBuffer(src, dst, offset, length) {
    for(var i = 0; i < length; ++i){
        if (i + offset >= dst.length || i >= src.length) break;
        dst[i + offset] = src[i];
    }
    return i;
}
// ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass
// the `instanceof` check but they should be treated as of that type.
// See: https://github.com/feross/buffer/issues/166
function isInstance(obj, type) {
    return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;
}
function numberIsNaN(obj) {
    // For IE11 support
    return obj !== obj // eslint-disable-line no-self-compare
    ;
}
// Create lookup table for `toString('hex')`
// See: https://github.com/feross/buffer/issues/219
var hexSliceLookupTable = function() {
    var alphabet = '0123456789abcdef';
    var table = new Array(256);
    for(var i = 0; i < 16; ++i){
        var i16 = i * 16;
        for(var j = 0; j < 16; ++j)table[i16 + j] = alphabet[i] + alphabet[j];
    }
    return table;
}();

},{"base64-js":"5ygEr","ieee754":"c6MBR"}],"5ygEr":[function(require,module,exports) {
'use strict';
exports.byteLength = byteLength;
exports.toByteArray = toByteArray;
exports.fromByteArray = fromByteArray;
var lookup = [];
var revLookup = [];
var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
for(var i = 0, len = code.length; i < len; ++i){
    lookup[i] = code[i];
    revLookup[code.charCodeAt(i)] = i;
}
// Support decoding URL-safe base64 strings, as Node.js does.
// See: https://en.wikipedia.org/wiki/Base64#URL_applications
revLookup['-'.charCodeAt(0)] = 62;
revLookup['_'.charCodeAt(0)] = 63;
function getLens(b64) {
    var len1 = b64.length;
    if (len1 % 4 > 0) throw new Error('Invalid string. Length must be a multiple of 4');
    // Trim off extra bytes after placeholder bytes are found
    // See: https://github.com/beatgammit/base64-js/issues/42
    var validLen = b64.indexOf('=');
    if (validLen === -1) validLen = len1;
    var placeHoldersLen = validLen === len1 ? 0 : 4 - validLen % 4;
    return [
        validLen,
        placeHoldersLen
    ];
}
// base64 is 4/3 + up to two characters of the original data
function byteLength(b64) {
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function _byteLength(b64, validLen, placeHoldersLen) {
    return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;
}
function toByteArray(b64) {
    var tmp;
    var lens = getLens(b64);
    var validLen = lens[0];
    var placeHoldersLen = lens[1];
    var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));
    var curByte = 0;
    // if there are placeholders, only get up to the last complete 4 chars
    var len1 = placeHoldersLen > 0 ? validLen - 4 : validLen;
    var i1;
    for(i1 = 0; i1 < len1; i1 += 4){
        tmp = revLookup[b64.charCodeAt(i1)] << 18 | revLookup[b64.charCodeAt(i1 + 1)] << 12 | revLookup[b64.charCodeAt(i1 + 2)] << 6 | revLookup[b64.charCodeAt(i1 + 3)];
        arr[curByte++] = tmp >> 16 & 255;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 2) {
        tmp = revLookup[b64.charCodeAt(i1)] << 2 | revLookup[b64.charCodeAt(i1 + 1)] >> 4;
        arr[curByte++] = tmp & 255;
    }
    if (placeHoldersLen === 1) {
        tmp = revLookup[b64.charCodeAt(i1)] << 10 | revLookup[b64.charCodeAt(i1 + 1)] << 4 | revLookup[b64.charCodeAt(i1 + 2)] >> 2;
        arr[curByte++] = tmp >> 8 & 255;
        arr[curByte++] = tmp & 255;
    }
    return arr;
}
function tripletToBase64(num) {
    return lookup[num >> 18 & 63] + lookup[num >> 12 & 63] + lookup[num >> 6 & 63] + lookup[num & 63];
}
function encodeChunk(uint8, start, end) {
    var tmp;
    var output = [];
    for(var i1 = start; i1 < end; i1 += 3){
        tmp = (uint8[i1] << 16 & 16711680) + (uint8[i1 + 1] << 8 & 65280) + (uint8[i1 + 2] & 255);
        output.push(tripletToBase64(tmp));
    }
    return output.join('');
}
function fromByteArray(uint8) {
    var tmp;
    var len1 = uint8.length;
    var extraBytes = len1 % 3 // if we have 1 byte left, pad 2 bytes
    ;
    var parts = [];
    var maxChunkLength = 16383 // must be multiple of 3
    ;
    // go through the array every three bytes, we'll deal with trailing stuff later
    for(var i1 = 0, len2 = len1 - extraBytes; i1 < len2; i1 += maxChunkLength)parts.push(encodeChunk(uint8, i1, i1 + maxChunkLength > len2 ? len2 : i1 + maxChunkLength));
    // pad the end with zeros, but make sure to not forget the extra bytes
    if (extraBytes === 1) {
        tmp = uint8[len1 - 1];
        parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 63] + '==');
    } else if (extraBytes === 2) {
        tmp = (uint8[len1 - 2] << 8) + uint8[len1 - 1];
        parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 63] + lookup[tmp << 2 & 63] + '=');
    }
    return parts.join('');
}

},{}],"c6MBR":[function(require,module,exports) {
/*! ieee754. BSD-3-Clause License. Feross Aboukhadijeh <https://feross.org/opensource> */ exports.read = function(buffer, offset, isLE, mLen, nBytes) {
    var e, m;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var nBits = -7;
    var i = isLE ? nBytes - 1 : 0;
    var d = isLE ? -1 : 1;
    var s = buffer[offset + i];
    i += d;
    e = s & (1 << -nBits) - 1;
    s >>= -nBits;
    nBits += eLen;
    for(; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
    m = e & (1 << -nBits) - 1;
    e >>= -nBits;
    nBits += mLen;
    for(; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
    if (e === 0) e = 1 - eBias;
    else if (e === eMax) return m ? NaN : (s ? -1 : 1) * Infinity;
    else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
    }
    return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
};
exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
    var e, m, c;
    var eLen = nBytes * 8 - mLen - 1;
    var eMax = (1 << eLen) - 1;
    var eBias = eMax >> 1;
    var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;
    var i = isLE ? 0 : nBytes - 1;
    var d = isLE ? 1 : -1;
    var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;
    value = Math.abs(value);
    if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
    } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
            e--;
            c *= 2;
        }
        if (e + eBias >= 1) value += rt / c;
        else value += rt * Math.pow(2, 1 - eBias);
        if (value * c >= 2) {
            e++;
            c /= 2;
        }
        if (e + eBias >= eMax) {
            m = 0;
            e = eMax;
        } else if (e + eBias >= 1) {
            m = (value * c - 1) * Math.pow(2, mLen);
            e = e + eBias;
        } else {
            m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
            e = 0;
        }
    }
    for(; mLen >= 8; buffer[offset + i] = m & 255, i += d, m /= 256, mLen -= 8);
    e = e << mLen | m;
    eLen += mLen;
    for(; eLen > 0; buffer[offset + i] = e & 255, i += d, e /= 256, eLen -= 8);
    buffer[offset + i - d] |= s * 128;
};

},{}],"7kBkj":[function(require,module,exports) {
var process = require("process");
// 'path' module extracted from Node.js v8.11.1 (only the posix part)
// transplited with Babel
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
function assertPath(path) {
    if (typeof path !== 'string') throw new TypeError('Path must be a string. Received ' + JSON.stringify(path));
}
// Resolves . and .. elements in a path with directory names
function normalizeStringPosix(path, allowAboveRoot) {
    var res = '';
    var lastSegmentLength = 0;
    var lastSlash = -1;
    var dots = 0;
    var code;
    for(var i = 0; i <= path.length; ++i){
        if (i < path.length) code = path.charCodeAt(i);
        else if (code === 47 /*/*/ ) break;
        else code = 47 /*/*/ ;
        if (code === 47 /*/*/ ) {
            if (lastSlash === i - 1 || dots === 1) ;
            else if (lastSlash !== i - 1 && dots === 2) {
                if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== 46 /*.*/  || res.charCodeAt(res.length - 2) !== 46 /*.*/ ) {
                    if (res.length > 2) {
                        var lastSlashIndex = res.lastIndexOf('/');
                        if (lastSlashIndex !== res.length - 1) {
                            if (lastSlashIndex === -1) {
                                res = '';
                                lastSegmentLength = 0;
                            } else {
                                res = res.slice(0, lastSlashIndex);
                                lastSegmentLength = res.length - 1 - res.lastIndexOf('/');
                            }
                            lastSlash = i;
                            dots = 0;
                            continue;
                        }
                    } else if (res.length === 2 || res.length === 1) {
                        res = '';
                        lastSegmentLength = 0;
                        lastSlash = i;
                        dots = 0;
                        continue;
                    }
                }
                if (allowAboveRoot) {
                    if (res.length > 0) res += '/..';
                    else res = '..';
                    lastSegmentLength = 2;
                }
            } else {
                if (res.length > 0) res += '/' + path.slice(lastSlash + 1, i);
                else res = path.slice(lastSlash + 1, i);
                lastSegmentLength = i - lastSlash - 1;
            }
            lastSlash = i;
            dots = 0;
        } else if (code === 46 /*.*/  && dots !== -1) ++dots;
        else dots = -1;
    }
    return res;
}
function _format(sep, pathObject) {
    var dir = pathObject.dir || pathObject.root;
    var base = pathObject.base || (pathObject.name || '') + (pathObject.ext || '');
    if (!dir) return base;
    if (dir === pathObject.root) return dir + base;
    return dir + sep + base;
}
var posix = {
    // path.resolve([from ...], to)
    resolve: function resolve() {
        var resolvedPath = '';
        var resolvedAbsolute = false;
        var cwd;
        for(var i = arguments.length - 1; i >= -1 && !resolvedAbsolute; i--){
            var path;
            if (i >= 0) path = arguments[i];
            else {
                if (cwd === undefined) cwd = process.cwd();
                path = cwd;
            }
            assertPath(path);
            // Skip empty entries
            if (path.length === 0) continue;
            resolvedPath = path + '/' + resolvedPath;
            resolvedAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        }
        // At this point the path should be resolved to a full absolute path, but
        // handle relative paths to be safe (might happen when process.cwd() fails)
        // Normalize the path
        resolvedPath = normalizeStringPosix(resolvedPath, !resolvedAbsolute);
        if (resolvedAbsolute) {
            if (resolvedPath.length > 0) return '/' + resolvedPath;
            else return '/';
        } else if (resolvedPath.length > 0) return resolvedPath;
        else return '.';
    },
    normalize: function normalize(path) {
        assertPath(path);
        if (path.length === 0) return '.';
        var isAbsolute = path.charCodeAt(0) === 47 /*/*/ ;
        var trailingSeparator = path.charCodeAt(path.length - 1) === 47 /*/*/ ;
        // Normalize the path
        path = normalizeStringPosix(path, !isAbsolute);
        if (path.length === 0 && !isAbsolute) path = '.';
        if (path.length > 0 && trailingSeparator) path += '/';
        if (isAbsolute) return '/' + path;
        return path;
    },
    isAbsolute: function isAbsolute(path) {
        assertPath(path);
        return path.length > 0 && path.charCodeAt(0) === 47 /*/*/ ;
    },
    join: function join() {
        if (arguments.length === 0) return '.';
        var joined;
        for(var i = 0; i < arguments.length; ++i){
            var arg = arguments[i];
            assertPath(arg);
            if (arg.length > 0) {
                if (joined === undefined) joined = arg;
                else joined += '/' + arg;
            }
        }
        if (joined === undefined) return '.';
        return posix.normalize(joined);
    },
    relative: function relative(from, to) {
        assertPath(from);
        assertPath(to);
        if (from === to) return '';
        from = posix.resolve(from);
        to = posix.resolve(to);
        if (from === to) return '';
        // Trim any leading backslashes
        var fromStart = 1;
        for(; fromStart < from.length; ++fromStart){
            if (from.charCodeAt(fromStart) !== 47 /*/*/ ) break;
        }
        var fromEnd = from.length;
        var fromLen = fromEnd - fromStart;
        // Trim any leading backslashes
        var toStart = 1;
        for(; toStart < to.length; ++toStart){
            if (to.charCodeAt(toStart) !== 47 /*/*/ ) break;
        }
        var toEnd = to.length;
        var toLen = toEnd - toStart;
        // Compare paths to find the longest common path from root
        var length = fromLen < toLen ? fromLen : toLen;
        var lastCommonSep = -1;
        var i = 0;
        for(; i <= length; ++i){
            if (i === length) {
                if (toLen > length) {
                    if (to.charCodeAt(toStart + i) === 47 /*/*/ ) // We get here if `from` is the exact base path for `to`.
                    // For example: from='/foo/bar'; to='/foo/bar/baz'
                    return to.slice(toStart + i + 1);
                    else if (i === 0) // We get here if `from` is the root
                    // For example: from='/'; to='/foo'
                    return to.slice(toStart + i);
                } else if (fromLen > length) {
                    if (from.charCodeAt(fromStart + i) === 47 /*/*/ ) // We get here if `to` is the exact base path for `from`.
                    // For example: from='/foo/bar/baz'; to='/foo/bar'
                    lastCommonSep = i;
                    else if (i === 0) // We get here if `to` is the root.
                    // For example: from='/foo'; to='/'
                    lastCommonSep = 0;
                }
                break;
            }
            var fromCode = from.charCodeAt(fromStart + i);
            var toCode = to.charCodeAt(toStart + i);
            if (fromCode !== toCode) break;
            else if (fromCode === 47 /*/*/ ) lastCommonSep = i;
        }
        var out = '';
        // Generate the relative path based on the path difference between `to`
        // and `from`
        for(i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i)if (i === fromEnd || from.charCodeAt(i) === 47 /*/*/ ) {
            if (out.length === 0) out += '..';
            else out += '/..';
        }
        // Lastly, append the rest of the destination (`to`) path that comes after
        // the common path parts
        if (out.length > 0) return out + to.slice(toStart + lastCommonSep);
        else {
            toStart += lastCommonSep;
            if (to.charCodeAt(toStart) === 47 /*/*/ ) ++toStart;
            return to.slice(toStart);
        }
    },
    _makeLong: function _makeLong(path) {
        return path;
    },
    dirname: function dirname(path) {
        assertPath(path);
        if (path.length === 0) return '.';
        var code = path.charCodeAt(0);
        var hasRoot = code === 47 /*/*/ ;
        var end = -1;
        var matchedSlash = true;
        for(var i = path.length - 1; i >= 1; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                if (!matchedSlash) {
                    end = i;
                    break;
                }
            } else // We saw the first non-path separator
            matchedSlash = false;
        }
        if (end === -1) return hasRoot ? '/' : '.';
        if (hasRoot && end === 1) return '//';
        return path.slice(0, end);
    },
    basename: function basename(path, ext) {
        if (ext !== undefined && typeof ext !== 'string') throw new TypeError('"ext" argument must be a string');
        assertPath(path);
        var start = 0;
        var end = -1;
        var matchedSlash = true;
        var i;
        if (ext !== undefined && ext.length > 0 && ext.length <= path.length) {
            if (ext.length === path.length && ext === path) return '';
            var extIdx = ext.length - 1;
            var firstNonSlashEnd = -1;
            for(i = path.length - 1; i >= 0; --i){
                var code = path.charCodeAt(i);
                if (code === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else {
                    if (firstNonSlashEnd === -1) {
                        // We saw the first non-path separator, remember this index in case
                        // we need it if the extension ends up not matching
                        matchedSlash = false;
                        firstNonSlashEnd = i + 1;
                    }
                    if (extIdx >= 0) {
                        // Try to match the explicit extension
                        if (code === ext.charCodeAt(extIdx)) {
                            if ((--extIdx) === -1) // We matched the extension, so mark this as the end of our path
                            // component
                            end = i;
                        } else {
                            // Extension does not match, so our result is the entire path
                            // component
                            extIdx = -1;
                            end = firstNonSlashEnd;
                        }
                    }
                }
            }
            if (start === end) end = firstNonSlashEnd;
            else if (end === -1) end = path.length;
            return path.slice(start, end);
        } else {
            for(i = path.length - 1; i >= 0; --i){
                if (path.charCodeAt(i) === 47 /*/*/ ) // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                {
                    if (!matchedSlash) {
                        start = i + 1;
                        break;
                    }
                } else if (end === -1) {
                    // We saw the first non-path separator, mark this as the end of our
                    // path component
                    matchedSlash = false;
                    end = i + 1;
                }
            }
            if (end === -1) return '';
            return path.slice(start, end);
        }
    },
    extname: function extname(path) {
        assertPath(path);
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        for(var i = path.length - 1; i >= 0; --i){
            var code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) return '';
        return path.slice(startDot, end);
    },
    format: function format(pathObject) {
        if (pathObject === null || typeof pathObject !== 'object') throw new TypeError('The "pathObject" argument must be of type Object. Received type ' + typeof pathObject);
        return _format('/', pathObject);
    },
    parse: function parse(path) {
        assertPath(path);
        var ret = {
            root: '',
            dir: '',
            base: '',
            ext: '',
            name: ''
        };
        if (path.length === 0) return ret;
        var code = path.charCodeAt(0);
        var isAbsolute1 = code === 47 /*/*/ ;
        var start;
        if (isAbsolute1) {
            ret.root = '/';
            start = 1;
        } else start = 0;
        var startDot = -1;
        var startPart = 0;
        var end = -1;
        var matchedSlash = true;
        var i = path.length - 1;
        // Track the state of characters (if any) we see before our first dot and
        // after any path separator we find
        var preDotState = 0;
        // Get non-dir info
        for(; i >= start; --i){
            code = path.charCodeAt(i);
            if (code === 47 /*/*/ ) {
                // If we reached a path separator that was not part of a set of path
                // separators at the end of the string, stop now
                if (!matchedSlash) {
                    startPart = i + 1;
                    break;
                }
                continue;
            }
            if (end === -1) {
                // We saw the first non-path separator, mark this as the end of our
                // extension
                matchedSlash = false;
                end = i + 1;
            }
            if (code === 46 /*.*/ ) {
                // If this is our first dot, mark it as the start of our extension
                if (startDot === -1) startDot = i;
                else if (preDotState !== 1) preDotState = 1;
            } else if (startDot !== -1) // We saw a non-dot and non-path separator before our dot, so we should
            // have a good chance at having a non-empty extension
            preDotState = -1;
        }
        if (startDot === -1 || end === -1 || // We saw a non-dot character immediately before the dot
        preDotState === 0 || // The (right-most) trimmed path component is exactly '..'
        preDotState === 1 && startDot === end - 1 && startDot === startPart + 1) {
            if (end !== -1) {
                if (startPart === 0 && isAbsolute1) ret.base = ret.name = path.slice(1, end);
                else ret.base = ret.name = path.slice(startPart, end);
            }
        } else {
            if (startPart === 0 && isAbsolute1) {
                ret.name = path.slice(1, startDot);
                ret.base = path.slice(1, end);
            } else {
                ret.name = path.slice(startPart, startDot);
                ret.base = path.slice(startPart, end);
            }
            ret.ext = path.slice(startDot, end);
        }
        if (startPart > 0) ret.dir = path.slice(0, startPart - 1);
        else if (isAbsolute1) ret.dir = '/';
        return ret;
    },
    sep: '/',
    delimiter: ':',
    win32: null,
    posix: null
};
posix.posix = posix;
module.exports = posix;

},{"process":"glFWE"}],"lnuW3":[function(require,module,exports) {
"use strict";

},{}],"fJDcU":[function(require,module,exports) {
'use strict';
exports.randomBytes = exports.rng = exports.pseudoRandomBytes = exports.prng = require('randombytes');
exports.createHash = exports.Hash = require('create-hash');
exports.createHmac = exports.Hmac = require('create-hmac');
var algos = require('browserify-sign/algos');
var algoKeys = Object.keys(algos);
var hashes = [
    'sha1',
    'sha224',
    'sha256',
    'sha384',
    'sha512',
    'md5',
    'rmd160'
].concat(algoKeys);
exports.getHashes = function() {
    return hashes;
};
var p = require('pbkdf2');
exports.pbkdf2 = p.pbkdf2;
exports.pbkdf2Sync = p.pbkdf2Sync;
var aes = require('browserify-cipher');
exports.Cipher = aes.Cipher;
exports.createCipher = aes.createCipher;
exports.Cipheriv = aes.Cipheriv;
exports.createCipheriv = aes.createCipheriv;
exports.Decipher = aes.Decipher;
exports.createDecipher = aes.createDecipher;
exports.Decipheriv = aes.Decipheriv;
exports.createDecipheriv = aes.createDecipheriv;
exports.getCiphers = aes.getCiphers;
exports.listCiphers = aes.listCiphers;
var dh = require('diffie-hellman');
exports.DiffieHellmanGroup = dh.DiffieHellmanGroup;
exports.createDiffieHellmanGroup = dh.createDiffieHellmanGroup;
exports.getDiffieHellman = dh.getDiffieHellman;
exports.createDiffieHellman = dh.createDiffieHellman;
exports.DiffieHellman = dh.DiffieHellman;
var sign = require('browserify-sign');
exports.createSign = sign.createSign;
exports.Sign = sign.Sign;
exports.createVerify = sign.createVerify;
exports.Verify = sign.Verify;
exports.createECDH = require('create-ecdh');
var publicEncrypt = require('public-encrypt');
exports.publicEncrypt = publicEncrypt.publicEncrypt;
exports.privateEncrypt = publicEncrypt.privateEncrypt;
exports.publicDecrypt = publicEncrypt.publicDecrypt;
exports.privateDecrypt = publicEncrypt.privateDecrypt;
// the least I can do is make error messages for the rest of the node.js/crypto api.
// ;[
//   'createCredentials'
// ].forEach(function (name) {
//   exports[name] = function () {
//     throw new Error([
//       'sorry, ' + name + ' is not implemented yet',
//       'we accept pull requests',
//       'https://github.com/crypto-browserify/crypto-browserify'
//     ].join('\n'))
//   }
// })
var rf = require('randomfill');
exports.randomFill = rf.randomFill;
exports.randomFillSync = rf.randomFillSync;
exports.createCredentials = function() {
    throw new Error([
        'sorry, createCredentials is not implemented yet',
        'we accept pull requests',
        'https://github.com/crypto-browserify/crypto-browserify'
    ].join('\n'));
};
exports.constants = {
    'DH_CHECK_P_NOT_SAFE_PRIME': 2,
    'DH_CHECK_P_NOT_PRIME': 1,
    'DH_UNABLE_TO_CHECK_GENERATOR': 4,
    'DH_NOT_SUITABLE_GENERATOR': 8,
    'NPN_ENABLED': 1,
    'ALPN_ENABLED': 1,
    'RSA_PKCS1_PADDING': 1,
    'RSA_SSLV23_PADDING': 2,
    'RSA_NO_PADDING': 3,
    'RSA_PKCS1_OAEP_PADDING': 4,
    'RSA_X931_PADDING': 5,
    'RSA_PKCS1_PSS_PADDING': 6,
    'POINT_CONVERSION_COMPRESSED': 2,
    'POINT_CONVERSION_UNCOMPRESSED': 4,
    'POINT_CONVERSION_HYBRID': 6
};

},{"randombytes":"8w7G4","create-hash":"hel5c","create-hmac":"897KI","browserify-sign/algos":"krWDE","pbkdf2":"S22GI","browserify-cipher":"bHjyE","diffie-hellman":"avxdB","browserify-sign":"gNw10","create-ecdh":"i1g30","public-encrypt":"bAqmF","randomfill":"7ol2h"}],"8w7G4":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
'use strict';
// limit of Crypto.getRandomValues()
// https://developer.mozilla.org/en-US/docs/Web/API/Crypto/getRandomValues
var MAX_BYTES = 65536;
// Node supports requesting up to this number of bytes
// https://github.com/nodejs/node/blob/master/lib/internal/crypto/random.js#L48
var MAX_UINT32 = 4294967295;
function oldBrowser() {
    throw new Error('Secure random number generation is not supported by this browser.\nUse Chrome, Firefox or Internet Explorer 11');
}
var Buffer = require('safe-buffer').Buffer;
var crypto = global.crypto || global.msCrypto;
if (crypto && crypto.getRandomValues) module.exports = randomBytes;
else module.exports = oldBrowser;
function randomBytes(size, cb) {
    // phantomjs needs to throw
    if (size > MAX_UINT32) throw new RangeError('requested too many random bytes');
    var bytes = Buffer.allocUnsafe(size);
    if (size > 0) {
        if (size > MAX_BYTES) // can do at once see https://developer.mozilla.org/en-US/docs/Web/API/window.crypto.getRandomValues
        for(var generated = 0; generated < size; generated += MAX_BYTES)// buffer.slice automatically checks if the end is past the end of
        // the buffer so we don't have to here
        crypto.getRandomValues(bytes.slice(generated, generated + MAX_BYTES));
        else crypto.getRandomValues(bytes);
    }
    if (typeof cb === 'function') return process.nextTick(function() {
        cb(null, bytes);
    });
    return bytes;
}

},{"process":"glFWE","safe-buffer":"7V1Cd"}],"7V1Cd":[function(require,module,exports) {
/*! safe-buffer. MIT License. Feross Aboukhadijeh <https://feross.org/opensource> */ /* eslint-disable node/no-deprecated-api */ var buffer = require('buffer');
var Buffer = buffer.Buffer;
// alternative to using Object.keys for old browsers
function copyProps(src, dst) {
    for(var key in src)dst[key] = src[key];
}
if (Buffer.from && Buffer.alloc && Buffer.allocUnsafe && Buffer.allocUnsafeSlow) module.exports = buffer;
else {
    // Copy properties from require('buffer')
    copyProps(buffer, exports);
    exports.Buffer = SafeBuffer;
}
function SafeBuffer(arg, encodingOrOffset, length) {
    return Buffer(arg, encodingOrOffset, length);
}
SafeBuffer.prototype = Object.create(Buffer.prototype);
// Copy static methods from Buffer
copyProps(Buffer, SafeBuffer);
SafeBuffer.from = function(arg, encodingOrOffset, length) {
    if (typeof arg === 'number') throw new TypeError('Argument must not be a number');
    return Buffer(arg, encodingOrOffset, length);
};
SafeBuffer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    var buf = Buffer(size);
    if (fill !== undefined) {
        if (typeof encoding === 'string') buf.fill(fill, encoding);
        else buf.fill(fill);
    } else buf.fill(0);
    return buf;
};
SafeBuffer.allocUnsafe = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return Buffer(size);
};
SafeBuffer.allocUnsafeSlow = function(size) {
    if (typeof size !== 'number') throw new TypeError('Argument must be a number');
    return buffer.SlowBuffer(size);
};

},{"buffer":"kPwYH"}],"hel5c":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var MD5 = require('md5.js');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Base = require('cipher-base');
function Hash(hash) {
    Base.call(this, 'digest');
    this._hash = hash;
}
inherits(Hash, Base);
Hash.prototype._update = function(data) {
    this._hash.update(data);
};
Hash.prototype._final = function() {
    return this._hash.digest();
};
module.exports = function createHash(alg) {
    alg = alg.toLowerCase();
    if (alg === 'md5') return new MD5();
    if (alg === 'rmd160' || alg === 'ripemd160') return new RIPEMD160();
    return new Hash(sha(alg));
};

},{"inherits":"gmJTw","md5.js":"8VPAE","ripemd160":"k27dq","sha.js":"jV83O","cipher-base":"butKV"}],"gmJTw":[function(require,module,exports) {
if (typeof Object.create === 'function') // implementation from standard node.js 'util' module
module.exports = function inherits(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
            constructor: {
                value: ctor,
                enumerable: false,
                writable: true,
                configurable: true
            }
        });
    }
};
else // old school shim for old browsers
module.exports = function inherits1(ctor, superCtor) {
    if (superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
};

},{}],"8VPAE":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var HashBase = require('hash-base');
var Buffer = require('safe-buffer').Buffer;
var ARRAY16 = new Array(16);
function MD5() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
}
inherits(MD5, HashBase);
MD5.prototype._update = function() {
    var M = ARRAY16;
    for(var i = 0; i < 16; ++i)M[i] = this._block.readInt32LE(i * 4);
    var a = this._a;
    var b = this._b;
    var c = this._c;
    var d = this._d;
    a = fnF(a, b, c, d, M[0], 3614090360, 7);
    d = fnF(d, a, b, c, M[1], 3905402710, 12);
    c = fnF(c, d, a, b, M[2], 606105819, 17);
    b = fnF(b, c, d, a, M[3], 3250441966, 22);
    a = fnF(a, b, c, d, M[4], 4118548399, 7);
    d = fnF(d, a, b, c, M[5], 1200080426, 12);
    c = fnF(c, d, a, b, M[6], 2821735955, 17);
    b = fnF(b, c, d, a, M[7], 4249261313, 22);
    a = fnF(a, b, c, d, M[8], 1770035416, 7);
    d = fnF(d, a, b, c, M[9], 2336552879, 12);
    c = fnF(c, d, a, b, M[10], 4294925233, 17);
    b = fnF(b, c, d, a, M[11], 2304563134, 22);
    a = fnF(a, b, c, d, M[12], 1804603682, 7);
    d = fnF(d, a, b, c, M[13], 4254626195, 12);
    c = fnF(c, d, a, b, M[14], 2792965006, 17);
    b = fnF(b, c, d, a, M[15], 1236535329, 22);
    a = fnG(a, b, c, d, M[1], 4129170786, 5);
    d = fnG(d, a, b, c, M[6], 3225465664, 9);
    c = fnG(c, d, a, b, M[11], 643717713, 14);
    b = fnG(b, c, d, a, M[0], 3921069994, 20);
    a = fnG(a, b, c, d, M[5], 3593408605, 5);
    d = fnG(d, a, b, c, M[10], 38016083, 9);
    c = fnG(c, d, a, b, M[15], 3634488961, 14);
    b = fnG(b, c, d, a, M[4], 3889429448, 20);
    a = fnG(a, b, c, d, M[9], 568446438, 5);
    d = fnG(d, a, b, c, M[14], 3275163606, 9);
    c = fnG(c, d, a, b, M[3], 4107603335, 14);
    b = fnG(b, c, d, a, M[8], 1163531501, 20);
    a = fnG(a, b, c, d, M[13], 2850285829, 5);
    d = fnG(d, a, b, c, M[2], 4243563512, 9);
    c = fnG(c, d, a, b, M[7], 1735328473, 14);
    b = fnG(b, c, d, a, M[12], 2368359562, 20);
    a = fnH(a, b, c, d, M[5], 4294588738, 4);
    d = fnH(d, a, b, c, M[8], 2272392833, 11);
    c = fnH(c, d, a, b, M[11], 1839030562, 16);
    b = fnH(b, c, d, a, M[14], 4259657740, 23);
    a = fnH(a, b, c, d, M[1], 2763975236, 4);
    d = fnH(d, a, b, c, M[4], 1272893353, 11);
    c = fnH(c, d, a, b, M[7], 4139469664, 16);
    b = fnH(b, c, d, a, M[10], 3200236656, 23);
    a = fnH(a, b, c, d, M[13], 681279174, 4);
    d = fnH(d, a, b, c, M[0], 3936430074, 11);
    c = fnH(c, d, a, b, M[3], 3572445317, 16);
    b = fnH(b, c, d, a, M[6], 76029189, 23);
    a = fnH(a, b, c, d, M[9], 3654602809, 4);
    d = fnH(d, a, b, c, M[12], 3873151461, 11);
    c = fnH(c, d, a, b, M[15], 530742520, 16);
    b = fnH(b, c, d, a, M[2], 3299628645, 23);
    a = fnI(a, b, c, d, M[0], 4096336452, 6);
    d = fnI(d, a, b, c, M[7], 1126891415, 10);
    c = fnI(c, d, a, b, M[14], 2878612391, 15);
    b = fnI(b, c, d, a, M[5], 4237533241, 21);
    a = fnI(a, b, c, d, M[12], 1700485571, 6);
    d = fnI(d, a, b, c, M[3], 2399980690, 10);
    c = fnI(c, d, a, b, M[10], 4293915773, 15);
    b = fnI(b, c, d, a, M[1], 2240044497, 21);
    a = fnI(a, b, c, d, M[8], 1873313359, 6);
    d = fnI(d, a, b, c, M[15], 4264355552, 10);
    c = fnI(c, d, a, b, M[6], 2734768916, 15);
    b = fnI(b, c, d, a, M[13], 1309151649, 21);
    a = fnI(a, b, c, d, M[4], 4149444226, 6);
    d = fnI(d, a, b, c, M[11], 3174756917, 10);
    c = fnI(c, d, a, b, M[2], 718787259, 15);
    b = fnI(b, c, d, a, M[9], 3951481745, 21);
    this._a = this._a + a | 0;
    this._b = this._b + b | 0;
    this._c = this._c + c | 0;
    this._d = this._d + d | 0;
};
MD5.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.allocUnsafe(16);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fnF(a, b, c, d, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + b | 0;
}
function fnG(a, b, c, d, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + b | 0;
}
function fnH(a, b, c, d, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + b | 0;
}
function fnI(a, b, c, d, m, k, s) {
    return rotl(a + (c ^ (b | ~d)) + m + k | 0, s) + b | 0;
}
module.exports = MD5;

},{"inherits":"gmJTw","hash-base":"8g7TJ","safe-buffer":"7V1Cd"}],"8g7TJ":[function(require,module,exports) {
'use strict';
var Buffer = require('safe-buffer').Buffer;
var Transform = require('readable-stream').Transform;
var inherits = require('inherits');
function throwIfNotStringOrBuffer(val, prefix) {
    if (!Buffer.isBuffer(val) && typeof val !== 'string') throw new TypeError(prefix + ' must be a string or a buffer');
}
function HashBase(blockSize) {
    Transform.call(this);
    this._block = Buffer.allocUnsafe(blockSize);
    this._blockSize = blockSize;
    this._blockOffset = 0;
    this._length = [
        0,
        0,
        0,
        0
    ];
    this._finalized = false;
}
inherits(HashBase, Transform);
HashBase.prototype._transform = function(chunk, encoding, callback) {
    var error = null;
    try {
        this.update(chunk, encoding);
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype._flush = function(callback) {
    var error = null;
    try {
        this.push(this.digest());
    } catch (err) {
        error = err;
    }
    callback(error);
};
HashBase.prototype.update = function(data, encoding) {
    throwIfNotStringOrBuffer(data, 'Data');
    if (this._finalized) throw new Error('Digest already called');
    if (!Buffer.isBuffer(data)) data = Buffer.from(data, encoding);
    // consume data
    var block = this._block;
    var offset = 0;
    while(this._blockOffset + data.length - offset >= this._blockSize){
        for(var i = this._blockOffset; i < this._blockSize;)block[i++] = data[offset++];
        this._update();
        this._blockOffset = 0;
    }
    while(offset < data.length)block[this._blockOffset++] = data[offset++];
    // update length
    for(var j = 0, carry = data.length * 8; carry > 0; ++j){
        this._length[j] += carry;
        carry = this._length[j] / 4294967296 | 0;
        if (carry > 0) this._length[j] -= 4294967296 * carry;
    }
    return this;
};
HashBase.prototype._update = function() {
    throw new Error('_update is not implemented');
};
HashBase.prototype.digest = function(encoding) {
    if (this._finalized) throw new Error('Digest already called');
    this._finalized = true;
    var digest = this._digest();
    if (encoding !== undefined) digest = digest.toString(encoding);
    // reset state
    this._block.fill(0);
    this._blockOffset = 0;
    for(var i = 0; i < 4; ++i)this._length[i] = 0;
    return digest;
};
HashBase.prototype._digest = function() {
    throw new Error('_digest is not implemented');
};
module.exports = HashBase;

},{"safe-buffer":"7V1Cd","readable-stream":"dBTw8","inherits":"gmJTw"}],"dBTw8":[function(require,module,exports) {
exports = module.exports = require('./lib/_stream_readable.js');
exports.Stream = exports;
exports.Readable = exports;
exports.Writable = require('./lib/_stream_writable.js');
exports.Duplex = require('./lib/_stream_duplex.js');
exports.Transform = require('./lib/_stream_transform.js');
exports.PassThrough = require('./lib/_stream_passthrough.js');
exports.finished = require('./lib/internal/streams/end-of-stream.js');
exports.pipeline = require('./lib/internal/streams/pipeline.js');

},{"./lib/_stream_readable.js":"is8RM","./lib/_stream_writable.js":"5umoS","./lib/_stream_duplex.js":"4z5jL","./lib/_stream_transform.js":"bAegj","./lib/_stream_passthrough.js":"SdA6L","./lib/internal/streams/end-of-stream.js":"iEgng","./lib/internal/streams/pipeline.js":"i4S81"}],"is8RM":[function(require,module,exports) {
var global = arguments[3];
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
module.exports = Readable;
/*<replacement>*/ var Duplex;
/*</replacement>*/ Readable.ReadableState = ReadableState;
/*<replacement>*/ var EE = require('events').EventEmitter;
var EElistenerCount = function EElistenerCount1(emitter, type) {
    return emitter.listeners(type).length;
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
/*<replacement>*/ var debugUtil = require('util');
var debug;
if (debugUtil && debugUtil.debuglog) debug = debugUtil.debuglog('stream');
else debug = function debug1() {
};
/*</replacement>*/ var BufferList = require('./internal/streams/buffer_list');
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_STREAM_PUSH_AFTER_EOF = _require$codes.ERR_STREAM_PUSH_AFTER_EOF, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_STREAM_UNSHIFT_AFTER_END_EVENT = _require$codes.ERR_STREAM_UNSHIFT_AFTER_END_EVENT; // Lazy loaded to improve the startup performance.
var StringDecoder;
var createReadableStreamAsyncIterator;
var from;
require('inherits')(Readable, Stream);
var errorOrDestroy = destroyImpl.errorOrDestroy;
var kProxyEvents = [
    'error',
    'close',
    'destroy',
    'pause',
    'resume'
];
function prependListener(emitter, event, fn) {
    // Sadly this is not cacheable as some libraries bundle their own
    // event emitter implementation with them.
    if (typeof emitter.prependListener === 'function') return emitter.prependListener(event, fn); // This is a hack to make sure that our error handler is attached before any
    // userland ones.  NEVER DO THIS. This is here only because this code needs
    // to continue to work with older versions of Node.js that do not include
    // the prependListener() method. The goal is to eventually remove this hack.
    if (!emitter._events || !emitter._events[event]) emitter.on(event, fn);
    else if (Array.isArray(emitter._events[event])) emitter._events[event].unshift(fn);
    else emitter._events[event] = [
        fn,
        emitter._events[event]
    ];
}
function ReadableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream.
    // These options can be provided separately as readableXXX and writableXXX.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag. Used to make read(n) ignore n and to
    // make all the buffer merging and length checks go away
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.readableObjectMode; // the point at which it stops calling _read() to fill the buffer
    // Note: 0 is a valid value, means "don't call _read preemptively ever"
    this.highWaterMark = getHighWaterMark(this, options, 'readableHighWaterMark', isDuplex); // A linked list is used to store data chunks instead of an array because the
    // linked list can remove elements from the beginning faster than
    // array.shift()
    this.buffer = new BufferList();
    this.length = 0;
    this.pipes = null;
    this.pipesCount = 0;
    this.flowing = null;
    this.ended = false;
    this.endEmitted = false;
    this.reading = false; // a flag to be able to tell if the event 'readable'/'data' is emitted
    // immediately, or on a later tick.  We set this to true at first, because
    // any actions that shouldn't happen until "later" should generally also
    // not happen before the first read call.
    this.sync = true; // whenever we return null, then we set a flag to say
    // that we're awaiting a 'readable' event emission.
    this.needReadable = false;
    this.emittedReadable = false;
    this.readableListening = false;
    this.resumeScheduled = false;
    this.paused = true; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'end' (and potentially 'finish')
    this.autoDestroy = !!options.autoDestroy; // has it been destroyed
    this.destroyed = false; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // the number of writers that are awaiting a drain event in .pipe()s
    this.awaitDrain = 0; // if true, a maybeReadMore has been scheduled
    this.readingMore = false;
    this.decoder = null;
    this.encoding = null;
    if (options.encoding) {
        if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
    }
}
function Readable(options) {
    Duplex = Duplex || require('./_stream_duplex');
    if (!(this instanceof Readable)) return new Readable(options); // Checking for a Stream.Duplex instance is faster here instead of inside
    // the ReadableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    this._readableState = new ReadableState(options, this, isDuplex); // legacy
    this.readable = true;
    if (options) {
        if (typeof options.read === 'function') this._read = options.read;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
    }
    Stream.call(this);
}
Object.defineProperty(Readable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined) return false;
        return this._readableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._readableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
    }
});
Readable.prototype.destroy = destroyImpl.destroy;
Readable.prototype._undestroy = destroyImpl.undestroy;
Readable.prototype._destroy = function(err, cb) {
    cb(err);
}; // Manually shove something into the read() buffer.
// This returns true if the highWaterMark has not been hit yet,
// similar to how Writable.write() returns true if you should
// write() some more.
Readable.prototype.push = function(chunk, encoding) {
    var state = this._readableState;
    var skipChunkCheck;
    if (!state.objectMode) {
        if (typeof chunk === 'string') {
            encoding = encoding || state.defaultEncoding;
            if (encoding !== state.encoding) {
                chunk = Buffer.from(chunk, encoding);
                encoding = '';
            }
            skipChunkCheck = true;
        }
    } else skipChunkCheck = true;
    return readableAddChunk(this, chunk, encoding, false, skipChunkCheck);
}; // Unshift should *always* be something directly out of read()
Readable.prototype.unshift = function(chunk) {
    return readableAddChunk(this, chunk, null, true, false);
};
function readableAddChunk(stream, chunk, encoding, addToFront, skipChunkCheck) {
    debug('readableAddChunk', chunk);
    var state = stream._readableState;
    if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
    } else {
        var er;
        if (!skipChunkCheck) er = chunkInvalid(state, chunk);
        if (er) errorOrDestroy(stream, er);
        else if (state.objectMode || chunk && chunk.length > 0) {
            if (typeof chunk !== 'string' && !state.objectMode && Object.getPrototypeOf(chunk) !== Buffer.prototype) chunk = _uint8ArrayToBuffer(chunk);
            if (addToFront) {
                if (state.endEmitted) errorOrDestroy(stream, new ERR_STREAM_UNSHIFT_AFTER_END_EVENT());
                else addChunk(stream, state, chunk, true);
            } else if (state.ended) errorOrDestroy(stream, new ERR_STREAM_PUSH_AFTER_EOF());
            else if (state.destroyed) return false;
            else {
                state.reading = false;
                if (state.decoder && !encoding) {
                    chunk = state.decoder.write(chunk);
                    if (state.objectMode || chunk.length !== 0) addChunk(stream, state, chunk, false);
                    else maybeReadMore(stream, state);
                } else addChunk(stream, state, chunk, false);
            }
        } else if (!addToFront) {
            state.reading = false;
            maybeReadMore(stream, state);
        }
    } // We can push more data if we are below the highWaterMark.
    // Also, if we have no data yet, we can stand some more bytes.
    // This is to work around cases where hwm=0, such as the repl.
    return !state.ended && (state.length < state.highWaterMark || state.length === 0);
}
function addChunk(stream, state, chunk, addToFront) {
    if (state.flowing && state.length === 0 && !state.sync) {
        state.awaitDrain = 0;
        stream.emit('data', chunk);
    } else {
        // update the buffer info.
        state.length += state.objectMode ? 1 : chunk.length;
        if (addToFront) state.buffer.unshift(chunk);
        else state.buffer.push(chunk);
        if (state.needReadable) emitReadable(stream);
    }
    maybeReadMore(stream, state);
}
function chunkInvalid(state, chunk) {
    var er;
    if (!_isUint8Array(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer',
        'Uint8Array'
    ], chunk);
    return er;
}
Readable.prototype.isPaused = function() {
    return this._readableState.flowing === false;
}; // backwards compatibility.
Readable.prototype.setEncoding = function(enc) {
    if (!StringDecoder) StringDecoder = require('string_decoder/').StringDecoder;
    var decoder = new StringDecoder(enc);
    this._readableState.decoder = decoder; // If setEncoding(null), decoder.encoding equals utf8
    this._readableState.encoding = this._readableState.decoder.encoding; // Iterate over current buffer to convert already stored Buffers:
    var p = this._readableState.buffer.head;
    var content = '';
    while(p !== null){
        content += decoder.write(p.data);
        p = p.next;
    }
    this._readableState.buffer.clear();
    if (content !== '') this._readableState.buffer.push(content);
    this._readableState.length = content.length;
    return this;
}; // Don't raise the hwm > 1GB
var MAX_HWM = 1073741824;
function computeNewHighWaterMark(n) {
    if (n >= MAX_HWM) // TODO(ronag): Throw ERR_VALUE_OUT_OF_RANGE.
    n = MAX_HWM;
    else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
    }
    return n;
} // This function is designed to be inlinable, so please take care when making
// changes to the function body.
function howMuchToRead(n, state) {
    if (n <= 0 || state.length === 0 && state.ended) return 0;
    if (state.objectMode) return 1;
    if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;
        else return state.length;
    } // If we're asking for more than the current hwm, then raise the hwm.
    if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
    if (n <= state.length) return n; // Don't have enough
    if (!state.ended) {
        state.needReadable = true;
        return 0;
    }
    return state.length;
} // you can override either this method, or the async _read(n) below.
Readable.prototype.read = function(n) {
    debug('read', n);
    n = parseInt(n, 10);
    var state = this._readableState;
    var nOrig = n;
    if (n !== 0) state.emittedReadable = false; // if we're doing read(0) to trigger a readable event, but we
    // already have a bunch of data in the buffer, then just trigger
    // the 'readable' event and move on.
    if (n === 0 && state.needReadable && ((state.highWaterMark !== 0 ? state.length >= state.highWaterMark : state.length > 0) || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);
        else emitReadable(this);
        return null;
    }
    n = howMuchToRead(n, state); // if we've ended, and we're now clear, then finish it up.
    if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
    } // All the actual chunk generation logic needs to be
    // *below* the call to _read.  The reason is that in certain
    // synthetic stream cases, such as passthrough streams, _read
    // may be a completely synchronous operation which may change
    // the state of the read buffer, providing enough data when
    // before there was *not* enough.
    //
    // So, the steps are:
    // 1. Figure out what the state of things will be after we do
    // a read from the buffer.
    //
    // 2. If that resulting state will trigger a _read, then call _read.
    // Note that this may be asynchronous, or synchronous.  Yes, it is
    // deeply ugly to write APIs this way, but that still doesn't mean
    // that the Readable class should behave improperly, as streams are
    // designed to be sync/async agnostic.
    // Take note if the _read call is sync or async (ie, if the read call
    // has returned yet), so that we know whether or not it's safe to emit
    // 'readable' etc.
    //
    // 3. Actually pull the requested chunks out of the buffer and return.
    // if we need a readable event, then we need to do some reading.
    var doRead = state.needReadable;
    debug('need readable', doRead); // if we currently have less than the highWaterMark, then also read some
    if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
    } // however, if we've ended, then there's no point, and if we're already
    // reading, then it's unnecessary.
    if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
    } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true; // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true; // call internal read method
        this._read(state.highWaterMark);
        state.sync = false; // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
    }
    var ret;
    if (n > 0) ret = fromList(n, state);
    else ret = null;
    if (ret === null) {
        state.needReadable = state.length <= state.highWaterMark;
        n = 0;
    } else {
        state.length -= n;
        state.awaitDrain = 0;
    }
    if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true; // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
    }
    if (ret !== null) this.emit('data', ret);
    return ret;
};
function onEofChunk(stream, state) {
    debug('onEofChunk');
    if (state.ended) return;
    if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
            state.buffer.push(chunk);
            state.length += state.objectMode ? 1 : chunk.length;
        }
    }
    state.ended = true;
    if (state.sync) // if we are sync, wait until next tick to emit the data.
    // Otherwise we risk emitting data in the flow()
    // the readable code triggers during a read() call
    emitReadable(stream);
    else {
        // emit 'readable' now to make sure it gets picked up.
        state.needReadable = false;
        if (!state.emittedReadable) {
            state.emittedReadable = true;
            emitReadable_(stream);
        }
    }
} // Don't emit readable right away in sync mode, because this can trigger
// another read() call => stack overflow.  This way, it might trigger
// a nextTick recursion warning, but that's not so bad.
function emitReadable(stream) {
    var state = stream._readableState;
    debug('emitReadable', state.needReadable, state.emittedReadable);
    state.needReadable = false;
    if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        process.nextTick(emitReadable_, stream);
    }
}
function emitReadable_(stream) {
    var state = stream._readableState;
    debug('emitReadable_', state.destroyed, state.length, state.ended);
    if (!state.destroyed && (state.length || state.ended)) {
        stream.emit('readable');
        state.emittedReadable = false;
    } // The stream needs another readable event if
    // 1. It is not flowing, as the flow mechanism will take
    //    care of it.
    // 2. It is not ended.
    // 3. It is below the highWaterMark, so we can schedule
    //    another readable later.
    state.needReadable = !state.flowing && !state.ended && state.length <= state.highWaterMark;
    flow(stream);
} // at this point, the user has presumably seen the 'readable' event,
// and called read() to consume some data.  that may have triggered
// in turn another _read(n) call, in which case reading = true if
// it's in progress.
// However, if we're not ended, or reading, and the length < hwm,
// then go ahead and try to read some more preemptively.
function maybeReadMore(stream, state) {
    if (!state.readingMore) {
        state.readingMore = true;
        process.nextTick(maybeReadMore_, stream, state);
    }
}
function maybeReadMore_(stream, state) {
    // Attempt to read more data if we should.
    //
    // The conditions for reading more data are (one of):
    // - Not enough data buffered (state.length < state.highWaterMark). The loop
    //   is responsible for filling the buffer with enough data if such data
    //   is available. If highWaterMark is 0 and we are not in the flowing mode
    //   we should _not_ attempt to buffer any extra data. We'll get more data
    //   when the stream consumer calls read() instead.
    // - No data in the buffer, and the stream is in flowing mode. In this mode
    //   the loop below is responsible for ensuring read() is called. Failing to
    //   call read here would abort the flow and there's no other mechanism for
    //   continuing the flow if the stream consumer has just subscribed to the
    //   'data' event.
    //
    // In addition to the above conditions to keep reading data, the following
    // conditions prevent the data from being read:
    // - The stream has ended (state.ended).
    // - There is already a pending 'read' operation (state.reading). This is a
    //   case where the the stream has called the implementation defined _read()
    //   method, but they are processing the call asynchronously and have _not_
    //   called push() with new data. In this case we skip performing more
    //   read()s. The execution ends in this method again after the _read() ends
    //   up calling push() with more data.
    while(!state.reading && !state.ended && (state.length < state.highWaterMark || state.flowing && state.length === 0)){
        var len = state.length;
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length) break;
    }
    state.readingMore = false;
} // abstract method.  to be overridden in specific implementation classes.
// call cb(er, data) where data is <= n in length.
// for virtual (non-string, non-buffer) streams, "length" is somewhat
// arbitrary, and perhaps not very meaningful.
Readable.prototype._read = function(n) {
    errorOrDestroy(this, new ERR_METHOD_NOT_IMPLEMENTED('_read()'));
};
Readable.prototype.pipe = function(dest, pipeOpts) {
    var src = this;
    var state = this._readableState;
    switch(state.pipesCount){
        case 0:
            state.pipes = dest;
            break;
        case 1:
            state.pipes = [
                state.pipes,
                dest
            ];
            break;
        default:
            state.pipes.push(dest);
            break;
    }
    state.pipesCount += 1;
    debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);
    var doEnd = (!pipeOpts || pipeOpts.end !== false) && dest !== process.stdout && dest !== process.stderr;
    var endFn = doEnd ? onend : unpipe;
    if (state.endEmitted) process.nextTick(endFn);
    else src.once('end', endFn);
    dest.on('unpipe', onunpipe);
    function onunpipe(readable, unpipeInfo) {
        debug('onunpipe');
        if (readable === src) {
            if (unpipeInfo && unpipeInfo.hasUnpiped === false) {
                unpipeInfo.hasUnpiped = true;
                cleanup();
            }
        }
    }
    function onend() {
        debug('onend');
        dest.end();
    } // when the dest drains, it reduces the awaitDrain counter
    // on the source.  This would be more elegant with a .once()
    // handler in flow(), but adding and removing repeatedly is
    // too slow.
    var ondrain = pipeOnDrain(src);
    dest.on('drain', ondrain);
    var cleanedUp = false;
    function cleanup() {
        debug('cleanup'); // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', unpipe);
        src.removeListener('data', ondata);
        cleanedUp = true; // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
    }
    src.on('data', ondata);
    function ondata(chunk) {
        debug('ondata');
        var ret = dest.write(chunk);
        debug('dest.write', ret);
        if (ret === false) {
            // If the user unpiped during `dest.write()`, it is possible
            // to get stuck in a permanently paused state if that write
            // also returned false.
            // => Check whether `dest` is still a piping destination.
            if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
                debug('false write response, pause', state.awaitDrain);
                state.awaitDrain++;
            }
            src.pause();
        }
    } // if the dest has an error, then stop piping into it.
    // however, don't suppress the throwing behavior for this.
    function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (EElistenerCount(dest, 'error') === 0) errorOrDestroy(dest, er);
    } // Make sure our error handler is attached before userland ones.
    prependListener(dest, 'error', onerror); // Both close and finish should trigger unpipe, but only once.
    function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
    }
    dest.once('close', onclose);
    function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
    }
    dest.once('finish', onfinish);
    function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
    } // tell the dest that it's being piped to
    dest.emit('pipe', src); // start the flow if it hasn't been started already.
    if (!state.flowing) {
        debug('pipe resume');
        src.resume();
    }
    return dest;
};
function pipeOnDrain(src) {
    return function pipeOnDrainFunctionResult() {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && EElistenerCount(src, 'data')) {
            state.flowing = true;
            flow(src);
        }
    };
}
Readable.prototype.unpipe = function(dest) {
    var state = this._readableState;
    var unpipeInfo = {
        hasUnpiped: false
    }; // if we're not piping anywhere, then do nothing.
    if (state.pipesCount === 0) return this; // just one destination.  most common case.
    if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;
        if (!dest) dest = state.pipes; // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this, unpipeInfo);
        return this;
    } // slow case. multiple pipe destinations.
    if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        for(var i = 0; i < len; i++)dests[i].emit('unpipe', this, {
            hasUnpiped: false
        });
        return this;
    } // try to find the right one.
    var index = indexOf(state.pipes, dest);
    if (index === -1) return this;
    state.pipes.splice(index, 1);
    state.pipesCount -= 1;
    if (state.pipesCount === 1) state.pipes = state.pipes[0];
    dest.emit('unpipe', this, unpipeInfo);
    return this;
}; // set up data events if they are asked for
// Ensure readable listeners eventually get something
Readable.prototype.on = function(ev, fn) {
    var res = Stream.prototype.on.call(this, ev, fn);
    var state = this._readableState;
    if (ev === 'data') {
        // update readableListening so that resume() may be a no-op
        // a few lines down. This is needed to support once('readable').
        state.readableListening = this.listenerCount('readable') > 0; // Try start flowing on next tick if stream isn't explicitly paused
        if (state.flowing !== false) this.resume();
    } else if (ev === 'readable') {
        if (!state.endEmitted && !state.readableListening) {
            state.readableListening = state.needReadable = true;
            state.flowing = false;
            state.emittedReadable = false;
            debug('on readable', state.length, state.reading);
            if (state.length) emitReadable(this);
            else if (!state.reading) process.nextTick(nReadingNextTick, this);
        }
    }
    return res;
};
Readable.prototype.addListener = Readable.prototype.on;
Readable.prototype.removeListener = function(ev, fn) {
    var res = Stream.prototype.removeListener.call(this, ev, fn);
    if (ev === 'readable') // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
Readable.prototype.removeAllListeners = function(ev) {
    var res = Stream.prototype.removeAllListeners.apply(this, arguments);
    if (ev === 'readable' || ev === undefined) // We need to check if there is someone still listening to
    // readable and reset the state. However this needs to happen
    // after readable has been emitted but before I/O (nextTick) to
    // support once('readable', fn) cycles. This means that calling
    // resume within the same tick will have no
    // effect.
    process.nextTick(updateReadableListening, this);
    return res;
};
function updateReadableListening(self) {
    var state = self._readableState;
    state.readableListening = self.listenerCount('readable') > 0;
    if (state.resumeScheduled && !state.paused) // flowing needs to be set to true now, otherwise
    // the upcoming resume will not flow.
    state.flowing = true; // crude way to check if we should resume
    else if (self.listenerCount('data') > 0) self.resume();
}
function nReadingNextTick(self) {
    debug('readable nexttick read 0');
    self.read(0);
} // pause() and resume() are remnants of the legacy readable stream API
// If the user uses them, then switch into old mode.
Readable.prototype.resume = function() {
    var state = this._readableState;
    if (!state.flowing) {
        debug('resume'); // we flow only if there is no one listening
        // for readable, but we still have to call
        // resume()
        state.flowing = !state.readableListening;
        resume(this, state);
    }
    state.paused = false;
    return this;
};
function resume(stream, state) {
    if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        process.nextTick(resume_, stream, state);
    }
}
function resume_(stream, state) {
    debug('resume', state.reading);
    if (!state.reading) stream.read(0);
    state.resumeScheduled = false;
    stream.emit('resume');
    flow(stream);
    if (state.flowing && !state.reading) stream.read(0);
}
Readable.prototype.pause = function() {
    debug('call pause flowing=%j', this._readableState.flowing);
    if (this._readableState.flowing !== false) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
    }
    this._readableState.paused = true;
    return this;
};
function flow(stream) {
    var state = stream._readableState;
    debug('flow', state.flowing);
    while(state.flowing && stream.read() !== null);
} // wrap an old-style stream as the async data source.
// This is *not* part of the readable stream interface.
// It is an ugly unfortunate mess of history.
Readable.prototype.wrap = function(stream) {
    var _this = this;
    var state = this._readableState;
    var paused = false;
    stream.on('end', function() {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
            var chunk = state.decoder.end();
            if (chunk && chunk.length) _this.push(chunk);
        }
        _this.push(null);
    });
    stream.on('data', function(chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk); // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;
        else if (!state.objectMode && (!chunk || !chunk.length)) return;
        var ret = _this.push(chunk);
        if (!ret) {
            paused = true;
            stream.pause();
        }
    }); // proxy all the other methods.
    // important when wrapping filters and duplexes.
    for(var i in stream)if (this[i] === undefined && typeof stream[i] === 'function') this[i] = (function methodWrap(method) {
        return function methodWrapReturnFunction() {
            return stream[method].apply(stream, arguments);
        };
    })(i);
     // proxy certain important events.
    for(var n = 0; n < kProxyEvents.length; n++)stream.on(kProxyEvents[n], this.emit.bind(this, kProxyEvents[n]));
     // when we try to consume some more bytes, simply unpause the
    // underlying stream.
    this._read = function(n1) {
        debug('wrapped _read', n1);
        if (paused) {
            paused = false;
            stream.resume();
        }
    };
    return this;
};
if (typeof Symbol === 'function') Readable.prototype[Symbol.asyncIterator] = function() {
    if (createReadableStreamAsyncIterator === undefined) createReadableStreamAsyncIterator = require('./internal/streams/async_iterator');
    return createReadableStreamAsyncIterator(this);
};
Object.defineProperty(Readable.prototype, 'readableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.highWaterMark;
    }
});
Object.defineProperty(Readable.prototype, 'readableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState && this._readableState.buffer;
    }
});
Object.defineProperty(Readable.prototype, 'readableFlowing', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.flowing;
    },
    set: function set(state) {
        if (this._readableState) this._readableState.flowing = state;
    }
}); // exposed for testing purposes only.
Readable._fromList = fromList;
Object.defineProperty(Readable.prototype, 'readableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._readableState.length;
    }
}); // Pluck off n bytes from an array of buffers.
// Length is the combined lengths of all the buffers in the list.
// This function is designed to be inlinable, so please take care when making
// changes to the function body.
function fromList(n, state) {
    // nothing buffered
    if (state.length === 0) return null;
    var ret;
    if (state.objectMode) ret = state.buffer.shift();
    else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');
        else if (state.buffer.length === 1) ret = state.buffer.first();
        else ret = state.buffer.concat(state.length);
        state.buffer.clear();
    } else // read part of list
    ret = state.buffer.consume(n, state.decoder);
    return ret;
}
function endReadable(stream) {
    var state = stream._readableState;
    debug('endReadable', state.endEmitted);
    if (!state.endEmitted) {
        state.ended = true;
        process.nextTick(endReadableNT, state, stream);
    }
}
function endReadableNT(state, stream) {
    debug('endReadableNT', state.endEmitted, state.length); // Check that we didn't get one last unshift.
    if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
        if (state.autoDestroy) {
            // In case of duplex streams we need a way to detect
            // if the writable side is ready for autoDestroy as well
            var wState = stream._writableState;
            if (!wState || wState.autoDestroy && wState.finished) stream.destroy();
        }
    }
}
if (typeof Symbol === 'function') Readable.from = function(iterable, opts) {
    if (from === undefined) from = require('./internal/streams/from');
    return from(Readable, iterable, opts);
};
function indexOf(xs, x) {
    for(var i = 0, l = xs.length; i < l; i++){
        if (xs[i] === x) return i;
    }
    return -1;
}

},{"process":"glFWE","events":"3eABV","./internal/streams/stream":"cEJd3","buffer":"kPwYH","util":"lnuW3","./internal/streams/buffer_list":"ajcPl","./internal/streams/destroy":"fpPNg","./internal/streams/state":"60gNy","../errors":"bfOiO","inherits":"gmJTw","./_stream_duplex":"4z5jL","string_decoder/":"gW8Q4","./internal/streams/async_iterator":"dnqpI","./internal/streams/from":"cVUTt"}],"3eABV":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
var R = typeof Reflect === 'object' ? Reflect : null;
var ReflectApply = R && typeof R.apply === 'function' ? R.apply : function ReflectApply1(target, receiver, args) {
    return Function.prototype.apply.call(target, receiver, args);
};
var ReflectOwnKeys;
if (R && typeof R.ownKeys === 'function') ReflectOwnKeys = R.ownKeys;
else if (Object.getOwnPropertySymbols) ReflectOwnKeys = function ReflectOwnKeys1(target) {
    return Object.getOwnPropertyNames(target).concat(Object.getOwnPropertySymbols(target));
};
else ReflectOwnKeys = function ReflectOwnKeys2(target) {
    return Object.getOwnPropertyNames(target);
};
function ProcessEmitWarning(warning) {
    if (console && console.warn) console.warn(warning);
}
var NumberIsNaN = Number.isNaN || function NumberIsNaN1(value) {
    return value !== value;
};
function EventEmitter() {
    EventEmitter.init.call(this);
}
module.exports = EventEmitter;
module.exports.once = once1;
// Backwards-compat with node 0.10.x
EventEmitter.EventEmitter = EventEmitter;
EventEmitter.prototype._events = undefined;
EventEmitter.prototype._eventsCount = 0;
EventEmitter.prototype._maxListeners = undefined;
// By default EventEmitters will print a warning if more than 10 listeners are
// added to it. This is a useful default which helps finding memory leaks.
var defaultMaxListeners = 10;
function checkListener(listener) {
    if (typeof listener !== 'function') throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof listener);
}
Object.defineProperty(EventEmitter, 'defaultMaxListeners', {
    enumerable: true,
    get: function() {
        return defaultMaxListeners;
    },
    set: function(arg) {
        if (typeof arg !== 'number' || arg < 0 || NumberIsNaN(arg)) throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + arg + '.');
        defaultMaxListeners = arg;
    }
});
EventEmitter.init = function() {
    if (this._events === undefined || this._events === Object.getPrototypeOf(this)._events) {
        this._events = Object.create(null);
        this._eventsCount = 0;
    }
    this._maxListeners = this._maxListeners || undefined;
};
// Obviously not all Emitters should be limited to 10. This function allows
// that to be increased. Set to zero for unlimited.
EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
    if (typeof n !== 'number' || n < 0 || NumberIsNaN(n)) throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + n + '.');
    this._maxListeners = n;
    return this;
};
function _getMaxListeners(that) {
    if (that._maxListeners === undefined) return EventEmitter.defaultMaxListeners;
    return that._maxListeners;
}
EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
    return _getMaxListeners(this);
};
EventEmitter.prototype.emit = function emit(type) {
    var args = [];
    for(var i = 1; i < arguments.length; i++)args.push(arguments[i]);
    var doError = type === 'error';
    var events = this._events;
    if (events !== undefined) doError = doError && events.error === undefined;
    else if (!doError) return false;
    // If there is no 'error' event listener then throw.
    if (doError) {
        var er;
        if (args.length > 0) er = args[0];
        if (er instanceof Error) // Note: The comments on the `throw` lines are intentional, they show
        // up in Node's output if this results in an unhandled exception.
        throw er; // Unhandled 'error' event
        // At least give some kind of context to the user
        var err = new Error('Unhandled error.' + (er ? ' (' + er.message + ')' : ''));
        err.context = er;
        throw err; // Unhandled 'error' event
    }
    var handler = events[type];
    if (handler === undefined) return false;
    if (typeof handler === 'function') ReflectApply(handler, this, args);
    else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for(var i = 0; i < len; ++i)ReflectApply(listeners[i], this, args);
    }
    return true;
};
function _addListener(target, type, listener, prepend) {
    var m;
    var events;
    var existing;
    checkListener(listener);
    events = target._events;
    if (events === undefined) {
        events = target._events = Object.create(null);
        target._eventsCount = 0;
    } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener !== undefined) {
            target.emit('newListener', type, listener.listener ? listener.listener : listener);
            // Re-assign `events` because a newListener handler could have caused the
            // this._events to be assigned to a new object
            events = target._events;
        }
        existing = events[type];
    }
    if (existing === undefined) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
    } else {
        if (typeof existing === 'function') // Adding the second element, need to change to array.
        existing = events[type] = prepend ? [
            listener,
            existing
        ] : [
            existing,
            listener
        ];
        else if (prepend) existing.unshift(listener);
        else existing.push(listener);
        // Check for listener leak
        m = _getMaxListeners(target);
        if (m > 0 && existing.length > m && !existing.warned) {
            existing.warned = true;
            // No error code for this since it is a Warning
            // eslint-disable-next-line no-restricted-syntax
            var w = new Error('Possible EventEmitter memory leak detected. ' + existing.length + ' ' + String(type) + ' listeners ' + 'added. Use emitter.setMaxListeners() to ' + 'increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            ProcessEmitWarning(w);
        }
    }
    return target;
}
EventEmitter.prototype.addListener = function addListener(type, listener) {
    return _addListener(this, type, listener, false);
};
EventEmitter.prototype.on = EventEmitter.prototype.addListener;
EventEmitter.prototype.prependListener = function prependListener(type, listener) {
    return _addListener(this, type, listener, true);
};
function onceWrapper() {
    if (!this.fired) {
        this.target.removeListener(this.type, this.wrapFn);
        this.fired = true;
        if (arguments.length === 0) return this.listener.call(this.target);
        return this.listener.apply(this.target, arguments);
    }
}
function _onceWrap(target, type, listener) {
    var state = {
        fired: false,
        wrapFn: undefined,
        target: target,
        type: type,
        listener: listener
    };
    var wrapped = onceWrapper.bind(state);
    wrapped.listener = listener;
    state.wrapFn = wrapped;
    return wrapped;
}
EventEmitter.prototype.once = function once(type, listener) {
    checkListener(listener);
    this.on(type, _onceWrap(this, type, listener));
    return this;
};
EventEmitter.prototype.prependOnceListener = function prependOnceListener(type, listener) {
    checkListener(listener);
    this.prependListener(type, _onceWrap(this, type, listener));
    return this;
};
// Emits a 'removeListener' event if and only if the listener was removed.
EventEmitter.prototype.removeListener = function removeListener(type, listener) {
    var list, events, position, i, originalListener;
    checkListener(listener);
    events = this._events;
    if (events === undefined) return this;
    list = events[type];
    if (list === undefined) return this;
    if (list === listener || list.listener === listener) {
        if ((--this._eventsCount) === 0) this._events = Object.create(null);
        else {
            delete events[type];
            if (events.removeListener) this.emit('removeListener', type, list.listener || listener);
        }
    } else if (typeof list !== 'function') {
        position = -1;
        for(i = list.length - 1; i >= 0; i--)if (list[i] === listener || list[i].listener === listener) {
            originalListener = list[i].listener;
            position = i;
            break;
        }
        if (position < 0) return this;
        if (position === 0) list.shift();
        else spliceOne(list, position);
        if (list.length === 1) events[type] = list[0];
        if (events.removeListener !== undefined) this.emit('removeListener', type, originalListener || listener);
    }
    return this;
};
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.removeAllListeners = function removeAllListeners(type) {
    var listeners, events, i;
    events = this._events;
    if (events === undefined) return this;
    // not listening for removeListener, no need to emit
    if (events.removeListener === undefined) {
        if (arguments.length === 0) {
            this._events = Object.create(null);
            this._eventsCount = 0;
        } else if (events[type] !== undefined) {
            if ((--this._eventsCount) === 0) this._events = Object.create(null);
            else delete events[type];
        }
        return this;
    }
    // emit removeListener for all listeners on all events
    if (arguments.length === 0) {
        var keys = Object.keys(events);
        var key;
        for(i = 0; i < keys.length; ++i){
            key = keys[i];
            if (key === 'removeListener') continue;
            this.removeAllListeners(key);
        }
        this.removeAllListeners('removeListener');
        this._events = Object.create(null);
        this._eventsCount = 0;
        return this;
    }
    listeners = events[type];
    if (typeof listeners === 'function') this.removeListener(type, listeners);
    else if (listeners !== undefined) // LIFO order
    for(i = listeners.length - 1; i >= 0; i--)this.removeListener(type, listeners[i]);
    return this;
};
function _listeners(target, type, unwrap) {
    var events = target._events;
    if (events === undefined) return [];
    var evlistener = events[type];
    if (evlistener === undefined) return [];
    if (typeof evlistener === 'function') return unwrap ? [
        evlistener.listener || evlistener
    ] : [
        evlistener
    ];
    return unwrap ? unwrapListeners(evlistener) : arrayClone(evlistener, evlistener.length);
}
EventEmitter.prototype.listeners = function listeners(type) {
    return _listeners(this, type, true);
};
EventEmitter.prototype.rawListeners = function rawListeners(type) {
    return _listeners(this, type, false);
};
EventEmitter.listenerCount = function(emitter, type) {
    if (typeof emitter.listenerCount === 'function') return emitter.listenerCount(type);
    else return listenerCount.call(emitter, type);
};
EventEmitter.prototype.listenerCount = listenerCount;
function listenerCount(type) {
    var events = this._events;
    if (events !== undefined) {
        var evlistener = events[type];
        if (typeof evlistener === 'function') return 1;
        else if (evlistener !== undefined) return evlistener.length;
    }
    return 0;
}
EventEmitter.prototype.eventNames = function eventNames() {
    return this._eventsCount > 0 ? ReflectOwnKeys(this._events) : [];
};
function arrayClone(arr, n) {
    var copy = new Array(n);
    for(var i = 0; i < n; ++i)copy[i] = arr[i];
    return copy;
}
function spliceOne(list, index) {
    for(; index + 1 < list.length; index++)list[index] = list[index + 1];
    list.pop();
}
function unwrapListeners(arr) {
    var ret = new Array(arr.length);
    for(var i = 0; i < ret.length; ++i)ret[i] = arr[i].listener || arr[i];
    return ret;
}
function once1(emitter, name) {
    return new Promise(function(resolve, reject) {
        function errorListener(err) {
            emitter.removeListener(name, resolver);
            reject(err);
        }
        function resolver() {
            if (typeof emitter.removeListener === 'function') emitter.removeListener('error', errorListener);
            resolve([].slice.call(arguments));
        }
        eventTargetAgnosticAddListener(emitter, name, resolver, {
            once: true
        });
        if (name !== 'error') addErrorHandlerIfEventEmitter(emitter, errorListener, {
            once: true
        });
    });
}
function addErrorHandlerIfEventEmitter(emitter, handler, flags) {
    if (typeof emitter.on === 'function') eventTargetAgnosticAddListener(emitter, 'error', handler, flags);
}
function eventTargetAgnosticAddListener(emitter, name, listener, flags) {
    if (typeof emitter.on === 'function') {
        if (flags.once) emitter.once(name, listener);
        else emitter.on(name, listener);
    } else if (typeof emitter.addEventListener === 'function') // EventTarget does not have `error` event semantics like Node
    // EventEmitters, we do not listen for `error` events here.
    emitter.addEventListener(name, function wrapListener(arg) {
        // IE does not have builtin `{ once: true }` support so we
        // have to do it manually.
        if (flags.once) emitter.removeEventListener(name, wrapListener);
        listener(arg);
    });
    else throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof emitter);
}

},{}],"cEJd3":[function(require,module,exports) {
module.exports = require('events').EventEmitter;

},{"events":"3eABV"}],"ajcPl":[function(require,module,exports) {
'use strict';
function ownKeys(object, enumerableOnly) {
    var keys = Object.keys(object);
    if (Object.getOwnPropertySymbols) {
        var symbols = Object.getOwnPropertySymbols(object);
        if (enumerableOnly) symbols = symbols.filter(function(sym) {
            return Object.getOwnPropertyDescriptor(object, sym).enumerable;
        });
        keys.push.apply(keys, symbols);
    }
    return keys;
}
function _objectSpread(target) {
    for(var i = 1; i < arguments.length; i++){
        var source = arguments[i] != null ? arguments[i] : {
        };
        if (i % 2) ownKeys(Object(source), true).forEach(function(key) {
            _defineProperty(target, key, source[key]);
        });
        else if (Object.getOwnPropertyDescriptors) Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
        else ownKeys(Object(source)).forEach(function(key) {
            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
        });
    }
    return target;
}
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) throw new TypeError("Cannot call a class as a function");
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _createClass(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
var _require = require('buffer'), Buffer = _require.Buffer;
var _require2 = require('util'), inspect = _require2.inspect;
var custom = inspect && inspect.custom || 'inspect';
function copyBuffer(src, target, offset) {
    Buffer.prototype.copy.call(src, target, offset);
}
module.exports = /*#__PURE__*/ (function() {
    function BufferList() {
        _classCallCheck(this, BufferList);
        this.head = null;
        this.tail = null;
        this.length = 0;
    }
    _createClass(BufferList, [
        {
            key: "push",
            value: function push(v) {
                var entry = {
                    data: v,
                    next: null
                };
                if (this.length > 0) this.tail.next = entry;
                else this.head = entry;
                this.tail = entry;
                ++this.length;
            }
        },
        {
            key: "unshift",
            value: function unshift(v) {
                var entry = {
                    data: v,
                    next: this.head
                };
                if (this.length === 0) this.tail = entry;
                this.head = entry;
                ++this.length;
            }
        },
        {
            key: "shift",
            value: function shift() {
                if (this.length === 0) return;
                var ret = this.head.data;
                if (this.length === 1) this.head = this.tail = null;
                else this.head = this.head.next;
                --this.length;
                return ret;
            }
        },
        {
            key: "clear",
            value: function clear() {
                this.head = this.tail = null;
                this.length = 0;
            }
        },
        {
            key: "join",
            value: function join(s) {
                if (this.length === 0) return '';
                var p = this.head;
                var ret = '' + p.data;
                while(p = p.next)ret += s + p.data;
                return ret;
            }
        },
        {
            key: "concat",
            value: function concat(n) {
                if (this.length === 0) return Buffer.alloc(0);
                var ret = Buffer.allocUnsafe(n >>> 0);
                var p = this.head;
                var i = 0;
                while(p){
                    copyBuffer(p.data, ret, i);
                    i += p.data.length;
                    p = p.next;
                }
                return ret;
            } // Consumes a specified amount of bytes or characters from the buffered data.
        },
        {
            key: "consume",
            value: function consume(n, hasStrings) {
                var ret;
                if (n < this.head.data.length) {
                    // `slice` is the same for buffers and strings.
                    ret = this.head.data.slice(0, n);
                    this.head.data = this.head.data.slice(n);
                } else if (n === this.head.data.length) // First chunk is a perfect match.
                ret = this.shift();
                else // Result spans more than one buffer.
                ret = hasStrings ? this._getString(n) : this._getBuffer(n);
                return ret;
            }
        },
        {
            key: "first",
            value: function first() {
                return this.head.data;
            } // Consumes a specified amount of characters from the buffered data.
        },
        {
            key: "_getString",
            value: function _getString(n) {
                var p = this.head;
                var c = 1;
                var ret = p.data;
                n -= ret.length;
                while(p = p.next){
                    var str = p.data;
                    var nb = n > str.length ? str.length : n;
                    if (nb === str.length) ret += str;
                    else ret += str.slice(0, n);
                    n -= nb;
                    if (n === 0) {
                        if (nb === str.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = str.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Consumes a specified amount of bytes from the buffered data.
        },
        {
            key: "_getBuffer",
            value: function _getBuffer(n) {
                var ret = Buffer.allocUnsafe(n);
                var p = this.head;
                var c = 1;
                p.data.copy(ret);
                n -= p.data.length;
                while(p = p.next){
                    var buf = p.data;
                    var nb = n > buf.length ? buf.length : n;
                    buf.copy(ret, ret.length - n, 0, nb);
                    n -= nb;
                    if (n === 0) {
                        if (nb === buf.length) {
                            ++c;
                            if (p.next) this.head = p.next;
                            else this.head = this.tail = null;
                        } else {
                            this.head = p;
                            p.data = buf.slice(nb);
                        }
                        break;
                    }
                    ++c;
                }
                this.length -= c;
                return ret;
            } // Make sure the linked list only shows the minimal necessary information.
        },
        {
            key: custom,
            value: function value(_, options) {
                return inspect(this, _objectSpread({
                }, options, {
                    // Only inspect one level.
                    depth: 0,
                    // It should not recurse.
                    customInspect: false
                }));
            }
        }
    ]);
    return BufferList;
})();

},{"buffer":"kPwYH","util":"lnuW3"}],"fpPNg":[function(require,module,exports) {
var process = require("process");
'use strict'; // undocumented cb() API, needed for core, not for public API
function destroy(err, cb) {
    var _this = this;
    var readableDestroyed = this._readableState && this._readableState.destroyed;
    var writableDestroyed = this._writableState && this._writableState.destroyed;
    if (readableDestroyed || writableDestroyed) {
        if (cb) cb(err);
        else if (err) {
            if (!this._writableState) process.nextTick(emitErrorNT, this, err);
            else if (!this._writableState.errorEmitted) {
                this._writableState.errorEmitted = true;
                process.nextTick(emitErrorNT, this, err);
            }
        }
        return this;
    } // we set destroyed to true before firing error callbacks in order
    // to make it re-entrance safe in case destroy() is called within callbacks
    if (this._readableState) this._readableState.destroyed = true;
     // if this is a duplex stream mark the writable part as destroyed as well
    if (this._writableState) this._writableState.destroyed = true;
    this._destroy(err || null, function(err1) {
        if (!cb && err1) {
            if (!_this._writableState) process.nextTick(emitErrorAndCloseNT, _this, err1);
            else if (!_this._writableState.errorEmitted) {
                _this._writableState.errorEmitted = true;
                process.nextTick(emitErrorAndCloseNT, _this, err1);
            } else process.nextTick(emitCloseNT, _this);
        } else if (cb) {
            process.nextTick(emitCloseNT, _this);
            cb(err1);
        } else process.nextTick(emitCloseNT, _this);
    });
    return this;
}
function emitErrorAndCloseNT(self, err) {
    emitErrorNT(self, err);
    emitCloseNT(self);
}
function emitCloseNT(self) {
    if (self._writableState && !self._writableState.emitClose) return;
    if (self._readableState && !self._readableState.emitClose) return;
    self.emit('close');
}
function undestroy() {
    if (this._readableState) {
        this._readableState.destroyed = false;
        this._readableState.reading = false;
        this._readableState.ended = false;
        this._readableState.endEmitted = false;
    }
    if (this._writableState) {
        this._writableState.destroyed = false;
        this._writableState.ended = false;
        this._writableState.ending = false;
        this._writableState.finalCalled = false;
        this._writableState.prefinished = false;
        this._writableState.finished = false;
        this._writableState.errorEmitted = false;
    }
}
function emitErrorNT(self, err) {
    self.emit('error', err);
}
function errorOrDestroy(stream, err) {
    // We have tests that rely on errors being emitted
    // in the same tick, so changing this is semver major.
    // For now when you opt-in to autoDestroy we allow
    // the error to be emitted nextTick. In a future
    // semver major update we should change the default to this.
    var rState = stream._readableState;
    var wState = stream._writableState;
    if (rState && rState.autoDestroy || wState && wState.autoDestroy) stream.destroy(err);
    else stream.emit('error', err);
}
module.exports = {
    destroy: destroy,
    undestroy: undestroy,
    errorOrDestroy: errorOrDestroy
};

},{"process":"glFWE"}],"60gNy":[function(require,module,exports) {
'use strict';
var ERR_INVALID_OPT_VALUE = require('../../../errors').codes.ERR_INVALID_OPT_VALUE;
function highWaterMarkFrom(options, isDuplex, duplexKey) {
    return options.highWaterMark != null ? options.highWaterMark : isDuplex ? options[duplexKey] : null;
}
function getHighWaterMark(state, options, duplexKey, isDuplex) {
    var hwm = highWaterMarkFrom(options, isDuplex, duplexKey);
    if (hwm != null) {
        if (!(isFinite(hwm) && Math.floor(hwm) === hwm) || hwm < 0) {
            var name = isDuplex ? duplexKey : 'highWaterMark';
            throw new ERR_INVALID_OPT_VALUE(name, hwm);
        }
        return Math.floor(hwm);
    } // Default value
    return state.objectMode ? 16 : 16384;
}
module.exports = {
    getHighWaterMark: getHighWaterMark
};

},{"../../../errors":"bfOiO"}],"bfOiO":[function(require,module,exports) {
'use strict';
function _inheritsLoose(subClass, superClass) {
    subClass.prototype = Object.create(superClass.prototype);
    subClass.prototype.constructor = subClass;
    subClass.__proto__ = superClass;
}
var codes = {
};
function createErrorType(code, message, Base) {
    if (!Base) Base = Error;
    function getMessage(arg1, arg2, arg3) {
        if (typeof message === 'string') return message;
        else return message(arg1, arg2, arg3);
    }
    var NodeError1 = /*#__PURE__*/ function(_Base) {
        _inheritsLoose(NodeError2, _Base);
        function NodeError2(arg1, arg2, arg3) {
            return _Base.call(this, getMessage(arg1, arg2, arg3)) || this;
        }
        return NodeError2;
    }(Base);
    NodeError1.prototype.name = Base.name;
    NodeError1.prototype.code = code;
    codes[code] = NodeError1;
} // https://github.com/nodejs/node/blob/v10.8.0/lib/internal/errors.js
function oneOf(expected, thing) {
    if (Array.isArray(expected)) {
        var len = expected.length;
        expected = expected.map(function(i) {
            return String(i);
        });
        if (len > 2) return "one of ".concat(thing, " ").concat(expected.slice(0, len - 1).join(', '), ", or ") + expected[len - 1];
        else if (len === 2) return "one of ".concat(thing, " ").concat(expected[0], " or ").concat(expected[1]);
        else return "of ".concat(thing, " ").concat(expected[0]);
    } else return "of ".concat(thing, " ").concat(String(expected));
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/startsWith
function startsWith(str, search, pos) {
    return str.substr(!pos || pos < 0 ? 0 : +pos, search.length) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/endsWith
function endsWith(str, search, this_len) {
    if (this_len === undefined || this_len > str.length) this_len = str.length;
    return str.substring(this_len - search.length, this_len) === search;
} // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/includes
function includes(str, search, start) {
    if (typeof start !== 'number') start = 0;
    if (start + search.length > str.length) return false;
    else return str.indexOf(search, start) !== -1;
}
createErrorType('ERR_INVALID_OPT_VALUE', function(name, value) {
    return 'The value "' + value + '" is invalid for option "' + name + '"';
}, TypeError);
createErrorType('ERR_INVALID_ARG_TYPE', function(name, expected, actual) {
    // determiner: 'must be' or 'must not be'
    var determiner;
    if (typeof expected === 'string' && startsWith(expected, 'not ')) {
        determiner = 'must not be';
        expected = expected.replace(/^not /, '');
    } else determiner = 'must be';
    var msg;
    if (endsWith(name, ' argument')) // For cases like 'first argument'
    msg = "The ".concat(name, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    else {
        var type = includes(name, '.') ? 'property' : 'argument';
        msg = "The \"".concat(name, "\" ").concat(type, " ").concat(determiner, " ").concat(oneOf(expected, 'type'));
    }
    msg += ". Received type ".concat(typeof actual);
    return msg;
}, TypeError);
createErrorType('ERR_STREAM_PUSH_AFTER_EOF', 'stream.push() after EOF');
createErrorType('ERR_METHOD_NOT_IMPLEMENTED', function(name) {
    return 'The ' + name + ' method is not implemented';
});
createErrorType('ERR_STREAM_PREMATURE_CLOSE', 'Premature close');
createErrorType('ERR_STREAM_DESTROYED', function(name) {
    return 'Cannot call ' + name + ' after a stream was destroyed';
});
createErrorType('ERR_MULTIPLE_CALLBACK', 'Callback called multiple times');
createErrorType('ERR_STREAM_CANNOT_PIPE', 'Cannot pipe, not readable');
createErrorType('ERR_STREAM_WRITE_AFTER_END', 'write after end');
createErrorType('ERR_STREAM_NULL_VALUES', 'May not write null values to stream', TypeError);
createErrorType('ERR_UNKNOWN_ENCODING', function(arg) {
    return 'Unknown encoding: ' + arg;
}, TypeError);
createErrorType('ERR_STREAM_UNSHIFT_AFTER_END_EVENT', 'stream.unshift() after end event');
module.exports.codes = codes;

},{}],"4z5jL":[function(require,module,exports) {
var process = require("process");
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a duplex stream is just a stream that is both readable and writable.
// Since JS doesn't have multiple prototypal inheritance, this class
// prototypally inherits from Readable, and then parasitically from
// Writable.
'use strict';
/*<replacement>*/ var objectKeys = Object.keys || function(obj) {
    var keys = [];
    for(var key in obj)keys.push(key);
    return keys;
};
/*</replacement>*/ module.exports = Duplex;
var Readable = require('./_stream_readable');
var Writable = require('./_stream_writable');
require('inherits')(Duplex, Readable);
// Allow the keys array to be GC'ed.
var keys = objectKeys(Writable.prototype);
for(var v = 0; v < keys.length; v++){
    var method = keys[v];
    if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
}
function Duplex(options) {
    if (!(this instanceof Duplex)) return new Duplex(options);
    Readable.call(this, options);
    Writable.call(this, options);
    this.allowHalfOpen = true;
    if (options) {
        if (options.readable === false) this.readable = false;
        if (options.writable === false) this.writable = false;
        if (options.allowHalfOpen === false) {
            this.allowHalfOpen = false;
            this.once('end', onend);
        }
    }
}
Object.defineProperty(Duplex.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
});
Object.defineProperty(Duplex.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
Object.defineProperty(Duplex.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
}); // the no-half-open enforcer
function onend() {
    // If the writable side ended, then we're ok.
    if (this._writableState.ended) return; // no more data can be written.
    // But allow more writes to happen in this tick.
    process.nextTick(onEndNT, this);
}
function onEndNT(self) {
    self.end();
}
Object.defineProperty(Duplex.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._readableState === undefined || this._writableState === undefined) return false;
        return this._readableState.destroyed && this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (this._readableState === undefined || this._writableState === undefined) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._readableState.destroyed = value;
        this._writableState.destroyed = value;
    }
});

},{"process":"glFWE","./_stream_readable":"is8RM","./_stream_writable":"5umoS","inherits":"gmJTw"}],"5umoS":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// A bit simpler than readable streams.
// Implement an async ._write(chunk, encoding, cb), and it'll handle all
// the drain event emission and buffering.
'use strict';
module.exports = Writable;
/* <replacement> */ function WriteReq(chunk, encoding, cb) {
    this.chunk = chunk;
    this.encoding = encoding;
    this.callback = cb;
    this.next = null;
} // It seems a linked list but it is not
// there will be only 2 of these for each stream
function CorkedRequest(state) {
    var _this = this;
    this.next = null;
    this.entry = null;
    this.finish = function() {
        onCorkedFinish(_this, state);
    };
}
/* </replacement> */ /*<replacement>*/ var Duplex;
/*</replacement>*/ Writable.WritableState = WritableState;
/*<replacement>*/ var internalUtil = {
    deprecate: require('util-deprecate')
};
/*</replacement>*/ /*<replacement>*/ var Stream = require('./internal/streams/stream');
/*</replacement>*/ var Buffer = require('buffer').Buffer;
var OurUint8Array = global.Uint8Array || function() {
};
function _uint8ArrayToBuffer(chunk) {
    return Buffer.from(chunk);
}
function _isUint8Array(obj) {
    return Buffer.isBuffer(obj) || obj instanceof OurUint8Array;
}
var destroyImpl = require('./internal/streams/destroy');
var _require = require('./internal/streams/state'), getHighWaterMark = _require.getHighWaterMark;
var _require$codes = require('../errors').codes, ERR_INVALID_ARG_TYPE = _require$codes.ERR_INVALID_ARG_TYPE, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_STREAM_CANNOT_PIPE = _require$codes.ERR_STREAM_CANNOT_PIPE, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED, ERR_STREAM_NULL_VALUES = _require$codes.ERR_STREAM_NULL_VALUES, ERR_STREAM_WRITE_AFTER_END = _require$codes.ERR_STREAM_WRITE_AFTER_END, ERR_UNKNOWN_ENCODING = _require$codes.ERR_UNKNOWN_ENCODING;
var errorOrDestroy = destroyImpl.errorOrDestroy;
require('inherits')(Writable, Stream);
function nop() {
}
function WritableState(options, stream, isDuplex) {
    Duplex = Duplex || require('./_stream_duplex');
    options = options || {
    }; // Duplex streams are both readable and writable, but share
    // the same options object.
    // However, some cases require setting options to different
    // values for the readable and the writable sides of the duplex stream,
    // e.g. options.readableObjectMode vs. options.writableObjectMode, etc.
    if (typeof isDuplex !== 'boolean') isDuplex = stream instanceof Duplex; // object stream flag to indicate whether or not this stream
    // contains buffers or objects.
    this.objectMode = !!options.objectMode;
    if (isDuplex) this.objectMode = this.objectMode || !!options.writableObjectMode; // the point at which write() starts returning false
    // Note: 0 is a valid value, means that we always return false if
    // the entire buffer is not flushed immediately on write()
    this.highWaterMark = getHighWaterMark(this, options, 'writableHighWaterMark', isDuplex); // if _final has been called
    this.finalCalled = false; // drain event flag.
    this.needDrain = false; // at the start of calling end()
    this.ending = false; // when end() has been called, and returned
    this.ended = false; // when 'finish' is emitted
    this.finished = false; // has it been destroyed
    this.destroyed = false; // should we decode strings into buffers before passing to _write?
    // this is here so that some node-core streams can optimize string
    // handling at a lower level.
    var noDecode = options.decodeStrings === false;
    this.decodeStrings = !noDecode; // Crypto is kind of old and crusty.  Historically, its default string
    // encoding is 'binary' so we have to make this configurable.
    // Everything else in the universe uses 'utf8', though.
    this.defaultEncoding = options.defaultEncoding || 'utf8'; // not an actual buffer we keep track of, but a measurement
    // of how much we're waiting to get pushed to some underlying
    // socket or file.
    this.length = 0; // a flag to see when we're in the middle of a write.
    this.writing = false; // when true all writes will be buffered until .uncork() call
    this.corked = 0; // a flag to be able to tell if the onwrite cb is called immediately,
    // or on a later tick.  We set this to true at first, because any
    // actions that shouldn't happen until "later" should generally also
    // not happen before the first write call.
    this.sync = true; // a flag to know if we're processing previously buffered items, which
    // may call the _write() callback in the same tick, so that we don't
    // end up in an overlapped onwrite situation.
    this.bufferProcessing = false; // the callback that's passed to _write(chunk,cb)
    this.onwrite = function(er) {
        onwrite(stream, er);
    }; // the callback that the user supplies to write(chunk,encoding,cb)
    this.writecb = null; // the amount that is being written when _write is called.
    this.writelen = 0;
    this.bufferedRequest = null;
    this.lastBufferedRequest = null; // number of pending user-supplied write callbacks
    // this must be 0 before 'finish' can be emitted
    this.pendingcb = 0; // emit prefinish if the only thing we're waiting for is _write cbs
    // This is relevant for synchronous Transform streams
    this.prefinished = false; // True if the error was already emitted and should not be thrown again
    this.errorEmitted = false; // Should close be emitted on destroy. Defaults to true.
    this.emitClose = options.emitClose !== false; // Should .destroy() be called after 'finish' (and potentially 'end')
    this.autoDestroy = !!options.autoDestroy; // count buffered requests
    this.bufferedRequestCount = 0; // allocate the first CorkedRequest, there is always
    // one allocated and free to use, and we maintain at most two
    this.corkedRequestsFree = new CorkedRequest(this);
}
WritableState.prototype.getBuffer = function getBuffer() {
    var current = this.bufferedRequest;
    var out = [];
    while(current){
        out.push(current);
        current = current.next;
    }
    return out;
};
(function() {
    try {
        Object.defineProperty(WritableState.prototype, 'buffer', {
            get: internalUtil.deprecate(function writableStateBufferGetter() {
                return this.getBuffer();
            }, "_writableState.buffer is deprecated. Use _writableState.getBuffer instead.", 'DEP0003')
        });
    } catch (_) {
    }
})(); // Test _writableState for inheritance to account for Duplex streams,
// whose prototype chain only points to Readable.
var realHasInstance;
if (typeof Symbol === 'function' && Symbol.hasInstance && typeof Function.prototype[Symbol.hasInstance] === 'function') {
    realHasInstance = Function.prototype[Symbol.hasInstance];
    Object.defineProperty(Writable, Symbol.hasInstance, {
        value: function value(object) {
            if (realHasInstance.call(this, object)) return true;
            if (this !== Writable) return false;
            return object && object._writableState instanceof WritableState;
        }
    });
} else realHasInstance = function realHasInstance1(object) {
    return object instanceof this;
};
function Writable(options) {
    Duplex = Duplex || require('./_stream_duplex'); // Writable ctor is applied to Duplexes, too.
    // `realHasInstance` is necessary because using plain `instanceof`
    // would return false, as no `_writableState` property is attached.
    // Trying to use the custom `instanceof` for Writable here will also break the
    // Node.js LazyTransform implementation, which has a non-trivial getter for
    // `_writableState` that would lead to infinite recursion.
    // Checking for a Stream.Duplex instance is faster here instead of inside
    // the WritableState constructor, at least with V8 6.5
    var isDuplex = this instanceof Duplex;
    if (!isDuplex && !realHasInstance.call(Writable, this)) return new Writable(options);
    this._writableState = new WritableState(options, this, isDuplex); // legacy.
    this.writable = true;
    if (options) {
        if (typeof options.write === 'function') this._write = options.write;
        if (typeof options.writev === 'function') this._writev = options.writev;
        if (typeof options.destroy === 'function') this._destroy = options.destroy;
        if (typeof options.final === 'function') this._final = options.final;
    }
    Stream.call(this);
} // Otherwise people can pipe Writable streams, which is just wrong.
Writable.prototype.pipe = function() {
    errorOrDestroy(this, new ERR_STREAM_CANNOT_PIPE());
};
function writeAfterEnd(stream, cb) {
    var er = new ERR_STREAM_WRITE_AFTER_END(); // TODO: defer error events consistently everywhere, not just the cb
    errorOrDestroy(stream, er);
    process.nextTick(cb, er);
} // Checks that a user-supplied chunk is valid, especially for the particular
// mode the stream is in. Currently this means that `null` is never accepted
// and undefined/non-string values are only allowed in object mode.
function validChunk(stream, state, chunk, cb) {
    var er;
    if (chunk === null) er = new ERR_STREAM_NULL_VALUES();
    else if (typeof chunk !== 'string' && !state.objectMode) er = new ERR_INVALID_ARG_TYPE('chunk', [
        'string',
        'Buffer'
    ], chunk);
    if (er) {
        errorOrDestroy(stream, er);
        process.nextTick(cb, er);
        return false;
    }
    return true;
}
Writable.prototype.write = function(chunk, encoding, cb) {
    var state = this._writableState;
    var ret = false;
    var isBuf = !state.objectMode && _isUint8Array(chunk);
    if (isBuf && !Buffer.isBuffer(chunk)) chunk = _uint8ArrayToBuffer(chunk);
    if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (isBuf) encoding = 'buffer';
    else if (!encoding) encoding = state.defaultEncoding;
    if (typeof cb !== 'function') cb = nop;
    if (state.ending) writeAfterEnd(this, cb);
    else if (isBuf || validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, isBuf, chunk, encoding, cb);
    }
    return ret;
};
Writable.prototype.cork = function() {
    this._writableState.corked++;
};
Writable.prototype.uncork = function() {
    var state = this._writableState;
    if (state.corked) {
        state.corked--;
        if (!state.writing && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
    }
};
Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
    // node::ParseEncoding() requires lower case.
    if (typeof encoding === 'string') encoding = encoding.toLowerCase();
    if (!([
        'hex',
        'utf8',
        'utf-8',
        'ascii',
        'binary',
        'base64',
        'ucs2',
        'ucs-2',
        'utf16le',
        'utf-16le',
        'raw'
    ].indexOf((encoding + '').toLowerCase()) > -1)) throw new ERR_UNKNOWN_ENCODING(encoding);
    this._writableState.defaultEncoding = encoding;
    return this;
};
Object.defineProperty(Writable.prototype, 'writableBuffer', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState && this._writableState.getBuffer();
    }
});
function decodeChunk(state, chunk, encoding) {
    if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') chunk = Buffer.from(chunk, encoding);
    return chunk;
}
Object.defineProperty(Writable.prototype, 'writableHighWaterMark', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.highWaterMark;
    }
}); // if we're already writing something, then just put this
// in the queue, and wait our turn.  Otherwise, call _write
// If we return false, then we need a drain event, so set that flag.
function writeOrBuffer(stream, state, isBuf, chunk, encoding, cb) {
    if (!isBuf) {
        var newChunk = decodeChunk(state, chunk, encoding);
        if (chunk !== newChunk) {
            isBuf = true;
            encoding = 'buffer';
            chunk = newChunk;
        }
    }
    var len = state.objectMode ? 1 : chunk.length;
    state.length += len;
    var ret = state.length < state.highWaterMark; // we must ensure that previous needDrain will not be reset to false.
    if (!ret) state.needDrain = true;
    if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = {
            chunk: chunk,
            encoding: encoding,
            isBuf: isBuf,
            callback: cb,
            next: null
        };
        if (last) last.next = state.lastBufferedRequest;
        else state.bufferedRequest = state.lastBufferedRequest;
        state.bufferedRequestCount += 1;
    } else doWrite(stream, state, false, len, chunk, encoding, cb);
    return ret;
}
function doWrite(stream, state, writev, len, chunk, encoding, cb) {
    state.writelen = len;
    state.writecb = cb;
    state.writing = true;
    state.sync = true;
    if (state.destroyed) state.onwrite(new ERR_STREAM_DESTROYED('write'));
    else if (writev) stream._writev(chunk, state.onwrite);
    else stream._write(chunk, encoding, state.onwrite);
    state.sync = false;
}
function onwriteError(stream, state, sync, er, cb) {
    --state.pendingcb;
    if (sync) {
        // defer the callback if we are being called synchronously
        // to avoid piling up things on the stack
        process.nextTick(cb, er); // this can emit finish, and it will always happen
        // after error
        process.nextTick(finishMaybe, stream, state);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er);
    } else {
        // the caller expect this to happen before if
        // it is async
        cb(er);
        stream._writableState.errorEmitted = true;
        errorOrDestroy(stream, er); // this can emit finish, but finish must
        // always follow error
        finishMaybe(stream, state);
    }
}
function onwriteStateUpdate(state) {
    state.writing = false;
    state.writecb = null;
    state.length -= state.writelen;
    state.writelen = 0;
}
function onwrite(stream, er) {
    var state = stream._writableState;
    var sync = state.sync;
    var cb = state.writecb;
    if (typeof cb !== 'function') throw new ERR_MULTIPLE_CALLBACK();
    onwriteStateUpdate(state);
    if (er) onwriteError(stream, state, sync, er, cb);
    else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state) || stream.destroyed;
        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) clearBuffer(stream, state);
        if (sync) process.nextTick(afterWrite, stream, state, finished, cb);
        else afterWrite(stream, state, finished, cb);
    }
}
function afterWrite(stream, state, finished, cb) {
    if (!finished) onwriteDrain(stream, state);
    state.pendingcb--;
    cb();
    finishMaybe(stream, state);
} // Must force callback to be called on nextTick, so that we don't
// emit 'drain' before the write() consumer gets the 'false' return
// value, and has a chance to attach a 'drain' listener.
function onwriteDrain(stream, state) {
    if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
    }
} // if there's something in the buffer waiting, then process it
function clearBuffer(stream, state) {
    state.bufferProcessing = true;
    var entry = state.bufferedRequest;
    if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;
        var count = 0;
        var allBuffers = true;
        while(entry){
            buffer[count] = entry;
            if (!entry.isBuf) allBuffers = false;
            entry = entry.next;
            count += 1;
        }
        buffer.allBuffers = allBuffers;
        doWrite(stream, state, true, state.length, buffer, '', holder.finish); // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
            state.corkedRequestsFree = holder.next;
            holder.next = null;
        } else state.corkedRequestsFree = new CorkedRequest(state);
        state.bufferedRequestCount = 0;
    } else {
        // Slow case, write chunks one-by-one
        while(entry){
            var chunk = entry.chunk;
            var encoding = entry.encoding;
            var cb = entry.callback;
            var len = state.objectMode ? 1 : chunk.length;
            doWrite(stream, state, false, len, chunk, encoding, cb);
            entry = entry.next;
            state.bufferedRequestCount--; // if we didn't call the onwrite immediately, then
            // it means that we need to wait until it does.
            // also, that means that the chunk and cb are currently
            // being processed, so move the buffer counter past them.
            if (state.writing) break;
        }
        if (entry === null) state.lastBufferedRequest = null;
    }
    state.bufferedRequest = entry;
    state.bufferProcessing = false;
}
Writable.prototype._write = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_write()'));
};
Writable.prototype._writev = null;
Writable.prototype.end = function(chunk, encoding, cb) {
    var state = this._writableState;
    if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
    } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
    }
    if (chunk !== null && chunk !== undefined) this.write(chunk, encoding); // .end() fully uncorks
    if (state.corked) {
        state.corked = 1;
        this.uncork();
    } // ignore unnecessary end() calls.
    if (!state.ending) endWritable(this, state, cb);
    return this;
};
Object.defineProperty(Writable.prototype, 'writableLength', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        return this._writableState.length;
    }
});
function needFinish(state) {
    return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
}
function callFinal(stream, state) {
    stream._final(function(err) {
        state.pendingcb--;
        if (err) errorOrDestroy(stream, err);
        state.prefinished = true;
        stream.emit('prefinish');
        finishMaybe(stream, state);
    });
}
function prefinish(stream, state) {
    if (!state.prefinished && !state.finalCalled) {
        if (typeof stream._final === 'function' && !state.destroyed) {
            state.pendingcb++;
            state.finalCalled = true;
            process.nextTick(callFinal, stream, state);
        } else {
            state.prefinished = true;
            stream.emit('prefinish');
        }
    }
}
function finishMaybe(stream, state) {
    var need = needFinish(state);
    if (need) {
        prefinish(stream, state);
        if (state.pendingcb === 0) {
            state.finished = true;
            stream.emit('finish');
            if (state.autoDestroy) {
                // In case of duplex streams we need a way to detect
                // if the readable side is ready for autoDestroy as well
                var rState = stream._readableState;
                if (!rState || rState.autoDestroy && rState.endEmitted) stream.destroy();
            }
        }
    }
    return need;
}
function endWritable(stream, state, cb) {
    state.ending = true;
    finishMaybe(stream, state);
    if (cb) {
        if (state.finished) process.nextTick(cb);
        else stream.once('finish', cb);
    }
    state.ended = true;
    stream.writable = false;
}
function onCorkedFinish(corkReq, state, err) {
    var entry = corkReq.entry;
    corkReq.entry = null;
    while(entry){
        var cb = entry.callback;
        state.pendingcb--;
        cb(err);
        entry = entry.next;
    } // reuse the free corkReq.
    state.corkedRequestsFree.next = corkReq;
}
Object.defineProperty(Writable.prototype, 'destroyed', {
    // making it explicit this property is not enumerable
    // because otherwise some prototype manipulation in
    // userland will fail
    enumerable: false,
    get: function get() {
        if (this._writableState === undefined) return false;
        return this._writableState.destroyed;
    },
    set: function set(value) {
        // we ignore the value if the stream
        // has not been initialized yet
        if (!this._writableState) return;
         // backward compatibility, the user is explicitly
        // managing destroyed
        this._writableState.destroyed = value;
    }
});
Writable.prototype.destroy = destroyImpl.destroy;
Writable.prototype._undestroy = destroyImpl.undestroy;
Writable.prototype._destroy = function(err, cb) {
    cb(err);
};

},{"process":"glFWE","util-deprecate":"7CCJs","./internal/streams/stream":"cEJd3","buffer":"kPwYH","./internal/streams/destroy":"fpPNg","./internal/streams/state":"60gNy","../errors":"bfOiO","inherits":"gmJTw","./_stream_duplex":"4z5jL"}],"7CCJs":[function(require,module,exports) {
var global = arguments[3];
/**
 * Module exports.
 */ module.exports = deprecate;
/**
 * Mark that a method should not be used.
 * Returns a modified function which warns once by default.
 *
 * If `localStorage.noDeprecation = true` is set, then it is a no-op.
 *
 * If `localStorage.throwDeprecation = true` is set, then deprecated functions
 * will throw an Error when invoked.
 *
 * If `localStorage.traceDeprecation = true` is set, then deprecated functions
 * will invoke `console.trace()` instead of `console.error()`.
 *
 * @param {Function} fn - the function to deprecate
 * @param {String} msg - the string to print to the console when `fn` is invoked
 * @returns {Function} a new "deprecated" version of `fn`
 * @api public
 */ function deprecate(fn, msg) {
    if (config('noDeprecation')) return fn;
    var warned = false;
    function deprecated() {
        if (!warned) {
            if (config('throwDeprecation')) throw new Error(msg);
            else if (config('traceDeprecation')) console.trace(msg);
            else console.warn(msg);
            warned = true;
        }
        return fn.apply(this, arguments);
    }
    return deprecated;
}
/**
 * Checks `localStorage` for boolean values for the given `name`.
 *
 * @param {String} name
 * @returns {Boolean}
 * @api private
 */ function config(name) {
    // accessing global.localStorage can trigger a DOMException in sandboxed iframes
    try {
        if (!global.localStorage) return false;
    } catch (_) {
        return false;
    }
    var val = global.localStorage[name];
    if (null == val) return false;
    return String(val).toLowerCase() === 'true';
}

},{}],"gW8Q4":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
'use strict';
/*<replacement>*/ var Buffer = require('safe-buffer').Buffer;
/*</replacement>*/ var isEncoding = Buffer.isEncoding || function(encoding) {
    encoding = '' + encoding;
    switch(encoding && encoding.toLowerCase()){
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
        case 'raw':
            return true;
        default:
            return false;
    }
};
function _normalizeEncoding(enc) {
    if (!enc) return 'utf8';
    var retried;
    while(true)switch(enc){
        case 'utf8':
        case 'utf-8':
            return 'utf8';
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
            return 'utf16le';
        case 'latin1':
        case 'binary':
            return 'latin1';
        case 'base64':
        case 'ascii':
        case 'hex':
            return enc;
        default:
            if (retried) return; // undefined
            enc = ('' + enc).toLowerCase();
            retried = true;
    }
}
// Do not cache `Buffer.isEncoding` when checking encoding names as some
// modules monkey-patch it to support additional encodings
function normalizeEncoding(enc) {
    var nenc = _normalizeEncoding(enc);
    if (typeof nenc !== 'string' && (Buffer.isEncoding === isEncoding || !isEncoding(enc))) throw new Error('Unknown encoding: ' + enc);
    return nenc || enc;
}
// StringDecoder provides an interface for efficiently splitting a series of
// buffers into a series of JS strings without breaking apart multi-byte
// characters.
exports.StringDecoder = StringDecoder;
function StringDecoder(encoding) {
    this.encoding = normalizeEncoding(encoding);
    var nb;
    switch(this.encoding){
        case 'utf16le':
            this.text = utf16Text;
            this.end = utf16End;
            nb = 4;
            break;
        case 'utf8':
            this.fillLast = utf8FillLast;
            nb = 4;
            break;
        case 'base64':
            this.text = base64Text;
            this.end = base64End;
            nb = 3;
            break;
        default:
            this.write = simpleWrite;
            this.end = simpleEnd;
            return;
    }
    this.lastNeed = 0;
    this.lastTotal = 0;
    this.lastChar = Buffer.allocUnsafe(nb);
}
StringDecoder.prototype.write = function(buf) {
    if (buf.length === 0) return '';
    var r;
    var i;
    if (this.lastNeed) {
        r = this.fillLast(buf);
        if (r === undefined) return '';
        i = this.lastNeed;
        this.lastNeed = 0;
    } else i = 0;
    if (i < buf.length) return r ? r + this.text(buf, i) : this.text(buf, i);
    return r || '';
};
StringDecoder.prototype.end = utf8End;
// Returns only complete characters in a Buffer
StringDecoder.prototype.text = utf8Text;
// Attempts to complete a partial non-UTF-8 character using bytes from a Buffer
StringDecoder.prototype.fillLast = function(buf) {
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, this.lastTotal - this.lastNeed, 0, buf.length);
    this.lastNeed -= buf.length;
};
// Checks the type of a UTF-8 byte, whether it's ASCII, a leading byte, or a
// continuation byte. If an invalid byte is detected, -2 is returned.
function utf8CheckByte(byte) {
    if (byte <= 127) return 0;
    else if (byte >> 5 === 6) return 2;
    else if (byte >> 4 === 14) return 3;
    else if (byte >> 3 === 30) return 4;
    return byte >> 6 === 2 ? -1 : -2;
}
// Checks at most 3 bytes at the end of a Buffer in order to detect an
// incomplete multi-byte UTF-8 character. The total number of bytes (2, 3, or 4)
// needed to complete the UTF-8 character (if applicable) are returned.
function utf8CheckIncomplete(self, buf, i) {
    var j = buf.length - 1;
    if (j < i) return 0;
    var nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 1;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) self.lastNeed = nb - 2;
        return nb;
    }
    if ((--j) < i || nb === -2) return 0;
    nb = utf8CheckByte(buf[j]);
    if (nb >= 0) {
        if (nb > 0) {
            if (nb === 2) nb = 0;
            else self.lastNeed = nb - 3;
        }
        return nb;
    }
    return 0;
}
// Validates as many continuation bytes for a multi-byte UTF-8 character as
// needed or are available. If we see a non-continuation byte where we expect
// one, we "replace" the validated continuation bytes we've seen so far with
// a single UTF-8 replacement character ('\ufffd'), to match v8's UTF-8 decoding
// behavior. The continuation byte check is included three times in the case
// where all of the continuation bytes for a character exist in the same buffer.
// It is also done this way as a slight performance increase instead of using a
// loop.
function utf8CheckExtraBytes(self, buf, p) {
    if ((buf[0] & 192) !== 128) {
        self.lastNeed = 0;
        return '\ufffd';
    }
    if (self.lastNeed > 1 && buf.length > 1) {
        if ((buf[1] & 192) !== 128) {
            self.lastNeed = 1;
            return '\ufffd';
        }
        if (self.lastNeed > 2 && buf.length > 2) {
            if ((buf[2] & 192) !== 128) {
                self.lastNeed = 2;
                return '\ufffd';
            }
        }
    }
}
// Attempts to complete a multi-byte UTF-8 character using bytes from a Buffer.
function utf8FillLast(buf) {
    var p = this.lastTotal - this.lastNeed;
    var r = utf8CheckExtraBytes(this, buf, p);
    if (r !== undefined) return r;
    if (this.lastNeed <= buf.length) {
        buf.copy(this.lastChar, p, 0, this.lastNeed);
        return this.lastChar.toString(this.encoding, 0, this.lastTotal);
    }
    buf.copy(this.lastChar, p, 0, buf.length);
    this.lastNeed -= buf.length;
}
// Returns all complete UTF-8 characters in a Buffer. If the Buffer ended on a
// partial character, the character's bytes are buffered until the required
// number of bytes are available.
function utf8Text(buf, i) {
    var total = utf8CheckIncomplete(this, buf, i);
    if (!this.lastNeed) return buf.toString('utf8', i);
    this.lastTotal = total;
    var end = buf.length - (total - this.lastNeed);
    buf.copy(this.lastChar, 0, end);
    return buf.toString('utf8', i, end);
}
// For UTF-8, a replacement character is added when ending on a partial
// character.
function utf8End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + '\ufffd';
    return r;
}
// UTF-16LE typically needs two bytes per character, but even if we have an even
// number of bytes available, we need to check if we end on a leading/high
// surrogate. In that case, we need to wait for the next two bytes in order to
// decode the last character properly.
function utf16Text(buf, i) {
    if ((buf.length - i) % 2 === 0) {
        var r = buf.toString('utf16le', i);
        if (r) {
            var c = r.charCodeAt(r.length - 1);
            if (c >= 55296 && c <= 56319) {
                this.lastNeed = 2;
                this.lastTotal = 4;
                this.lastChar[0] = buf[buf.length - 2];
                this.lastChar[1] = buf[buf.length - 1];
                return r.slice(0, -1);
            }
        }
        return r;
    }
    this.lastNeed = 1;
    this.lastTotal = 2;
    this.lastChar[0] = buf[buf.length - 1];
    return buf.toString('utf16le', i, buf.length - 1);
}
// For UTF-16LE we do not explicitly append special replacement characters if we
// end on a partial character, we simply let v8 handle that.
function utf16End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) {
        var end = this.lastTotal - this.lastNeed;
        return r + this.lastChar.toString('utf16le', 0, end);
    }
    return r;
}
function base64Text(buf, i) {
    var n = (buf.length - i) % 3;
    if (n === 0) return buf.toString('base64', i);
    this.lastNeed = 3 - n;
    this.lastTotal = 3;
    if (n === 1) this.lastChar[0] = buf[buf.length - 1];
    else {
        this.lastChar[0] = buf[buf.length - 2];
        this.lastChar[1] = buf[buf.length - 1];
    }
    return buf.toString('base64', i, buf.length - n);
}
function base64End(buf) {
    var r = buf && buf.length ? this.write(buf) : '';
    if (this.lastNeed) return r + this.lastChar.toString('base64', 0, 3 - this.lastNeed);
    return r;
}
// Pass bytes on through for single-byte encodings (e.g. ascii, latin1, hex)
function simpleWrite(buf) {
    return buf.toString(this.encoding);
}
function simpleEnd(buf) {
    return buf && buf.length ? this.write(buf) : '';
}

},{"safe-buffer":"7V1Cd"}],"dnqpI":[function(require,module,exports) {
var process = require("process");
'use strict';
var _Object$setPrototypeO;
function _defineProperty(obj, key, value) {
    if (key in obj) Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
    });
    else obj[key] = value;
    return obj;
}
var finished = require('./end-of-stream');
var kLastResolve = Symbol('lastResolve');
var kLastReject = Symbol('lastReject');
var kError = Symbol('error');
var kEnded = Symbol('ended');
var kLastPromise = Symbol('lastPromise');
var kHandlePromise = Symbol('handlePromise');
var kStream = Symbol('stream');
function createIterResult(value, done) {
    return {
        value: value,
        done: done
    };
}
function readAndResolve(iter) {
    var resolve = iter[kLastResolve];
    if (resolve !== null) {
        var data = iter[kStream].read(); // we defer if data is null
        // we can be expecting either 'end' or
        // 'error'
        if (data !== null) {
            iter[kLastPromise] = null;
            iter[kLastResolve] = null;
            iter[kLastReject] = null;
            resolve(createIterResult(data, false));
        }
    }
}
function onReadable(iter) {
    // we wait for the next tick, because it might
    // emit an error with process.nextTick
    process.nextTick(readAndResolve, iter);
}
function wrapForNext(lastPromise, iter) {
    return function(resolve, reject) {
        lastPromise.then(function() {
            if (iter[kEnded]) {
                resolve(createIterResult(undefined, true));
                return;
            }
            iter[kHandlePromise](resolve, reject);
        }, reject);
    };
}
var AsyncIteratorPrototype = Object.getPrototypeOf(function() {
});
var ReadableStreamAsyncIteratorPrototype = Object.setPrototypeOf((_Object$setPrototypeO = {
    get stream () {
        return this[kStream];
    },
    next: function next() {
        var _this = this;
        // if we have detected an error in the meanwhile
        // reject straight away
        var error = this[kError];
        if (error !== null) return Promise.reject(error);
        if (this[kEnded]) return Promise.resolve(createIterResult(undefined, true));
        if (this[kStream].destroyed) // We need to defer via nextTick because if .destroy(err) is
        // called, the error will be emitted via nextTick, and
        // we cannot guarantee that there is no error lingering around
        // waiting to be emitted.
        return new Promise(function(resolve, reject) {
            process.nextTick(function() {
                if (_this[kError]) reject(_this[kError]);
                else resolve(createIterResult(undefined, true));
            });
        });
         // if we have multiple next() calls
        // we will wait for the previous Promise to finish
        // this logic is optimized to support for await loops,
        // where next() is only called once at a time
        var lastPromise = this[kLastPromise];
        var promise;
        if (lastPromise) promise = new Promise(wrapForNext(lastPromise, this));
        else {
            // fast path needed to support multiple this.push()
            // without triggering the next() queue
            var data = this[kStream].read();
            if (data !== null) return Promise.resolve(createIterResult(data, false));
            promise = new Promise(this[kHandlePromise]);
        }
        this[kLastPromise] = promise;
        return promise;
    }
}, _defineProperty(_Object$setPrototypeO, Symbol.asyncIterator, function() {
    return this;
}), _defineProperty(_Object$setPrototypeO, "return", function _return() {
    var _this2 = this;
    // destroy(err, cb) is a private API
    // we can guarantee we have that here, because we control the
    // Readable class this is attached to
    return new Promise(function(resolve, reject) {
        _this2[kStream].destroy(null, function(err) {
            if (err) {
                reject(err);
                return;
            }
            resolve(createIterResult(undefined, true));
        });
    });
}), _Object$setPrototypeO), AsyncIteratorPrototype);
var createReadableStreamAsyncIterator = function createReadableStreamAsyncIterator1(stream) {
    var _Object$create;
    var iterator = Object.create(ReadableStreamAsyncIteratorPrototype, (_Object$create = {
    }, _defineProperty(_Object$create, kStream, {
        value: stream,
        writable: true
    }), _defineProperty(_Object$create, kLastResolve, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kLastReject, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kError, {
        value: null,
        writable: true
    }), _defineProperty(_Object$create, kEnded, {
        value: stream._readableState.endEmitted,
        writable: true
    }), _defineProperty(_Object$create, kHandlePromise, {
        value: function value(resolve, reject) {
            var data = iterator[kStream].read();
            if (data) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                resolve(createIterResult(data, false));
            } else {
                iterator[kLastResolve] = resolve;
                iterator[kLastReject] = reject;
            }
        },
        writable: true
    }), _Object$create));
    iterator[kLastPromise] = null;
    finished(stream, function(err) {
        if (err && err.code !== 'ERR_STREAM_PREMATURE_CLOSE') {
            var reject = iterator[kLastReject]; // reject if we are waiting for data in the Promise
            // returned by next() and store the error
            if (reject !== null) {
                iterator[kLastPromise] = null;
                iterator[kLastResolve] = null;
                iterator[kLastReject] = null;
                reject(err);
            }
            iterator[kError] = err;
            return;
        }
        var resolve = iterator[kLastResolve];
        if (resolve !== null) {
            iterator[kLastPromise] = null;
            iterator[kLastResolve] = null;
            iterator[kLastReject] = null;
            resolve(createIterResult(undefined, true));
        }
        iterator[kEnded] = true;
    });
    stream.on('readable', onReadable.bind(null, iterator));
    return iterator;
};
module.exports = createReadableStreamAsyncIterator;

},{"process":"glFWE","./end-of-stream":"iEgng"}],"iEgng":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/end-of-stream with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var ERR_STREAM_PREMATURE_CLOSE = require('../../../errors').codes.ERR_STREAM_PREMATURE_CLOSE;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        for(var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++)args[_key] = arguments[_key];
        callback.apply(this, args);
    };
}
function noop() {
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function eos(stream, opts, callback) {
    if (typeof opts === 'function') return eos(stream, null, opts);
    if (!opts) opts = {
    };
    callback = once(callback || noop);
    var readable = opts.readable || opts.readable !== false && stream.readable;
    var writable = opts.writable || opts.writable !== false && stream.writable;
    var onlegacyfinish = function onlegacyfinish1() {
        if (!stream.writable) onfinish();
    };
    var writableEnded = stream._writableState && stream._writableState.finished;
    var onfinish = function onfinish1() {
        writable = false;
        writableEnded = true;
        if (!readable) callback.call(stream);
    };
    var readableEnded = stream._readableState && stream._readableState.endEmitted;
    var onend = function onend1() {
        readable = false;
        readableEnded = true;
        if (!writable) callback.call(stream);
    };
    var onerror = function onerror1(err) {
        callback.call(stream, err);
    };
    var onclose = function onclose1() {
        var err;
        if (readable && !readableEnded) {
            if (!stream._readableState || !stream._readableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
        if (writable && !writableEnded) {
            if (!stream._writableState || !stream._writableState.ended) err = new ERR_STREAM_PREMATURE_CLOSE();
            return callback.call(stream, err);
        }
    };
    var onrequest = function onrequest1() {
        stream.req.on('finish', onfinish);
    };
    if (isRequest(stream)) {
        stream.on('complete', onfinish);
        stream.on('abort', onclose);
        if (stream.req) onrequest();
        else stream.on('request', onrequest);
    } else if (writable && !stream._writableState) {
        // legacy streams
        stream.on('end', onlegacyfinish);
        stream.on('close', onlegacyfinish);
    }
    stream.on('end', onend);
    stream.on('finish', onfinish);
    if (opts.error !== false) stream.on('error', onerror);
    stream.on('close', onclose);
    return function() {
        stream.removeListener('complete', onfinish);
        stream.removeListener('abort', onclose);
        stream.removeListener('request', onrequest);
        if (stream.req) stream.req.removeListener('finish', onfinish);
        stream.removeListener('end', onlegacyfinish);
        stream.removeListener('close', onlegacyfinish);
        stream.removeListener('finish', onfinish);
        stream.removeListener('end', onend);
        stream.removeListener('error', onerror);
        stream.removeListener('close', onclose);
    };
}
module.exports = eos;

},{"../../../errors":"bfOiO"}],"cVUTt":[function(require,module,exports) {
module.exports = function() {
    throw new Error('Readable.from is not available in the browser');
};

},{}],"bAegj":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a transform stream is a readable/writable stream where you do
// something with the data.  Sometimes it's called a "filter",
// but that's not a great name for it, since that implies a thing where
// some bits pass through, and others are simply ignored.  (That would
// be a valid example of a transform, of course.)
//
// While the output is causally related to the input, it's not a
// necessarily symmetric or synchronous transformation.  For example,
// a zlib stream might take multiple plain-text writes(), and then
// emit a single compressed chunk some time in the future.
//
// Here's how this works:
//
// The Transform stream has all the aspects of the readable and writable
// stream classes.  When you write(chunk), that calls _write(chunk,cb)
// internally, and returns false if there's a lot of pending writes
// buffered up.  When you call read(), that calls _read(n) until
// there's enough pending readable data buffered up.
//
// In a transform stream, the written data is placed in a buffer.  When
// _read(n) is called, it transforms the queued up data, calling the
// buffered _write cb's as it consumes chunks.  If consuming a single
// written chunk would result in multiple output chunks, then the first
// outputted bit calls the readcb, and subsequent chunks just go into
// the read buffer, and will cause it to emit 'readable' if necessary.
//
// This way, back-pressure is actually determined by the reading side,
// since _read has to be called to start processing a new chunk.  However,
// a pathological inflate type of transform can cause excessive buffering
// here.  For example, imagine a stream where every byte of input is
// interpreted as an integer from 0-255, and then results in that many
// bytes of output.  Writing the 4 bytes {ff,ff,ff,ff} would result in
// 1kb of data being output.  In this case, you could write a very small
// amount of input, and end up with a very large amount of output.  In
// such a pathological inflating mechanism, there'd be no way to tell
// the system to stop doing the transform.  A single 4MB write could
// cause the system to run out of memory.
//
// However, even in such a pathological case, only a single written chunk
// would be consumed, and then the rest would wait (un-transformed) until
// the results of the previous transformed chunk were consumed.
'use strict';
module.exports = Transform;
var _require$codes = require('../errors').codes, ERR_METHOD_NOT_IMPLEMENTED = _require$codes.ERR_METHOD_NOT_IMPLEMENTED, ERR_MULTIPLE_CALLBACK = _require$codes.ERR_MULTIPLE_CALLBACK, ERR_TRANSFORM_ALREADY_TRANSFORMING = _require$codes.ERR_TRANSFORM_ALREADY_TRANSFORMING, ERR_TRANSFORM_WITH_LENGTH_0 = _require$codes.ERR_TRANSFORM_WITH_LENGTH_0;
var Duplex = require('./_stream_duplex');
require('inherits')(Transform, Duplex);
function afterTransform(er, data) {
    var ts = this._transformState;
    ts.transforming = false;
    var cb = ts.writecb;
    if (cb === null) return this.emit('error', new ERR_MULTIPLE_CALLBACK());
    ts.writechunk = null;
    ts.writecb = null;
    if (data != null) this.push(data);
    cb(er);
    var rs = this._readableState;
    rs.reading = false;
    if (rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
}
function Transform(options) {
    if (!(this instanceof Transform)) return new Transform(options);
    Duplex.call(this, options);
    this._transformState = {
        afterTransform: afterTransform.bind(this),
        needTransform: false,
        transforming: false,
        writecb: null,
        writechunk: null,
        writeencoding: null
    }; // start out asking for a readable event once data is transformed.
    this._readableState.needReadable = true; // we have implemented the _read method, and done the other things
    // that Readable wants before the first _read call, so unset the
    // sync guard flag.
    this._readableState.sync = false;
    if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;
        if (typeof options.flush === 'function') this._flush = options.flush;
    } // When the writable side finishes, then flush out anything remaining.
    this.on('prefinish', prefinish);
}
function prefinish() {
    var _this = this;
    if (typeof this._flush === 'function' && !this._readableState.destroyed) this._flush(function(er, data) {
        done(_this, er, data);
    });
    else done(this, null, null);
}
Transform.prototype.push = function(chunk, encoding) {
    this._transformState.needTransform = false;
    return Duplex.prototype.push.call(this, chunk, encoding);
}; // This is the part where you do stuff!
// override this function in implementation classes.
// 'chunk' is an input chunk.
//
// Call `push(newChunk)` to pass along transformed output
// to the readable side.  You may call 'push' zero or more times.
//
// Call `cb(err)` when you are done with this chunk.  If you pass
// an error, then that'll put the hurt on the whole operation.  If you
// never call cb(), then you'll never get another chunk.
Transform.prototype._transform = function(chunk, encoding, cb) {
    cb(new ERR_METHOD_NOT_IMPLEMENTED('_transform()'));
};
Transform.prototype._write = function(chunk, encoding, cb) {
    var ts = this._transformState;
    ts.writecb = cb;
    ts.writechunk = chunk;
    ts.writeencoding = encoding;
    if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
    }
}; // Doesn't matter what the args are here.
// _transform does all the work.
// That we got here means that the readable side wants more data.
Transform.prototype._read = function(n) {
    var ts = this._transformState;
    if (ts.writechunk !== null && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
    } else // mark that we need a transform, so that any data that comes in
    // will get processed, now that we've asked for it.
    ts.needTransform = true;
};
Transform.prototype._destroy = function(err, cb) {
    Duplex.prototype._destroy.call(this, err, function(err2) {
        cb(err2);
    });
};
function done(stream, er, data) {
    if (er) return stream.emit('error', er);
    if (data != null) stream.push(data); // TODO(BridgeAR): Write a test for these two error cases
    // if there's nothing in the write buffer, then that means
    // that nothing more will ever be provided
    if (stream._writableState.length) throw new ERR_TRANSFORM_WITH_LENGTH_0();
    if (stream._transformState.transforming) throw new ERR_TRANSFORM_ALREADY_TRANSFORMING();
    return stream.push(null);
}

},{"../errors":"bfOiO","./_stream_duplex":"4z5jL","inherits":"gmJTw"}],"SdA6L":[function(require,module,exports) {
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.
// a passthrough stream.
// basically just the most minimal sort of Transform stream.
// Every written chunk gets output as-is.
'use strict';
module.exports = PassThrough;
var Transform = require('./_stream_transform');
require('inherits')(PassThrough, Transform);
function PassThrough(options) {
    if (!(this instanceof PassThrough)) return new PassThrough(options);
    Transform.call(this, options);
}
PassThrough.prototype._transform = function(chunk, encoding, cb) {
    cb(null, chunk);
};

},{"./_stream_transform":"bAegj","inherits":"gmJTw"}],"i4S81":[function(require,module,exports) {
// Ported from https://github.com/mafintosh/pump with
// permission from the author, Mathias Buus (@mafintosh).
'use strict';
var eos;
function once(callback) {
    var called = false;
    return function() {
        if (called) return;
        called = true;
        callback.apply(void 0, arguments);
    };
}
var _require$codes = require('../../../errors').codes, ERR_MISSING_ARGS = _require$codes.ERR_MISSING_ARGS, ERR_STREAM_DESTROYED = _require$codes.ERR_STREAM_DESTROYED;
function noop(err) {
    // Rethrow the error if it exists to avoid swallowing it
    if (err) throw err;
}
function isRequest(stream) {
    return stream.setHeader && typeof stream.abort === 'function';
}
function destroyer(stream, reading, writing, callback) {
    callback = once(callback);
    var closed = false;
    stream.on('close', function() {
        closed = true;
    });
    if (eos === undefined) eos = require('./end-of-stream');
    eos(stream, {
        readable: reading,
        writable: writing
    }, function(err) {
        if (err) return callback(err);
        closed = true;
        callback();
    });
    var destroyed = false;
    return function(err) {
        if (closed) return;
        if (destroyed) return;
        destroyed = true; // request.destroy just do .end - .abort is what we want
        if (isRequest(stream)) return stream.abort();
        if (typeof stream.destroy === 'function') return stream.destroy();
        callback(err || new ERR_STREAM_DESTROYED('pipe'));
    };
}
function call(fn) {
    fn();
}
function pipe(from, to) {
    return from.pipe(to);
}
function popCallback(streams) {
    if (!streams.length) return noop;
    if (typeof streams[streams.length - 1] !== 'function') return noop;
    return streams.pop();
}
function pipeline() {
    for(var _len = arguments.length, streams = new Array(_len), _key = 0; _key < _len; _key++)streams[_key] = arguments[_key];
    var callback = popCallback(streams);
    if (Array.isArray(streams[0])) streams = streams[0];
    if (streams.length < 2) throw new ERR_MISSING_ARGS('streams');
    var error;
    var destroys = streams.map(function(stream, i) {
        var reading = i < streams.length - 1;
        var writing = i > 0;
        return destroyer(stream, reading, writing, function(err) {
            if (!error) error = err;
            if (err) destroys.forEach(call);
            if (reading) return;
            destroys.forEach(call);
            callback(error);
        });
    });
    return streams.reduce(pipe);
}
module.exports = pipeline;

},{"../../../errors":"bfOiO","./end-of-stream":"iEgng"}],"k27dq":[function(require,module,exports) {
'use strict';
var Buffer = require('buffer').Buffer;
var inherits = require('inherits');
var HashBase = require('hash-base');
var ARRAY16 = new Array(16);
var zl = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var zr = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var sl = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sr = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];
var hl = [
    0,
    1518500249,
    1859775393,
    2400959708,
    2840853838
];
var hr = [
    1352829926,
    1548603684,
    1836072691,
    2053994217,
    0
];
function RIPEMD160() {
    HashBase.call(this, 64);
    // state
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
}
inherits(RIPEMD160, HashBase);
RIPEMD160.prototype._update = function() {
    var words = ARRAY16;
    for(var j = 0; j < 16; ++j)words[j] = this._block.readInt32LE(j * 4);
    var al = this._a | 0;
    var bl = this._b | 0;
    var cl = this._c | 0;
    var dl = this._d | 0;
    var el = this._e | 0;
    var ar = this._a | 0;
    var br = this._b | 0;
    var cr = this._c | 0;
    var dr = this._d | 0;
    var er = this._e | 0;
    // computation
    for(var i = 0; i < 80; i += 1){
        var tl;
        var tr;
        if (i < 16) {
            tl = fn1(al, bl, cl, dl, el, words[zl[i]], hl[0], sl[i]);
            tr = fn5(ar, br, cr, dr, er, words[zr[i]], hr[0], sr[i]);
        } else if (i < 32) {
            tl = fn2(al, bl, cl, dl, el, words[zl[i]], hl[1], sl[i]);
            tr = fn4(ar, br, cr, dr, er, words[zr[i]], hr[1], sr[i]);
        } else if (i < 48) {
            tl = fn3(al, bl, cl, dl, el, words[zl[i]], hl[2], sl[i]);
            tr = fn3(ar, br, cr, dr, er, words[zr[i]], hr[2], sr[i]);
        } else if (i < 64) {
            tl = fn4(al, bl, cl, dl, el, words[zl[i]], hl[3], sl[i]);
            tr = fn2(ar, br, cr, dr, er, words[zr[i]], hr[3], sr[i]);
        } else {
            tl = fn5(al, bl, cl, dl, el, words[zl[i]], hl[4], sl[i]);
            tr = fn1(ar, br, cr, dr, er, words[zr[i]], hr[4], sr[i]);
        }
        al = el;
        el = dl;
        dl = rotl(cl, 10);
        cl = bl;
        bl = tl;
        ar = er;
        er = dr;
        dr = rotl(cr, 10);
        cr = br;
        br = tr;
    }
    // update state
    var t = this._b + cl + dr | 0;
    this._b = this._c + dl + er | 0;
    this._c = this._d + el + ar | 0;
    this._d = this._e + al + br | 0;
    this._e = this._a + bl + cr | 0;
    this._a = t;
};
RIPEMD160.prototype._digest = function() {
    // create padding and handle blocks
    this._block[this._blockOffset++] = 128;
    if (this._blockOffset > 56) {
        this._block.fill(0, this._blockOffset, 64);
        this._update();
        this._blockOffset = 0;
    }
    this._block.fill(0, this._blockOffset, 56);
    this._block.writeUInt32LE(this._length[0], 56);
    this._block.writeUInt32LE(this._length[1], 60);
    this._update();
    // produce result
    var buffer = Buffer.alloc ? Buffer.alloc(20) : new Buffer(20);
    buffer.writeInt32LE(this._a, 0);
    buffer.writeInt32LE(this._b, 4);
    buffer.writeInt32LE(this._c, 8);
    buffer.writeInt32LE(this._d, 12);
    buffer.writeInt32LE(this._e, 16);
    return buffer;
};
function rotl(x, n) {
    return x << n | x >>> 32 - n;
}
function fn1(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ c ^ d) + m + k | 0, s) + e | 0;
}
function fn2(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & c | ~b & d) + m + k | 0, s) + e | 0;
}
function fn3(a, b, c, d, e, m, k, s) {
    return rotl(a + ((b | ~c) ^ d) + m + k | 0, s) + e | 0;
}
function fn4(a, b, c, d, e, m, k, s) {
    return rotl(a + (b & d | c & ~d) + m + k | 0, s) + e | 0;
}
function fn5(a, b, c, d, e, m, k, s) {
    return rotl(a + (b ^ (c | ~d)) + m + k | 0, s) + e | 0;
}
module.exports = RIPEMD160;

},{"buffer":"kPwYH","inherits":"gmJTw","hash-base":"8g7TJ"}],"jV83O":[function(require,module,exports) {
var exports = module.exports = function SHA(algorithm) {
    algorithm = algorithm.toLowerCase();
    var Algorithm = exports[algorithm];
    if (!Algorithm) throw new Error(algorithm + ' is not supported (we accept pull requests)');
    return new Algorithm();
};
exports.sha = require('./sha');
exports.sha1 = require('./sha1');
exports.sha224 = require('./sha224');
exports.sha256 = require('./sha256');
exports.sha384 = require('./sha384');
exports.sha512 = require('./sha512');

},{"./sha":"lLX70","./sha1":"7yvaB","./sha224":"9KF9V","./sha256":"5RKuN","./sha384":"jt2q1","./sha512":"a0edu"}],"lLX70":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-0, as defined
 * in FIPS PUB 180-1
 * This source code is derived from sha1.js of the same repository.
 * The difference between SHA-0 and SHA-1 is just a bitwise rotate left
 * operation was added.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha, Hash);
Sha.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16];
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha;

},{"inherits":"gmJTw","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"jSNPJ":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
// prototype class for hash functions
function Hash(blockSize, finalSize) {
    this._block = Buffer.alloc(blockSize);
    this._finalSize = finalSize;
    this._blockSize = blockSize;
    this._len = 0;
}
Hash.prototype.update = function(data, enc) {
    if (typeof data === 'string') {
        enc = enc || 'utf8';
        data = Buffer.from(data, enc);
    }
    var block = this._block;
    var blockSize = this._blockSize;
    var length = data.length;
    var accum = this._len;
    for(var offset = 0; offset < length;){
        var assigned = accum % blockSize;
        var remainder = Math.min(length - offset, blockSize - assigned);
        for(var i = 0; i < remainder; i++)block[assigned + i] = data[offset + i];
        accum += remainder;
        offset += remainder;
        if (accum % blockSize === 0) this._update(block);
    }
    this._len += length;
    return this;
};
Hash.prototype.digest = function(enc) {
    var rem = this._len % this._blockSize;
    this._block[rem] = 128;
    // zero (rem + 1) trailing bits, where (rem + 1) is the smallest
    // non-negative solution to the equation (length + 1 + (rem + 1)) === finalSize mod blockSize
    this._block.fill(0, rem + 1);
    if (rem >= this._finalSize) {
        this._update(this._block);
        this._block.fill(0);
    }
    var bits = this._len * 8;
    // uint32
    if (bits <= 4294967295) this._block.writeUInt32BE(bits, this._blockSize - 4);
    else {
        var lowBits = (bits & 4294967295) >>> 0;
        var highBits = (bits - lowBits) / 4294967296;
        this._block.writeUInt32BE(highBits, this._blockSize - 8);
        this._block.writeUInt32BE(lowBits, this._blockSize - 4);
    }
    this._update(this._block);
    var hash = this._hash();
    return enc ? hash.toString(enc) : hash;
};
Hash.prototype._update = function() {
    throw new Error('_update must be implemented by subclass');
};
module.exports = Hash;

},{"safe-buffer":"7V1Cd"}],"7yvaB":[function(require,module,exports) {
/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1518500249,
    1859775393,
    -1894007588,
    -899497514
];
var W = new Array(80);
function Sha1() {
    this.init();
    this._w = W;
    Hash.call(this, 64, 56);
}
inherits(Sha1, Hash);
Sha1.prototype.init = function() {
    this._a = 1732584193;
    this._b = 4023233417;
    this._c = 2562383102;
    this._d = 271733878;
    this._e = 3285377520;
    return this;
};
function rotl1(num) {
    return num << 1 | num >>> 31;
}
function rotl5(num) {
    return num << 5 | num >>> 27;
}
function rotl30(num) {
    return num << 30 | num >>> 2;
}
function ft(s, b, c, d) {
    if (s === 0) return b & c | ~b & d;
    if (s === 2) return b & c | b & d | c & d;
    return b ^ c ^ d;
}
Sha1.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 80; ++i)W1[i] = rotl1(W1[i - 3] ^ W1[i - 8] ^ W1[i - 14] ^ W1[i - 16]);
    for(var j = 0; j < 80; ++j){
        var s = ~~(j / 20);
        var t = rotl5(a) + ft(s, b, c, d) + e + W1[j] + K[s] | 0;
        e = d;
        d = c;
        c = rotl30(b);
        b = a;
        a = t;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
};
Sha1.prototype._hash = function() {
    var H = Buffer.allocUnsafe(20);
    H.writeInt32BE(this._a | 0, 0);
    H.writeInt32BE(this._b | 0, 4);
    H.writeInt32BE(this._c | 0, 8);
    H.writeInt32BE(this._d | 0, 12);
    H.writeInt32BE(this._e | 0, 16);
    return H;
};
module.exports = Sha1;

},{"inherits":"gmJTw","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"9KF9V":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Sha256 = require('./sha256');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(64);
function Sha224() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha224, Sha256);
Sha224.prototype.init = function() {
    this._a = 3238371032;
    this._b = 914150663;
    this._c = 812702999;
    this._d = 4144912697;
    this._e = 4290775857;
    this._f = 1750603025;
    this._g = 1694076839;
    this._h = 3204075428;
    return this;
};
Sha224.prototype._hash = function() {
    var H = Buffer.allocUnsafe(28);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    return H;
};
module.exports = Sha224;

},{"inherits":"gmJTw","./sha256":"5RKuN","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"5RKuN":[function(require,module,exports) {
/**
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-256, as defined
 * in FIPS 180-2
 * Version 2.2-beta Copyright Angel Marin, Paul Johnston 2000 - 2009.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 *
 */ var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
var W = new Array(64);
function Sha256() {
    this.init();
    this._w = W // new Array(64)
    ;
    Hash.call(this, 64, 56);
}
inherits(Sha256, Hash);
Sha256.prototype.init = function() {
    this._a = 1779033703;
    this._b = 3144134277;
    this._c = 1013904242;
    this._d = 2773480762;
    this._e = 1359893119;
    this._f = 2600822924;
    this._g = 528734635;
    this._h = 1541459225;
    return this;
};
function ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x) {
    return (x >>> 2 | x << 30) ^ (x >>> 13 | x << 19) ^ (x >>> 22 | x << 10);
}
function sigma1(x) {
    return (x >>> 6 | x << 26) ^ (x >>> 11 | x << 21) ^ (x >>> 25 | x << 7);
}
function gamma0(x) {
    return (x >>> 7 | x << 25) ^ (x >>> 18 | x << 14) ^ x >>> 3;
}
function gamma1(x) {
    return (x >>> 17 | x << 15) ^ (x >>> 19 | x << 13) ^ x >>> 10;
}
Sha256.prototype._update = function(M) {
    var W1 = this._w;
    var a = this._a | 0;
    var b = this._b | 0;
    var c = this._c | 0;
    var d = this._d | 0;
    var e = this._e | 0;
    var f = this._f | 0;
    var g = this._g | 0;
    var h = this._h | 0;
    for(var i = 0; i < 16; ++i)W1[i] = M.readInt32BE(i * 4);
    for(; i < 64; ++i)W1[i] = gamma1(W1[i - 2]) + W1[i - 7] + gamma0(W1[i - 15]) + W1[i - 16] | 0;
    for(var j = 0; j < 64; ++j){
        var T1 = h + sigma1(e) + ch(e, f, g) + K[j] + W1[j] | 0;
        var T2 = sigma0(a) + maj(a, b, c) | 0;
        h = g;
        g = f;
        f = e;
        e = d + T1 | 0;
        d = c;
        c = b;
        b = a;
        a = T1 + T2 | 0;
    }
    this._a = a + this._a | 0;
    this._b = b + this._b | 0;
    this._c = c + this._c | 0;
    this._d = d + this._d | 0;
    this._e = e + this._e | 0;
    this._f = f + this._f | 0;
    this._g = g + this._g | 0;
    this._h = h + this._h | 0;
};
Sha256.prototype._hash = function() {
    var H = Buffer.allocUnsafe(32);
    H.writeInt32BE(this._a, 0);
    H.writeInt32BE(this._b, 4);
    H.writeInt32BE(this._c, 8);
    H.writeInt32BE(this._d, 12);
    H.writeInt32BE(this._e, 16);
    H.writeInt32BE(this._f, 20);
    H.writeInt32BE(this._g, 24);
    H.writeInt32BE(this._h, 28);
    return H;
};
module.exports = Sha256;

},{"inherits":"gmJTw","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"jt2q1":[function(require,module,exports) {
var inherits = require('inherits');
var SHA512 = require('./sha512');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var W = new Array(160);
function Sha384() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha384, SHA512);
Sha384.prototype.init = function() {
    this._ah = 3418070365;
    this._bh = 1654270250;
    this._ch = 2438529370;
    this._dh = 355462360;
    this._eh = 1731405415;
    this._fh = 2394180231;
    this._gh = 3675008525;
    this._hh = 1203062813;
    this._al = 3238371032;
    this._bl = 914150663;
    this._cl = 812702999;
    this._dl = 4144912697;
    this._el = 4290775857;
    this._fl = 1750603025;
    this._gl = 1694076839;
    this._hl = 3204075428;
    return this;
};
Sha384.prototype._hash = function() {
    var H = Buffer.allocUnsafe(48);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    return H;
};
module.exports = Sha384;

},{"inherits":"gmJTw","./sha512":"a0edu","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"a0edu":[function(require,module,exports) {
var inherits = require('inherits');
var Hash = require('./hash');
var Buffer = require('safe-buffer').Buffer;
var K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
var W = new Array(160);
function Sha512() {
    this.init();
    this._w = W;
    Hash.call(this, 128, 112);
}
inherits(Sha512, Hash);
Sha512.prototype.init = function() {
    this._ah = 1779033703;
    this._bh = 3144134277;
    this._ch = 1013904242;
    this._dh = 2773480762;
    this._eh = 1359893119;
    this._fh = 2600822924;
    this._gh = 528734635;
    this._hh = 1541459225;
    this._al = 4089235720;
    this._bl = 2227873595;
    this._cl = 4271175723;
    this._dl = 1595750129;
    this._el = 2917565137;
    this._fl = 725511199;
    this._gl = 4215389547;
    this._hl = 327033209;
    return this;
};
function Ch(x, y, z) {
    return z ^ x & (y ^ z);
}
function maj(x, y, z) {
    return x & y | z & (x | y);
}
function sigma0(x, xl) {
    return (x >>> 28 | xl << 4) ^ (xl >>> 2 | x << 30) ^ (xl >>> 7 | x << 25);
}
function sigma1(x, xl) {
    return (x >>> 14 | xl << 18) ^ (x >>> 18 | xl << 14) ^ (xl >>> 9 | x << 23);
}
function Gamma0(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ x >>> 7;
}
function Gamma0l(x, xl) {
    return (x >>> 1 | xl << 31) ^ (x >>> 8 | xl << 24) ^ (x >>> 7 | xl << 25);
}
function Gamma1(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ x >>> 6;
}
function Gamma1l(x, xl) {
    return (x >>> 19 | xl << 13) ^ (xl >>> 29 | x << 3) ^ (x >>> 6 | xl << 26);
}
function getCarry(a, b) {
    return a >>> 0 < b >>> 0 ? 1 : 0;
}
Sha512.prototype._update = function(M) {
    var W1 = this._w;
    var ah = this._ah | 0;
    var bh = this._bh | 0;
    var ch = this._ch | 0;
    var dh = this._dh | 0;
    var eh = this._eh | 0;
    var fh = this._fh | 0;
    var gh = this._gh | 0;
    var hh = this._hh | 0;
    var al = this._al | 0;
    var bl = this._bl | 0;
    var cl = this._cl | 0;
    var dl = this._dl | 0;
    var el = this._el | 0;
    var fl = this._fl | 0;
    var gl = this._gl | 0;
    var hl = this._hl | 0;
    for(var i = 0; i < 32; i += 2){
        W1[i] = M.readInt32BE(i * 4);
        W1[i + 1] = M.readInt32BE(i * 4 + 4);
    }
    for(; i < 160; i += 2){
        var xh = W1[i - 30];
        var xl = W1[i - 30 + 1];
        var gamma0 = Gamma0(xh, xl);
        var gamma0l = Gamma0l(xl, xh);
        xh = W1[i - 4];
        xl = W1[i - 4 + 1];
        var gamma1 = Gamma1(xh, xl);
        var gamma1l = Gamma1l(xl, xh);
        // W[i] = gamma0 + W[i - 7] + gamma1 + W[i - 16]
        var Wi7h = W1[i - 14];
        var Wi7l = W1[i - 14 + 1];
        var Wi16h = W1[i - 32];
        var Wi16l = W1[i - 32 + 1];
        var Wil = gamma0l + Wi7l | 0;
        var Wih = gamma0 + Wi7h + getCarry(Wil, gamma0l) | 0;
        Wil = Wil + gamma1l | 0;
        Wih = Wih + gamma1 + getCarry(Wil, gamma1l) | 0;
        Wil = Wil + Wi16l | 0;
        Wih = Wih + Wi16h + getCarry(Wil, Wi16l) | 0;
        W1[i] = Wih;
        W1[i + 1] = Wil;
    }
    for(var j = 0; j < 160; j += 2){
        Wih = W1[j];
        Wil = W1[j + 1];
        var majh = maj(ah, bh, ch);
        var majl = maj(al, bl, cl);
        var sigma0h = sigma0(ah, al);
        var sigma0l = sigma0(al, ah);
        var sigma1h = sigma1(eh, el);
        var sigma1l = sigma1(el, eh);
        // t1 = h + sigma1 + ch + K[j] + W[j]
        var Kih = K[j];
        var Kil = K[j + 1];
        var chh = Ch(eh, fh, gh);
        var chl = Ch(el, fl, gl);
        var t1l = hl + sigma1l | 0;
        var t1h = hh + sigma1h + getCarry(t1l, hl) | 0;
        t1l = t1l + chl | 0;
        t1h = t1h + chh + getCarry(t1l, chl) | 0;
        t1l = t1l + Kil | 0;
        t1h = t1h + Kih + getCarry(t1l, Kil) | 0;
        t1l = t1l + Wil | 0;
        t1h = t1h + Wih + getCarry(t1l, Wil) | 0;
        // t2 = sigma0 + maj
        var t2l = sigma0l + majl | 0;
        var t2h = sigma0h + majh + getCarry(t2l, sigma0l) | 0;
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        el = dl + t1l | 0;
        eh = dh + t1h + getCarry(el, dl) | 0;
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        al = t1l + t2l | 0;
        ah = t1h + t2h + getCarry(al, t1l) | 0;
    }
    this._al = this._al + al | 0;
    this._bl = this._bl + bl | 0;
    this._cl = this._cl + cl | 0;
    this._dl = this._dl + dl | 0;
    this._el = this._el + el | 0;
    this._fl = this._fl + fl | 0;
    this._gl = this._gl + gl | 0;
    this._hl = this._hl + hl | 0;
    this._ah = this._ah + ah + getCarry(this._al, al) | 0;
    this._bh = this._bh + bh + getCarry(this._bl, bl) | 0;
    this._ch = this._ch + ch + getCarry(this._cl, cl) | 0;
    this._dh = this._dh + dh + getCarry(this._dl, dl) | 0;
    this._eh = this._eh + eh + getCarry(this._el, el) | 0;
    this._fh = this._fh + fh + getCarry(this._fl, fl) | 0;
    this._gh = this._gh + gh + getCarry(this._gl, gl) | 0;
    this._hh = this._hh + hh + getCarry(this._hl, hl) | 0;
};
Sha512.prototype._hash = function() {
    var H = Buffer.allocUnsafe(64);
    function writeInt64BE(h, l, offset) {
        H.writeInt32BE(h, offset);
        H.writeInt32BE(l, offset + 4);
    }
    writeInt64BE(this._ah, this._al, 0);
    writeInt64BE(this._bh, this._bl, 8);
    writeInt64BE(this._ch, this._cl, 16);
    writeInt64BE(this._dh, this._dl, 24);
    writeInt64BE(this._eh, this._el, 32);
    writeInt64BE(this._fh, this._fl, 40);
    writeInt64BE(this._gh, this._gl, 48);
    writeInt64BE(this._hh, this._hl, 56);
    return H;
};
module.exports = Sha512;

},{"inherits":"gmJTw","./hash":"jSNPJ","safe-buffer":"7V1Cd"}],"butKV":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var Transform = require('stream').Transform;
var StringDecoder = require('string_decoder').StringDecoder;
var inherits = require('inherits');
function CipherBase(hashMode) {
    Transform.call(this);
    this.hashMode = typeof hashMode === 'string';
    if (this.hashMode) this[hashMode] = this._finalOrDigest;
    else this.final = this._finalOrDigest;
    if (this._final) {
        this.__final = this._final;
        this._final = null;
    }
    this._decoder = null;
    this._encoding = null;
}
inherits(CipherBase, Transform);
CipherBase.prototype.update = function(data, inputEnc, outputEnc) {
    if (typeof data === 'string') data = Buffer.from(data, inputEnc);
    var outData = this._update(data);
    if (this.hashMode) return this;
    if (outputEnc) outData = this._toString(outData, outputEnc);
    return outData;
};
CipherBase.prototype.setAutoPadding = function() {
};
CipherBase.prototype.getAuthTag = function() {
    throw new Error('trying to get auth tag in unsupported state');
};
CipherBase.prototype.setAuthTag = function() {
    throw new Error('trying to set auth tag in unsupported state');
};
CipherBase.prototype.setAAD = function() {
    throw new Error('trying to set aad in unsupported state');
};
CipherBase.prototype._transform = function(data, _, next) {
    var err;
    try {
        if (this.hashMode) this._update(data);
        else this.push(this._update(data));
    } catch (e) {
        err = e;
    } finally{
        next(err);
    }
};
CipherBase.prototype._flush = function(done) {
    var err;
    try {
        this.push(this.__final());
    } catch (e) {
        err = e;
    }
    done(err);
};
CipherBase.prototype._finalOrDigest = function(outputEnc) {
    var outData = this.__final() || Buffer.alloc(0);
    if (outputEnc) outData = this._toString(outData, outputEnc, true);
    return outData;
};
CipherBase.prototype._toString = function(value, enc, fin) {
    if (!this._decoder) {
        this._decoder = new StringDecoder(enc);
        this._encoding = enc;
    }
    if (this._encoding !== enc) throw new Error('can\'t switch encodings');
    var out = this._decoder.write(value);
    if (fin) out += this._decoder.end();
    return out;
};
module.exports = CipherBase;

},{"safe-buffer":"7V1Cd","stream":"dBTw8","string_decoder":"gW8Q4","inherits":"gmJTw"}],"897KI":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Legacy = require('./legacy');
var Base = require('cipher-base');
var Buffer = require('safe-buffer').Buffer;
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var ZEROS = Buffer.alloc(128);
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) {
        var hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
        key = hash.update(key).digest();
    } else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = alg === 'rmd160' ? new RIPEMD160() : sha(alg);
    this._hash.update(ipad);
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.update(data);
};
Hmac.prototype._final = function() {
    var h = this._hash.digest();
    var hash = this._alg === 'rmd160' ? new RIPEMD160() : sha(this._alg);
    return hash.update(this._opad).update(h).digest();
};
module.exports = function createHmac(alg, key) {
    alg = alg.toLowerCase();
    if (alg === 'rmd160' || alg === 'ripemd160') return new Hmac('rmd160', key);
    if (alg === 'md5') return new Legacy(md5, key);
    return new Hmac(alg, key);
};

},{"inherits":"gmJTw","./legacy":"eY0lD","cipher-base":"butKV","safe-buffer":"7V1Cd","create-hash/md5":"iBWfw","ripemd160":"k27dq","sha.js":"jV83O"}],"eY0lD":[function(require,module,exports) {
'use strict';
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var Base = require('cipher-base');
var ZEROS = Buffer.alloc(128);
var blocksize = 64;
function Hmac(alg, key) {
    Base.call(this, 'digest');
    if (typeof key === 'string') key = Buffer.from(key);
    this._alg = alg;
    this._key = key;
    if (key.length > blocksize) key = alg(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = this._ipad = Buffer.allocUnsafe(blocksize);
    var opad = this._opad = Buffer.allocUnsafe(blocksize);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    this._hash = [
        ipad
    ];
}
inherits(Hmac, Base);
Hmac.prototype._update = function(data) {
    this._hash.push(data);
};
Hmac.prototype._final = function() {
    var h = this._alg(Buffer.concat(this._hash));
    return this._alg(Buffer.concat([
        this._opad,
        h
    ]));
};
module.exports = Hmac;

},{"inherits":"gmJTw","safe-buffer":"7V1Cd","cipher-base":"butKV"}],"iBWfw":[function(require,module,exports) {
var MD5 = require('md5.js');
module.exports = function(buffer) {
    return new MD5().update(buffer).digest();
};

},{"md5.js":"8VPAE"}],"krWDE":[function(require,module,exports) {
module.exports = require('./browser/algorithms.json');

},{"./browser/algorithms.json":"gn85U"}],"gn85U":[function(require,module,exports) {
module.exports = JSON.parse("{\"sha224WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"RSA-SHA224\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha224\",\"id\":\"302d300d06096086480165030402040500041c\"},\"sha256WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"RSA-SHA256\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha256\",\"id\":\"3031300d060960864801650304020105000420\"},\"sha384WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"RSA-SHA384\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha384\",\"id\":\"3041300d060960864801650304020205000430\"},\"sha512WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA512\":{\"sign\":\"ecdsa/rsa\",\"hash\":\"sha512\",\"id\":\"3051300d060960864801650304020305000440\"},\"RSA-SHA1\":{\"sign\":\"rsa\",\"hash\":\"sha1\",\"id\":\"3021300906052b0e03021a05000414\"},\"ecdsa-with-SHA1\":{\"sign\":\"ecdsa\",\"hash\":\"sha1\",\"id\":\"\"},\"sha256\":{\"sign\":\"ecdsa\",\"hash\":\"sha256\",\"id\":\"\"},\"sha224\":{\"sign\":\"ecdsa\",\"hash\":\"sha224\",\"id\":\"\"},\"sha384\":{\"sign\":\"ecdsa\",\"hash\":\"sha384\",\"id\":\"\"},\"sha512\":{\"sign\":\"ecdsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-SHA1\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA\":{\"sign\":\"dsa\",\"hash\":\"sha1\",\"id\":\"\"},\"DSA-WITH-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-SHA224\":{\"sign\":\"dsa\",\"hash\":\"sha224\",\"id\":\"\"},\"DSA-WITH-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-SHA256\":{\"sign\":\"dsa\",\"hash\":\"sha256\",\"id\":\"\"},\"DSA-WITH-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-SHA384\":{\"sign\":\"dsa\",\"hash\":\"sha384\",\"id\":\"\"},\"DSA-WITH-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-SHA512\":{\"sign\":\"dsa\",\"hash\":\"sha512\",\"id\":\"\"},\"DSA-RIPEMD160\":{\"sign\":\"dsa\",\"hash\":\"rmd160\",\"id\":\"\"},\"ripemd160WithRSA\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"RSA-RIPEMD160\":{\"sign\":\"rsa\",\"hash\":\"rmd160\",\"id\":\"3021300906052b2403020105000414\"},\"md5WithRSAEncryption\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"},\"RSA-MD5\":{\"sign\":\"rsa\",\"hash\":\"md5\",\"id\":\"3020300c06082a864886f70d020505000410\"}}");

},{}],"S22GI":[function(require,module,exports) {
exports.pbkdf2 = require('./lib/async');
exports.pbkdf2Sync = require('./lib/sync');

},{"./lib/async":"dFNRN","./lib/sync":"kGIz9"}],"dFNRN":[function(require,module,exports) {
var global = arguments[3];
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var sync = require('./sync');
var toBuffer = require('./to-buffer');
var ZERO_BUF;
var subtle = global.crypto && global.crypto.subtle;
var toBrowser = {
    sha: 'SHA-1',
    'sha-1': 'SHA-1',
    sha1: 'SHA-1',
    sha256: 'SHA-256',
    'sha-256': 'SHA-256',
    sha384: 'SHA-384',
    'sha-384': 'SHA-384',
    'sha-512': 'SHA-512',
    sha512: 'SHA-512'
};
var checks = [];
function checkNative(algo) {
    if (global.process && !global.process.browser) return Promise.resolve(false);
    if (!subtle || !subtle.importKey || !subtle.deriveBits) return Promise.resolve(false);
    if (checks[algo] !== undefined) return checks[algo];
    ZERO_BUF = ZERO_BUF || Buffer.alloc(8);
    var prom = browserPbkdf2(ZERO_BUF, ZERO_BUF, 10, 128, algo).then(function() {
        return true;
    }).catch(function() {
        return false;
    });
    checks[algo] = prom;
    return prom;
}
var nextTick;
function getNextTick() {
    if (nextTick) return nextTick;
    if (global.process && global.process.nextTick) nextTick = global.process.nextTick;
    else if (global.queueMicrotask) nextTick = global.queueMicrotask;
    else if (global.setImmediate) nextTick = global.setImmediate;
    else nextTick = global.setTimeout;
    return nextTick;
}
function browserPbkdf2(password, salt, iterations, length, algo) {
    return subtle.importKey('raw', password, {
        name: 'PBKDF2'
    }, false, [
        'deriveBits'
    ]).then(function(key) {
        return subtle.deriveBits({
            name: 'PBKDF2',
            salt: salt,
            iterations: iterations,
            hash: {
                name: algo
            }
        }, key, length << 3);
    }).then(function(res) {
        return Buffer.from(res);
    });
}
function resolvePromise(promise, callback) {
    promise.then(function(out) {
        getNextTick()(function() {
            callback(null, out);
        });
    }, function(e) {
        getNextTick()(function() {
            callback(e);
        });
    });
}
module.exports = function(password, salt, iterations, keylen, digest, callback) {
    if (typeof digest === 'function') {
        callback = digest;
        digest = undefined;
    }
    digest = digest || 'sha1';
    var algo = toBrowser[digest.toLowerCase()];
    if (!algo || typeof global.Promise !== 'function') {
        getNextTick()(function() {
            var out;
            try {
                out = sync(password, salt, iterations, keylen, digest);
            } catch (e) {
                return callback(e);
            }
            callback(null, out);
        });
        return;
    }
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    if (typeof callback !== 'function') throw new Error('No callback provided to pbkdf2');
    resolvePromise(checkNative(algo).then(function(resp) {
        if (resp) return browserPbkdf2(password, salt, iterations, keylen, algo);
        return sync(password, salt, iterations, keylen, digest);
    }), callback);
};

},{"safe-buffer":"7V1Cd","./precondition":"7xvvc","./default-encoding":"b1ZjZ","./sync":"kGIz9","./to-buffer":"xxVue"}],"7xvvc":[function(require,module,exports) {
var MAX_ALLOC = Math.pow(2, 30) - 1 // default in iojs
;
module.exports = function(iterations, keylen) {
    if (typeof iterations !== 'number') throw new TypeError('Iterations not a number');
    if (iterations < 0) throw new TypeError('Bad iterations');
    if (typeof keylen !== 'number') throw new TypeError('Key length not a number');
    if (keylen < 0 || keylen > MAX_ALLOC || keylen !== keylen) throw new TypeError('Bad key length');
};

},{}],"b1ZjZ":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
var defaultEncoding;
/* istanbul ignore next */ if (global.process && global.process.browser) defaultEncoding = 'utf-8';
else if (global.process && global.process.version) {
    var pVersionMajor = parseInt(process.version.split('.')[0].slice(1), 10);
    defaultEncoding = pVersionMajor >= 6 ? 'utf-8' : 'binary';
} else defaultEncoding = 'utf-8';
module.exports = defaultEncoding;

},{"process":"glFWE"}],"kGIz9":[function(require,module,exports) {
var md5 = require('create-hash/md5');
var RIPEMD160 = require('ripemd160');
var sha = require('sha.js');
var Buffer = require('safe-buffer').Buffer;
var checkParameters = require('./precondition');
var defaultEncoding = require('./default-encoding');
var toBuffer = require('./to-buffer');
var ZEROS = Buffer.alloc(128);
var sizes = {
    md5: 16,
    sha1: 20,
    sha224: 28,
    sha256: 32,
    sha384: 48,
    sha512: 64,
    rmd160: 20,
    ripemd160: 20
};
function Hmac(alg, key, saltLen) {
    var hash = getDigest(alg);
    var blocksize = alg === 'sha512' || alg === 'sha384' ? 128 : 64;
    if (key.length > blocksize) key = hash(key);
    else if (key.length < blocksize) key = Buffer.concat([
        key,
        ZEROS
    ], blocksize);
    var ipad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    var opad = Buffer.allocUnsafe(blocksize + sizes[alg]);
    for(var i = 0; i < blocksize; i++){
        ipad[i] = key[i] ^ 54;
        opad[i] = key[i] ^ 92;
    }
    var ipad1 = Buffer.allocUnsafe(blocksize + saltLen + 4);
    ipad.copy(ipad1, 0, 0, blocksize);
    this.ipad1 = ipad1;
    this.ipad2 = ipad;
    this.opad = opad;
    this.alg = alg;
    this.blocksize = blocksize;
    this.hash = hash;
    this.size = sizes[alg];
}
Hmac.prototype.run = function(data, ipad) {
    data.copy(ipad, this.blocksize);
    var h = this.hash(ipad);
    h.copy(this.opad, this.blocksize);
    return this.hash(this.opad);
};
function getDigest(alg) {
    function shaFunc(data) {
        return sha(alg).update(data).digest();
    }
    function rmd160Func(data) {
        return new RIPEMD160().update(data).digest();
    }
    if (alg === 'rmd160' || alg === 'ripemd160') return rmd160Func;
    if (alg === 'md5') return md5;
    return shaFunc;
}
function pbkdf2(password, salt, iterations, keylen, digest) {
    checkParameters(iterations, keylen);
    password = toBuffer(password, defaultEncoding, 'Password');
    salt = toBuffer(salt, defaultEncoding, 'Salt');
    digest = digest || 'sha1';
    var hmac = new Hmac(digest, password, salt.length);
    var DK = Buffer.allocUnsafe(keylen);
    var block1 = Buffer.allocUnsafe(salt.length + 4);
    salt.copy(block1, 0, 0, salt.length);
    var destPos = 0;
    var hLen = sizes[digest];
    var l = Math.ceil(keylen / hLen);
    for(var i = 1; i <= l; i++){
        block1.writeUInt32BE(i, salt.length);
        var T = hmac.run(block1, hmac.ipad1);
        var U = T;
        for(var j = 1; j < iterations; j++){
            U = hmac.run(U, hmac.ipad2);
            for(var k = 0; k < hLen; k++)T[k] ^= U[k];
        }
        T.copy(DK, destPos);
        destPos += hLen;
    }
    return DK;
}
module.exports = pbkdf2;

},{"create-hash/md5":"iBWfw","ripemd160":"k27dq","sha.js":"jV83O","safe-buffer":"7V1Cd","./precondition":"7xvvc","./default-encoding":"b1ZjZ","./to-buffer":"xxVue"}],"xxVue":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
module.exports = function(thing, encoding, name) {
    if (Buffer.isBuffer(thing)) return thing;
    else if (typeof thing === 'string') return Buffer.from(thing, encoding);
    else if (ArrayBuffer.isView(thing)) return Buffer.from(thing.buffer);
    else throw new TypeError(name + ' must be a string, a Buffer, a typed array or a DataView');
};

},{"safe-buffer":"7V1Cd"}],"bHjyE":[function(require,module,exports) {
var DES = require('browserify-des');
var aes = require('browserify-aes/browser');
var aesModes = require('browserify-aes/modes');
var desModes = require('browserify-des/modes');
var ebtk = require('evp_bytestokey');
function createCipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createCipheriv(suite, keys.key, keys.iv);
}
function createDecipher(suite, password) {
    suite = suite.toLowerCase();
    var keyLen, ivLen;
    if (aesModes[suite]) {
        keyLen = aesModes[suite].key;
        ivLen = aesModes[suite].iv;
    } else if (desModes[suite]) {
        keyLen = desModes[suite].key * 8;
        ivLen = desModes[suite].iv;
    } else throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, keyLen, ivLen);
    return createDecipheriv(suite, keys.key, keys.iv);
}
function createCipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createCipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite
    });
    throw new TypeError('invalid suite type');
}
function createDecipheriv(suite, key, iv) {
    suite = suite.toLowerCase();
    if (aesModes[suite]) return aes.createDecipheriv(suite, key, iv);
    if (desModes[suite]) return new DES({
        key: key,
        iv: iv,
        mode: suite,
        decrypt: true
    });
    throw new TypeError('invalid suite type');
}
function getCiphers() {
    return Object.keys(desModes).concat(aes.getCiphers());
}
exports.createCipher = exports.Cipher = createCipher;
exports.createCipheriv = exports.Cipheriv = createCipheriv;
exports.createDecipher = exports.Decipher = createDecipher;
exports.createDecipheriv = exports.Decipheriv = createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"browserify-des":"a6apZ","browserify-aes/browser":"VjFDn","browserify-aes/modes":"k8Gjw","browserify-des/modes":"6rEis","evp_bytestokey":"aoK0Y"}],"a6apZ":[function(require,module,exports) {
var CipherBase = require('cipher-base');
var des = require('des.js');
var inherits = require('inherits');
var Buffer = require('safe-buffer').Buffer;
var modes = {
    'des-ede3-cbc': des.CBC.instantiate(des.EDE),
    'des-ede3': des.EDE,
    'des-ede-cbc': des.CBC.instantiate(des.EDE),
    'des-ede': des.EDE,
    'des-cbc': des.CBC.instantiate(des.DES),
    'des-ecb': des.DES
};
modes.des = modes['des-cbc'];
modes.des3 = modes['des-ede3-cbc'];
module.exports = DES;
inherits(DES, CipherBase);
function DES(opts) {
    CipherBase.call(this);
    var modeName = opts.mode.toLowerCase();
    var mode = modes[modeName];
    var type;
    if (opts.decrypt) type = 'decrypt';
    else type = 'encrypt';
    var key = opts.key;
    if (!Buffer.isBuffer(key)) key = Buffer.from(key);
    if (modeName === 'des-ede' || modeName === 'des-ede-cbc') key = Buffer.concat([
        key,
        key.slice(0, 8)
    ]);
    var iv = opts.iv;
    if (!Buffer.isBuffer(iv)) iv = Buffer.from(iv);
    this._des = mode.create({
        key: key,
        iv: iv,
        type: type
    });
}
DES.prototype._update = function(data) {
    return Buffer.from(this._des.update(data));
};
DES.prototype._final = function() {
    return Buffer.from(this._des.final());
};

},{"cipher-base":"butKV","des.js":"eqlXb","inherits":"gmJTw","safe-buffer":"7V1Cd"}],"eqlXb":[function(require,module,exports) {
'use strict';
exports.utils = require('./des/utils');
exports.Cipher = require('./des/cipher');
exports.DES = require('./des/des');
exports.CBC = require('./des/cbc');
exports.EDE = require('./des/ede');

},{"./des/utils":"6npi6","./des/cipher":"3Wczg","./des/des":"39Fjr","./des/cbc":"8sLua","./des/ede":"iruFR"}],"6npi6":[function(require,module,exports) {
'use strict';
exports.readUInt32BE = function readUInt32BE(bytes, off) {
    var res = bytes[0 + off] << 24 | bytes[1 + off] << 16 | bytes[2 + off] << 8 | bytes[3 + off];
    return res >>> 0;
};
exports.writeUInt32BE = function writeUInt32BE(bytes, value, off) {
    bytes[0 + off] = value >>> 24;
    bytes[1 + off] = value >>> 16 & 255;
    bytes[2 + off] = value >>> 8 & 255;
    bytes[3 + off] = value & 255;
};
exports.ip = function ip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >>> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >>> j + i & 1;
        }
    }
    for(var i = 6; i >= 0; i -= 2){
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inR >>> j + i & 1;
        }
        for(var j = 1; j <= 25; j += 8){
            outR <<= 1;
            outR |= inL >>> j + i & 1;
        }
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.rip = function rip(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    for(var i = 0; i < 4; i++)for(var j = 24; j >= 0; j -= 8){
        outL <<= 1;
        outL |= inR >>> j + i & 1;
        outL <<= 1;
        outL |= inL >>> j + i & 1;
    }
    for(var i = 4; i < 8; i++)for(var j = 24; j >= 0; j -= 8){
        outR <<= 1;
        outR |= inR >>> j + i & 1;
        outR <<= 1;
        outR |= inL >>> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.pc1 = function pc1(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    // 7, 15, 23, 31, 39, 47, 55, 63
    // 6, 14, 22, 30, 39, 47, 55, 63
    // 5, 13, 21, 29, 39, 47, 55, 63
    // 4, 12, 20, 28
    for(var i = 7; i >= 5; i--){
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outL <<= 1;
            outL |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outL <<= 1;
        outL |= inR >> j + i & 1;
    }
    // 1, 9, 17, 25, 33, 41, 49, 57
    // 2, 10, 18, 26, 34, 42, 50, 58
    // 3, 11, 19, 27, 35, 43, 51, 59
    // 36, 44, 52, 60
    for(var i = 1; i <= 3; i++){
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inR >> j + i & 1;
        }
        for(var j = 0; j <= 24; j += 8){
            outR <<= 1;
            outR |= inL >> j + i & 1;
        }
    }
    for(var j = 0; j <= 24; j += 8){
        outR <<= 1;
        outR |= inL >> j + i & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.r28shl = function r28shl(num, shift) {
    return num << shift & 268435455 | num >>> 28 - shift;
};
var pc2table = [
    // inL => outL
    14,
    11,
    17,
    4,
    27,
    23,
    25,
    0,
    13,
    22,
    7,
    18,
    5,
    9,
    16,
    24,
    2,
    20,
    12,
    21,
    1,
    8,
    15,
    26,
    // inR => outR
    15,
    4,
    25,
    19,
    9,
    1,
    26,
    16,
    5,
    11,
    23,
    8,
    12,
    7,
    17,
    0,
    22,
    3,
    10,
    14,
    6,
    20,
    27,
    24
];
exports.pc2 = function pc2(inL, inR, out, off) {
    var outL = 0;
    var outR = 0;
    var len = pc2table.length >>> 1;
    for(var i = 0; i < len; i++){
        outL <<= 1;
        outL |= inL >>> pc2table[i] & 1;
    }
    for(var i = len; i < pc2table.length; i++){
        outR <<= 1;
        outR |= inR >>> pc2table[i] & 1;
    }
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
exports.expand = function expand(r, out, off) {
    var outL = 0;
    var outR = 0;
    outL = (r & 1) << 5 | r >>> 27;
    for(var i = 23; i >= 15; i -= 4){
        outL <<= 6;
        outL |= r >>> i & 63;
    }
    for(var i = 11; i >= 3; i -= 4){
        outR |= r >>> i & 63;
        outR <<= 6;
    }
    outR |= (r & 31) << 1 | r >>> 31;
    out[off + 0] = outL >>> 0;
    out[off + 1] = outR >>> 0;
};
var sTable = [
    14,
    0,
    4,
    15,
    13,
    7,
    1,
    4,
    2,
    14,
    15,
    2,
    11,
    13,
    8,
    1,
    3,
    10,
    10,
    6,
    6,
    12,
    12,
    11,
    5,
    9,
    9,
    5,
    0,
    3,
    7,
    8,
    4,
    15,
    1,
    12,
    14,
    8,
    8,
    2,
    13,
    4,
    6,
    9,
    2,
    1,
    11,
    7,
    15,
    5,
    12,
    11,
    9,
    3,
    7,
    14,
    3,
    10,
    10,
    0,
    5,
    6,
    0,
    13,
    15,
    3,
    1,
    13,
    8,
    4,
    14,
    7,
    6,
    15,
    11,
    2,
    3,
    8,
    4,
    14,
    9,
    12,
    7,
    0,
    2,
    1,
    13,
    10,
    12,
    6,
    0,
    9,
    5,
    11,
    10,
    5,
    0,
    13,
    14,
    8,
    7,
    10,
    11,
    1,
    10,
    3,
    4,
    15,
    13,
    4,
    1,
    2,
    5,
    11,
    8,
    6,
    12,
    7,
    6,
    12,
    9,
    0,
    3,
    5,
    2,
    14,
    15,
    9,
    10,
    13,
    0,
    7,
    9,
    0,
    14,
    9,
    6,
    3,
    3,
    4,
    15,
    6,
    5,
    10,
    1,
    2,
    13,
    8,
    12,
    5,
    7,
    14,
    11,
    12,
    4,
    11,
    2,
    15,
    8,
    1,
    13,
    1,
    6,
    10,
    4,
    13,
    9,
    0,
    8,
    6,
    15,
    9,
    3,
    8,
    0,
    7,
    11,
    4,
    1,
    15,
    2,
    14,
    12,
    3,
    5,
    11,
    10,
    5,
    14,
    2,
    7,
    12,
    7,
    13,
    13,
    8,
    14,
    11,
    3,
    5,
    0,
    6,
    6,
    15,
    9,
    0,
    10,
    3,
    1,
    4,
    2,
    7,
    8,
    2,
    5,
    12,
    11,
    1,
    12,
    10,
    4,
    14,
    15,
    9,
    10,
    3,
    6,
    15,
    9,
    0,
    0,
    6,
    12,
    10,
    11,
    1,
    7,
    13,
    13,
    8,
    15,
    9,
    1,
    4,
    3,
    5,
    14,
    11,
    5,
    12,
    2,
    7,
    8,
    2,
    4,
    14,
    2,
    14,
    12,
    11,
    4,
    2,
    1,
    12,
    7,
    4,
    10,
    7,
    11,
    13,
    6,
    1,
    8,
    5,
    5,
    0,
    3,
    15,
    15,
    10,
    13,
    3,
    0,
    9,
    14,
    8,
    9,
    6,
    4,
    11,
    2,
    8,
    1,
    12,
    11,
    7,
    10,
    1,
    13,
    14,
    7,
    2,
    8,
    13,
    15,
    6,
    9,
    15,
    12,
    0,
    5,
    9,
    6,
    10,
    3,
    4,
    0,
    5,
    14,
    3,
    12,
    10,
    1,
    15,
    10,
    4,
    15,
    2,
    9,
    7,
    2,
    12,
    6,
    9,
    8,
    5,
    0,
    6,
    13,
    1,
    3,
    13,
    4,
    14,
    14,
    0,
    7,
    11,
    5,
    3,
    11,
    8,
    9,
    4,
    14,
    3,
    15,
    2,
    5,
    12,
    2,
    9,
    8,
    5,
    12,
    15,
    3,
    10,
    7,
    11,
    0,
    14,
    4,
    1,
    10,
    7,
    1,
    6,
    13,
    0,
    11,
    8,
    6,
    13,
    4,
    13,
    11,
    0,
    2,
    11,
    14,
    7,
    15,
    4,
    0,
    9,
    8,
    1,
    13,
    10,
    3,
    14,
    12,
    3,
    9,
    5,
    7,
    12,
    5,
    2,
    10,
    15,
    6,
    8,
    1,
    6,
    1,
    6,
    4,
    11,
    11,
    13,
    13,
    8,
    12,
    1,
    3,
    4,
    7,
    10,
    14,
    7,
    10,
    9,
    15,
    5,
    6,
    0,
    8,
    15,
    0,
    14,
    5,
    2,
    9,
    3,
    2,
    12,
    13,
    1,
    2,
    15,
    8,
    13,
    4,
    8,
    6,
    10,
    15,
    3,
    11,
    7,
    1,
    4,
    10,
    12,
    9,
    5,
    3,
    6,
    14,
    11,
    5,
    0,
    0,
    14,
    12,
    9,
    7,
    2,
    7,
    2,
    11,
    1,
    4,
    14,
    1,
    7,
    9,
    4,
    12,
    10,
    14,
    8,
    2,
    13,
    0,
    15,
    6,
    12,
    10,
    9,
    13,
    0,
    15,
    3,
    3,
    5,
    5,
    6,
    8,
    11
];
exports.substitute = function substitute(inL, inR) {
    var out = 0;
    for(var i = 0; i < 4; i++){
        var b = inL >>> 18 - i * 6 & 63;
        var sb = sTable[i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    for(var i = 0; i < 4; i++){
        var b = inR >>> 18 - i * 6 & 63;
        var sb = sTable[256 + i * 64 + b];
        out <<= 4;
        out |= sb;
    }
    return out >>> 0;
};
var permuteTable = [
    16,
    25,
    12,
    11,
    3,
    20,
    4,
    15,
    31,
    17,
    9,
    6,
    27,
    14,
    1,
    22,
    30,
    24,
    8,
    18,
    0,
    5,
    29,
    23,
    13,
    19,
    2,
    26,
    10,
    21,
    28,
    7
];
exports.permute = function permute(num) {
    var out = 0;
    for(var i = 0; i < permuteTable.length; i++){
        out <<= 1;
        out |= num >>> permuteTable[i] & 1;
    }
    return out >>> 0;
};
exports.padSplit = function padSplit(num, size, group) {
    var str = num.toString(2);
    while(str.length < size)str = '0' + str;
    var out = [];
    for(var i = 0; i < size; i += group)out.push(str.slice(i, i + group));
    return out.join(' ');
};

},{}],"3Wczg":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
function Cipher(options) {
    this.options = options;
    this.type = this.options.type;
    this.blockSize = 8;
    this._init();
    this.buffer = new Array(this.blockSize);
    this.bufferOff = 0;
}
module.exports = Cipher;
Cipher.prototype._init = function _init() {
// Might be overrided
};
Cipher.prototype.update = function update(data) {
    if (data.length === 0) return [];
    if (this.type === 'decrypt') return this._updateDecrypt(data);
    else return this._updateEncrypt(data);
};
Cipher.prototype._buffer = function _buffer(data, off) {
    // Append data to buffer
    var min = Math.min(this.buffer.length - this.bufferOff, data.length - off);
    for(var i = 0; i < min; i++)this.buffer[this.bufferOff + i] = data[off + i];
    this.bufferOff += min;
    // Shift next
    return min;
};
Cipher.prototype._flushBuffer = function _flushBuffer(out, off) {
    this._update(this.buffer, 0, out, off);
    this.bufferOff = 0;
    return this.blockSize;
};
Cipher.prototype._updateEncrypt = function _updateEncrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = (this.bufferOff + data.length) / this.blockSize | 0;
    var out = new Array(count * this.blockSize);
    if (this.bufferOff !== 0) {
        inputOff += this._buffer(data, inputOff);
        if (this.bufferOff === this.buffer.length) outputOff += this._flushBuffer(out, outputOff);
    }
    // Write blocks
    var max = data.length - (data.length - inputOff) % this.blockSize;
    for(; inputOff < max; inputOff += this.blockSize){
        this._update(data, inputOff, out, outputOff);
        outputOff += this.blockSize;
    }
    // Queue rest
    for(; inputOff < data.length; inputOff++, this.bufferOff++)this.buffer[this.bufferOff] = data[inputOff];
    return out;
};
Cipher.prototype._updateDecrypt = function _updateDecrypt(data) {
    var inputOff = 0;
    var outputOff = 0;
    var count = Math.ceil((this.bufferOff + data.length) / this.blockSize) - 1;
    var out = new Array(count * this.blockSize);
    // TODO(indutny): optimize it, this is far from optimal
    for(; count > 0; count--){
        inputOff += this._buffer(data, inputOff);
        outputOff += this._flushBuffer(out, outputOff);
    }
    // Buffer rest of the input
    inputOff += this._buffer(data, inputOff);
    return out;
};
Cipher.prototype.final = function final(buffer) {
    var first;
    if (buffer) first = this.update(buffer);
    var last;
    if (this.type === 'encrypt') last = this._finalEncrypt();
    else last = this._finalDecrypt();
    if (first) return first.concat(last);
    else return last;
};
Cipher.prototype._pad = function _pad(buffer, off) {
    if (off === 0) return false;
    while(off < buffer.length)buffer[off++] = 0;
    return true;
};
Cipher.prototype._finalEncrypt = function _finalEncrypt() {
    if (!this._pad(this.buffer, this.bufferOff)) return [];
    var out = new Array(this.blockSize);
    this._update(this.buffer, 0, out, 0);
    return out;
};
Cipher.prototype._unpad = function _unpad(buffer) {
    return buffer;
};
Cipher.prototype._finalDecrypt = function _finalDecrypt() {
    assert.equal(this.bufferOff, this.blockSize, 'Not enough data to decrypt');
    var out = new Array(this.blockSize);
    this._flushBuffer(out, 0);
    return this._unpad(out);
};

},{"minimalistic-assert":"af22k"}],"af22k":[function(require,module,exports) {
module.exports = assert;
function assert(val, msg) {
    if (!val) throw new Error(msg || 'Assertion failed');
}
assert.equal = function assertEqual(l, r, msg) {
    if (l != r) throw new Error(msg || 'Assertion failed: ' + l + ' != ' + r);
};

},{}],"39Fjr":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var utils = require('./utils');
var Cipher = require('./cipher');
function DESState() {
    this.tmp = new Array(2);
    this.keys = null;
}
function DES(options) {
    Cipher.call(this, options);
    var state = new DESState();
    this._desState = state;
    this.deriveKeys(state, options.key);
}
inherits(DES, Cipher);
module.exports = DES;
DES.create = function create(options) {
    return new DES(options);
};
var shiftTable = [
    1,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1,
    2,
    2,
    2,
    2,
    2,
    2,
    1
];
DES.prototype.deriveKeys = function deriveKeys(state, key) {
    state.keys = new Array(32);
    assert.equal(key.length, this.blockSize, 'Invalid key length');
    var kL = utils.readUInt32BE(key, 0);
    var kR = utils.readUInt32BE(key, 4);
    utils.pc1(kL, kR, state.tmp, 0);
    kL = state.tmp[0];
    kR = state.tmp[1];
    for(var i = 0; i < state.keys.length; i += 2){
        var shift = shiftTable[i >>> 1];
        kL = utils.r28shl(kL, shift);
        kR = utils.r28shl(kR, shift);
        utils.pc2(kL, kR, state.keys, i);
    }
};
DES.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._desState;
    var l = utils.readUInt32BE(inp, inOff);
    var r = utils.readUInt32BE(inp, inOff + 4);
    // Initial Permutation
    utils.ip(l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    if (this.type === 'encrypt') this._encrypt(state, l, r, state.tmp, 0);
    else this._decrypt(state, l, r, state.tmp, 0);
    l = state.tmp[0];
    r = state.tmp[1];
    utils.writeUInt32BE(out, l, outOff);
    utils.writeUInt32BE(out, r, outOff + 4);
};
DES.prototype._pad = function _pad(buffer, off) {
    var value = buffer.length - off;
    for(var i = off; i < buffer.length; i++)buffer[i] = value;
    return true;
};
DES.prototype._unpad = function _unpad(buffer) {
    var pad = buffer[buffer.length - 1];
    for(var i = buffer.length - pad; i < buffer.length; i++)assert.equal(buffer[i], pad);
    return buffer.slice(0, buffer.length - pad);
};
DES.prototype._encrypt = function _encrypt(state, lStart, rStart, out, off) {
    var l = lStart;
    var r = rStart;
    // Apply f() x16 times
    for(var i = 0; i < state.keys.length; i += 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(r, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = r;
        r = (l ^ f) >>> 0;
        l = t;
    }
    // Reverse Initial Permutation
    utils.rip(r, l, out, off);
};
DES.prototype._decrypt = function _decrypt(state, lStart, rStart, out, off) {
    var l = rStart;
    var r = lStart;
    // Apply f() x16 times
    for(var i = state.keys.length - 2; i >= 0; i -= 2){
        var keyL = state.keys[i];
        var keyR = state.keys[i + 1];
        // f(r, k)
        utils.expand(l, state.tmp, 0);
        keyL ^= state.tmp[0];
        keyR ^= state.tmp[1];
        var s = utils.substitute(keyL, keyR);
        var f = utils.permute(s);
        var t = l;
        l = (r ^ f) >>> 0;
        r = t;
    }
    // Reverse Initial Permutation
    utils.rip(l, r, out, off);
};

},{"minimalistic-assert":"af22k","inherits":"gmJTw","./utils":"6npi6","./cipher":"3Wczg"}],"8sLua":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var proto = {
};
function CBCState(iv) {
    assert.equal(iv.length, 8, 'Invalid IV length');
    this.iv = new Array(8);
    for(var i = 0; i < this.iv.length; i++)this.iv[i] = iv[i];
}
function instantiate(Base) {
    function CBC(options) {
        Base.call(this, options);
        this._cbcInit();
    }
    inherits(CBC, Base);
    var keys = Object.keys(proto);
    for(var i = 0; i < keys.length; i++){
        var key = keys[i];
        CBC.prototype[key] = proto[key];
    }
    CBC.create = function create(options) {
        return new CBC(options);
    };
    return CBC;
}
exports.instantiate = instantiate;
proto._cbcInit = function _cbcInit() {
    var state = new CBCState(this.options.iv);
    this._cbcState = state;
};
proto._update = function _update(inp, inOff, out, outOff) {
    var state = this._cbcState;
    var superProto = this.constructor.super_.prototype;
    var iv = state.iv;
    if (this.type === 'encrypt') {
        for(var i = 0; i < this.blockSize; i++)iv[i] ^= inp[inOff + i];
        superProto._update.call(this, iv, 0, out, outOff);
        for(var i = 0; i < this.blockSize; i++)iv[i] = out[outOff + i];
    } else {
        superProto._update.call(this, inp, inOff, out, outOff);
        for(var i = 0; i < this.blockSize; i++)out[outOff + i] ^= iv[i];
        for(var i = 0; i < this.blockSize; i++)iv[i] = inp[inOff + i];
    }
};

},{"minimalistic-assert":"af22k","inherits":"gmJTw"}],"iruFR":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
var Cipher = require('./cipher');
var DES = require('./des');
function EDEState(type, key) {
    assert.equal(key.length, 24, 'Invalid key length');
    var k1 = key.slice(0, 8);
    var k2 = key.slice(8, 16);
    var k3 = key.slice(16, 24);
    if (type === 'encrypt') this.ciphers = [
        DES.create({
            type: 'encrypt',
            key: k1
        }),
        DES.create({
            type: 'decrypt',
            key: k2
        }),
        DES.create({
            type: 'encrypt',
            key: k3
        })
    ];
    else this.ciphers = [
        DES.create({
            type: 'decrypt',
            key: k3
        }),
        DES.create({
            type: 'encrypt',
            key: k2
        }),
        DES.create({
            type: 'decrypt',
            key: k1
        })
    ];
}
function EDE(options) {
    Cipher.call(this, options);
    var state = new EDEState(this.type, this.options.key);
    this._edeState = state;
}
inherits(EDE, Cipher);
module.exports = EDE;
EDE.create = function create(options) {
    return new EDE(options);
};
EDE.prototype._update = function _update(inp, inOff, out, outOff) {
    var state = this._edeState;
    state.ciphers[0]._update(inp, inOff, out, outOff);
    state.ciphers[1]._update(out, outOff, out, outOff);
    state.ciphers[2]._update(out, outOff, out, outOff);
};
EDE.prototype._pad = DES.prototype._pad;
EDE.prototype._unpad = DES.prototype._unpad;

},{"minimalistic-assert":"af22k","inherits":"gmJTw","./cipher":"3Wczg","./des":"39Fjr"}],"VjFDn":[function(require,module,exports) {
var ciphers = require('./encrypter');
var deciphers = require('./decrypter');
var modes = require('./modes/list.json');
function getCiphers() {
    return Object.keys(modes);
}
exports.createCipher = exports.Cipher = ciphers.createCipher;
exports.createCipheriv = exports.Cipheriv = ciphers.createCipheriv;
exports.createDecipher = exports.Decipher = deciphers.createDecipher;
exports.createDecipheriv = exports.Decipheriv = deciphers.createDecipheriv;
exports.listCiphers = exports.getCiphers = getCiphers;

},{"./encrypter":"f9PSX","./decrypter":"6gyKn","./modes/list.json":"hrOew"}],"f9PSX":[function(require,module,exports) {
var MODES = require('./modes');
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Cipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Cipher, Transform);
Cipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get()){
        thing = this._mode.encrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
var PADDING = Buffer.alloc(16, 16);
Cipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) {
        chunk = this._mode.encrypt(this, chunk);
        this._cipher.scrub();
        return chunk;
    }
    if (!chunk.equals(PADDING)) {
        this._cipher.scrub();
        throw new Error('data not multiple of block length');
    }
};
Cipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function() {
    if (this.cache.length > 15) {
        var out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    var len = 16 - this.cache.length;
    var padBuff = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)padBuff.writeUInt8(len, i);
    return Buffer.concat([
        this.cache,
        padBuff
    ]);
};
function createCipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv);
    return new Cipher(config.module, password, iv);
}
function createCipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createCipheriv(suite, keys.key, keys.iv);
}
exports.createCipheriv = createCipheriv;
exports.createCipher = createCipher;

},{"./modes":"k8Gjw","./authCipher":"7eifx","safe-buffer":"7V1Cd","./streamCipher":"aEuIs","cipher-base":"butKV","./aes":"6OKZf","evp_bytestokey":"aoK0Y","inherits":"gmJTw"}],"k8Gjw":[function(require,module,exports) {
var modeModules = {
    ECB: require('./ecb'),
    CBC: require('./cbc'),
    CFB: require('./cfb'),
    CFB8: require('./cfb8'),
    CFB1: require('./cfb1'),
    OFB: require('./ofb'),
    CTR: require('./ctr'),
    GCM: require('./ctr')
};
var modes = require('./list.json');
for(var key in modes)modes[key].module = modeModules[modes[key].mode];
module.exports = modes;

},{"./ecb":"23rAs","./cbc":"1TFyX","./cfb":"8aJKj","./cfb8":"biT5v","./cfb1":"dJWk6","./ofb":"diUD4","./ctr":"5qlpn","./list.json":"hrOew"}],"23rAs":[function(require,module,exports) {
exports.encrypt = function(self, block) {
    return self._cipher.encryptBlock(block);
};
exports.decrypt = function(self, block) {
    return self._cipher.decryptBlock(block);
};

},{}],"1TFyX":[function(require,module,exports) {
var xor = require('buffer-xor');
exports.encrypt = function(self, block) {
    var data = xor(block, self._prev);
    self._prev = self._cipher.encryptBlock(data);
    return self._prev;
};
exports.decrypt = function(self, block) {
    var pad = self._prev;
    self._prev = block;
    var out = self._cipher.decryptBlock(block);
    return xor(out, pad);
};

},{"buffer-xor":"d3ug6"}],"d3ug6":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
module.exports = function xor(a, b) {
    var length = Math.min(a.length, b.length);
    var buffer = new Buffer(length);
    for(var i = 0; i < length; ++i)buffer[i] = a[i] ^ b[i];
    return buffer;
};

},{"buffer":"kPwYH"}],"8aJKj":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var xor = require('buffer-xor');
function encryptStart(self, data, decrypt) {
    var len = data.length;
    var out = xor(data, self._cache);
    self._cache = self._cache.slice(len);
    self._prev = Buffer.concat([
        self._prev,
        decrypt ? data : out
    ]);
    return out;
}
exports.encrypt = function(self, data, decrypt) {
    var out = Buffer.allocUnsafe(0);
    var len;
    while(data.length){
        if (self._cache.length === 0) {
            self._cache = self._cipher.encryptBlock(self._prev);
            self._prev = Buffer.allocUnsafe(0);
        }
        if (self._cache.length <= data.length) {
            len = self._cache.length;
            out = Buffer.concat([
                out,
                encryptStart(self, data.slice(0, len), decrypt)
            ]);
            data = data.slice(len);
        } else {
            out = Buffer.concat([
                out,
                encryptStart(self, data, decrypt)
            ]);
            break;
        }
    }
    return out;
};

},{"safe-buffer":"7V1Cd","buffer-xor":"d3ug6"}],"biT5v":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad = self._cipher.encryptBlock(self._prev);
    var out = pad[0] ^ byteParam;
    self._prev = Buffer.concat([
        self._prev.slice(1),
        Buffer.from([
            decrypt ? byteParam : out
        ])
    ]);
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"7V1Cd"}],"dJWk6":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
function encryptByte(self, byteParam, decrypt) {
    var pad;
    var i = -1;
    var len = 8;
    var out = 0;
    var bit, value;
    while((++i) < len){
        pad = self._cipher.encryptBlock(self._prev);
        bit = byteParam & 1 << 7 - i ? 128 : 0;
        value = pad[0] ^ bit;
        out += (value & 128) >> i % 8;
        self._prev = shiftIn(self._prev, decrypt ? bit : value);
    }
    return out;
}
function shiftIn(buffer, value) {
    var len = buffer.length;
    var i = -1;
    var out = Buffer.allocUnsafe(buffer.length);
    buffer = Buffer.concat([
        buffer,
        Buffer.from([
            value
        ])
    ]);
    while((++i) < len)out[i] = buffer[i] << 1 | buffer[i + 1] >> 7;
    return out;
}
exports.encrypt = function(self, chunk, decrypt) {
    var len = chunk.length;
    var out = Buffer.allocUnsafe(len);
    var i = -1;
    while((++i) < len)out[i] = encryptByte(self, chunk[i], decrypt);
    return out;
};

},{"safe-buffer":"7V1Cd"}],"diUD4":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var xor = require('buffer-xor');
function getBlock(self) {
    self._prev = self._cipher.encryptBlock(self._prev);
    return self._prev;
}
exports.encrypt = function(self, chunk) {
    while(self._cache.length < chunk.length)self._cache = Buffer.concat([
        self._cache,
        getBlock(self)
    ]);
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer":"kPwYH","buffer-xor":"d3ug6"}],"5qlpn":[function(require,module,exports) {
var xor = require('buffer-xor');
var Buffer = require('safe-buffer').Buffer;
var incr32 = require('../incr32');
function getBlock(self) {
    var out = self._cipher.encryptBlockRaw(self._prev);
    incr32(self._prev);
    return out;
}
var blockSize = 16;
exports.encrypt = function(self, chunk) {
    var chunkNum = Math.ceil(chunk.length / blockSize);
    var start = self._cache.length;
    self._cache = Buffer.concat([
        self._cache,
        Buffer.allocUnsafe(chunkNum * blockSize)
    ]);
    for(var i = 0; i < chunkNum; i++){
        var out = getBlock(self);
        var offset = start + i * blockSize;
        self._cache.writeUInt32BE(out[0], offset + 0);
        self._cache.writeUInt32BE(out[1], offset + 4);
        self._cache.writeUInt32BE(out[2], offset + 8);
        self._cache.writeUInt32BE(out[3], offset + 12);
    }
    var pad = self._cache.slice(0, chunk.length);
    self._cache = self._cache.slice(chunk.length);
    return xor(chunk, pad);
};

},{"buffer-xor":"d3ug6","safe-buffer":"7V1Cd","../incr32":"bf6rS"}],"bf6rS":[function(require,module,exports) {
function incr32(iv) {
    var len = iv.length;
    var item;
    while(len--){
        item = iv.readUInt8(len);
        if (item === 255) iv.writeUInt8(0, len);
        else {
            item++;
            iv.writeUInt8(item, len);
            break;
        }
    }
}
module.exports = incr32;

},{}],"hrOew":[function(require,module,exports) {
module.exports = JSON.parse("{\"aes-128-ecb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-192-ecb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-256-ecb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":0,\"mode\":\"ECB\",\"type\":\"block\"},\"aes-128-cbc\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-192-cbc\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-256-cbc\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes128\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes192\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes256\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CBC\",\"type\":\"block\"},\"aes-128-cfb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-192-cfb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-256-cfb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB\",\"type\":\"stream\"},\"aes-128-cfb8\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-192-cfb8\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-256-cfb8\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB8\",\"type\":\"stream\"},\"aes-128-cfb1\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-192-cfb1\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-256-cfb1\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CFB1\",\"type\":\"stream\"},\"aes-128-ofb\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-192-ofb\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-256-ofb\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"OFB\",\"type\":\"stream\"},\"aes-128-ctr\":{\"cipher\":\"AES\",\"key\":128,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-192-ctr\":{\"cipher\":\"AES\",\"key\":192,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-256-ctr\":{\"cipher\":\"AES\",\"key\":256,\"iv\":16,\"mode\":\"CTR\",\"type\":\"stream\"},\"aes-128-gcm\":{\"cipher\":\"AES\",\"key\":128,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-192-gcm\":{\"cipher\":\"AES\",\"key\":192,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"},\"aes-256-gcm\":{\"cipher\":\"AES\",\"key\":256,\"iv\":12,\"mode\":\"GCM\",\"type\":\"auth\"}}");

},{}],"7eifx":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
var GHASH = require('./ghash');
var xor = require('buffer-xor');
var incr32 = require('./incr32');
function xorTest(a, b) {
    var out = 0;
    if (a.length !== b.length) out++;
    var len = Math.min(a.length, b.length);
    for(var i = 0; i < len; ++i)out += a[i] ^ b[i];
    return out;
}
function calcIv(self, iv, ck) {
    if (iv.length === 12) {
        self._finID = Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                1
            ])
        ]);
        return Buffer.concat([
            iv,
            Buffer.from([
                0,
                0,
                0,
                2
            ])
        ]);
    }
    var ghash = new GHASH(ck);
    var len = iv.length;
    var toPad = len % 16;
    ghash.update(iv);
    if (toPad) {
        toPad = 16 - toPad;
        ghash.update(Buffer.alloc(toPad, 0));
    }
    ghash.update(Buffer.alloc(8, 0));
    var ivBits = len * 8;
    var tail = Buffer.alloc(8);
    tail.writeUIntBE(ivBits, 0, 8);
    ghash.update(tail);
    self._finID = ghash.state;
    var out = Buffer.from(self._finID);
    incr32(out);
    return out;
}
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    var h = Buffer.alloc(4, 0);
    this._cipher = new aes.AES(key);
    var ck = this._cipher.encryptBlock(h);
    this._ghash = new GHASH(ck);
    iv = calcIv(this, iv, ck);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._alen = 0;
    this._len = 0;
    this._mode = mode;
    this._authTag = null;
    this._called = false;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    if (!this._called && this._alen) {
        var rump = 16 - this._alen % 16;
        if (rump < 16) {
            rump = Buffer.alloc(rump, 0);
            this._ghash.update(rump);
        }
    }
    this._called = true;
    var out = this._mode.encrypt(this, chunk);
    if (this._decrypt) this._ghash.update(chunk);
    else this._ghash.update(out);
    this._len += chunk.length;
    return out;
};
StreamCipher.prototype._final = function() {
    if (this._decrypt && !this._authTag) throw new Error('Unsupported state or unable to authenticate data');
    var tag = xor(this._ghash.final(this._alen * 8, this._len * 8), this._cipher.encryptBlock(this._finID));
    if (this._decrypt && xorTest(tag, this._authTag)) throw new Error('Unsupported state or unable to authenticate data');
    this._authTag = tag;
    this._cipher.scrub();
};
StreamCipher.prototype.getAuthTag = function getAuthTag() {
    if (this._decrypt || !Buffer.isBuffer(this._authTag)) throw new Error('Attempting to get auth tag in unsupported state');
    return this._authTag;
};
StreamCipher.prototype.setAuthTag = function setAuthTag(tag) {
    if (!this._decrypt) throw new Error('Attempting to set auth tag in unsupported state');
    this._authTag = tag;
};
StreamCipher.prototype.setAAD = function setAAD(buf) {
    if (this._called) throw new Error('Attempting to set AAD in unsupported state');
    this._ghash.update(buf);
    this._alen += buf.length;
};
module.exports = StreamCipher;

},{"./aes":"6OKZf","safe-buffer":"7V1Cd","cipher-base":"butKV","inherits":"gmJTw","./ghash":"knwu8","buffer-xor":"d3ug6","./incr32":"bf6rS"}],"6OKZf":[function(require,module,exports) {
// based on the aes implimentation in triple sec
// https://github.com/keybase/triplesec
// which is in turn based on the one from crypto-js
// https://code.google.com/p/crypto-js/
var Buffer = require('safe-buffer').Buffer;
function asUInt32Array(buf) {
    if (!Buffer.isBuffer(buf)) buf = Buffer.from(buf);
    var len = buf.length / 4 | 0;
    var out = new Array(len);
    for(var i = 0; i < len; i++)out[i] = buf.readUInt32BE(i * 4);
    return out;
}
function scrubVec(v) {
    for(var i = 0; i < v.length; v++)v[i] = 0;
}
function cryptBlock(M, keySchedule, SUB_MIX, SBOX, nRounds) {
    var SUB_MIX0 = SUB_MIX[0];
    var SUB_MIX1 = SUB_MIX[1];
    var SUB_MIX2 = SUB_MIX[2];
    var SUB_MIX3 = SUB_MIX[3];
    var s0 = M[0] ^ keySchedule[0];
    var s1 = M[1] ^ keySchedule[1];
    var s2 = M[2] ^ keySchedule[2];
    var s3 = M[3] ^ keySchedule[3];
    var t0, t1, t2, t3;
    var ksRow = 4;
    for(var round = 1; round < nRounds; round++){
        t0 = SUB_MIX0[s0 >>> 24] ^ SUB_MIX1[s1 >>> 16 & 255] ^ SUB_MIX2[s2 >>> 8 & 255] ^ SUB_MIX3[s3 & 255] ^ keySchedule[ksRow++];
        t1 = SUB_MIX0[s1 >>> 24] ^ SUB_MIX1[s2 >>> 16 & 255] ^ SUB_MIX2[s3 >>> 8 & 255] ^ SUB_MIX3[s0 & 255] ^ keySchedule[ksRow++];
        t2 = SUB_MIX0[s2 >>> 24] ^ SUB_MIX1[s3 >>> 16 & 255] ^ SUB_MIX2[s0 >>> 8 & 255] ^ SUB_MIX3[s1 & 255] ^ keySchedule[ksRow++];
        t3 = SUB_MIX0[s3 >>> 24] ^ SUB_MIX1[s0 >>> 16 & 255] ^ SUB_MIX2[s1 >>> 8 & 255] ^ SUB_MIX3[s2 & 255] ^ keySchedule[ksRow++];
        s0 = t0;
        s1 = t1;
        s2 = t2;
        s3 = t3;
    }
    t0 = (SBOX[s0 >>> 24] << 24 | SBOX[s1 >>> 16 & 255] << 16 | SBOX[s2 >>> 8 & 255] << 8 | SBOX[s3 & 255]) ^ keySchedule[ksRow++];
    t1 = (SBOX[s1 >>> 24] << 24 | SBOX[s2 >>> 16 & 255] << 16 | SBOX[s3 >>> 8 & 255] << 8 | SBOX[s0 & 255]) ^ keySchedule[ksRow++];
    t2 = (SBOX[s2 >>> 24] << 24 | SBOX[s3 >>> 16 & 255] << 16 | SBOX[s0 >>> 8 & 255] << 8 | SBOX[s1 & 255]) ^ keySchedule[ksRow++];
    t3 = (SBOX[s3 >>> 24] << 24 | SBOX[s0 >>> 16 & 255] << 16 | SBOX[s1 >>> 8 & 255] << 8 | SBOX[s2 & 255]) ^ keySchedule[ksRow++];
    t0 = t0 >>> 0;
    t1 = t1 >>> 0;
    t2 = t2 >>> 0;
    t3 = t3 >>> 0;
    return [
        t0,
        t1,
        t2,
        t3
    ];
}
// AES constants
var RCON = [
    0,
    1,
    2,
    4,
    8,
    16,
    32,
    64,
    128,
    27,
    54
];
var G = function() {
    // Compute double table
    var d = new Array(256);
    for(var j = 0; j < 256; j++)if (j < 128) d[j] = j << 1;
    else d[j] = j << 1 ^ 283;
    var SBOX = [];
    var INV_SBOX = [];
    var SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    var INV_SUB_MIX = [
        [],
        [],
        [],
        []
    ];
    // Walk GF(2^8)
    var x = 0;
    var xi = 0;
    for(var i = 0; i < 256; ++i){
        // Compute sbox
        var sx = xi ^ xi << 1 ^ xi << 2 ^ xi << 3 ^ xi << 4;
        sx = sx >>> 8 ^ sx & 255 ^ 99;
        SBOX[x] = sx;
        INV_SBOX[sx] = x;
        // Compute multiplication
        var x2 = d[x];
        var x4 = d[x2];
        var x8 = d[x4];
        // Compute sub bytes, mix columns tables
        var t = d[sx] * 257 ^ sx * 16843008;
        SUB_MIX[0][x] = t << 24 | t >>> 8;
        SUB_MIX[1][x] = t << 16 | t >>> 16;
        SUB_MIX[2][x] = t << 8 | t >>> 24;
        SUB_MIX[3][x] = t;
        // Compute inv sub bytes, inv mix columns tables
        t = x8 * 16843009 ^ x4 * 65537 ^ x2 * 257 ^ x * 16843008;
        INV_SUB_MIX[0][sx] = t << 24 | t >>> 8;
        INV_SUB_MIX[1][sx] = t << 16 | t >>> 16;
        INV_SUB_MIX[2][sx] = t << 8 | t >>> 24;
        INV_SUB_MIX[3][sx] = t;
        if (x === 0) x = xi = 1;
        else {
            x = x2 ^ d[d[d[x8 ^ x2]]];
            xi ^= d[d[xi]];
        }
    }
    return {
        SBOX: SBOX,
        INV_SBOX: INV_SBOX,
        SUB_MIX: SUB_MIX,
        INV_SUB_MIX: INV_SUB_MIX
    };
}();
function AES(key) {
    this._key = asUInt32Array(key);
    this._reset();
}
AES.blockSize = 16;
AES.keySize = 32;
AES.prototype.blockSize = AES.blockSize;
AES.prototype.keySize = AES.keySize;
AES.prototype._reset = function() {
    var keyWords = this._key;
    var keySize = keyWords.length;
    var nRounds = keySize + 6;
    var ksRows = (nRounds + 1) * 4;
    var keySchedule = [];
    for(var k = 0; k < keySize; k++)keySchedule[k] = keyWords[k];
    for(k = keySize; k < ksRows; k++){
        var t = keySchedule[k - 1];
        if (k % keySize === 0) {
            t = t << 8 | t >>> 24;
            t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
            t ^= RCON[k / keySize | 0] << 24;
        } else if (keySize > 6 && k % keySize === 4) t = G.SBOX[t >>> 24] << 24 | G.SBOX[t >>> 16 & 255] << 16 | G.SBOX[t >>> 8 & 255] << 8 | G.SBOX[t & 255];
        keySchedule[k] = keySchedule[k - keySize] ^ t;
    }
    var invKeySchedule = [];
    for(var ik = 0; ik < ksRows; ik++){
        var ksR = ksRows - ik;
        var tt = keySchedule[ksR - (ik % 4 ? 0 : 4)];
        if (ik < 4 || ksR <= 4) invKeySchedule[ik] = tt;
        else invKeySchedule[ik] = G.INV_SUB_MIX[0][G.SBOX[tt >>> 24]] ^ G.INV_SUB_MIX[1][G.SBOX[tt >>> 16 & 255]] ^ G.INV_SUB_MIX[2][G.SBOX[tt >>> 8 & 255]] ^ G.INV_SUB_MIX[3][G.SBOX[tt & 255]];
    }
    this._nRounds = nRounds;
    this._keySchedule = keySchedule;
    this._invKeySchedule = invKeySchedule;
};
AES.prototype.encryptBlockRaw = function(M) {
    M = asUInt32Array(M);
    return cryptBlock(M, this._keySchedule, G.SUB_MIX, G.SBOX, this._nRounds);
};
AES.prototype.encryptBlock = function(M) {
    var out = this.encryptBlockRaw(M);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[1], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[3], 12);
    return buf;
};
AES.prototype.decryptBlock = function(M) {
    M = asUInt32Array(M);
    // swap
    var m1 = M[1];
    M[1] = M[3];
    M[3] = m1;
    var out = cryptBlock(M, this._invKeySchedule, G.INV_SUB_MIX, G.INV_SBOX, this._nRounds);
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0], 0);
    buf.writeUInt32BE(out[3], 4);
    buf.writeUInt32BE(out[2], 8);
    buf.writeUInt32BE(out[1], 12);
    return buf;
};
AES.prototype.scrub = function() {
    scrubVec(this._keySchedule);
    scrubVec(this._invKeySchedule);
    scrubVec(this._key);
};
module.exports.AES = AES;

},{"safe-buffer":"7V1Cd"}],"knwu8":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var ZEROES = Buffer.alloc(16, 0);
function toArray(buf) {
    return [
        buf.readUInt32BE(0),
        buf.readUInt32BE(4),
        buf.readUInt32BE(8),
        buf.readUInt32BE(12)
    ];
}
function fromArray(out) {
    var buf = Buffer.allocUnsafe(16);
    buf.writeUInt32BE(out[0] >>> 0, 0);
    buf.writeUInt32BE(out[1] >>> 0, 4);
    buf.writeUInt32BE(out[2] >>> 0, 8);
    buf.writeUInt32BE(out[3] >>> 0, 12);
    return buf;
}
function GHASH(key) {
    this.h = key;
    this.state = Buffer.alloc(16, 0);
    this.cache = Buffer.allocUnsafe(0);
}
// from http://bitwiseshiftleft.github.io/sjcl/doc/symbols/src/core_gcm.js.html
// by Juho Vähä-Herttua
GHASH.prototype.ghash = function(block) {
    var i = -1;
    while((++i) < block.length)this.state[i] ^= block[i];
    this._multiply();
};
GHASH.prototype._multiply = function() {
    var Vi = toArray(this.h);
    var Zi = [
        0,
        0,
        0,
        0
    ];
    var j, xi, lsbVi;
    var i = -1;
    while((++i) < 128){
        xi = (this.state[~~(i / 8)] & 1 << 7 - i % 8) !== 0;
        if (xi) {
            // Z_i+1 = Z_i ^ V_i
            Zi[0] ^= Vi[0];
            Zi[1] ^= Vi[1];
            Zi[2] ^= Vi[2];
            Zi[3] ^= Vi[3];
        }
        // Store the value of LSB(V_i)
        lsbVi = (Vi[3] & 1) !== 0;
        // V_i+1 = V_i >> 1
        for(j = 3; j > 0; j--)Vi[j] = Vi[j] >>> 1 | (Vi[j - 1] & 1) << 31;
        Vi[0] = Vi[0] >>> 1;
        // If LSB(V_i) is 1, V_i+1 = (V_i >> 1) ^ R
        if (lsbVi) Vi[0] = Vi[0] ^ -520093696;
    }
    this.state = fromArray(Zi);
};
GHASH.prototype.update = function(buf) {
    this.cache = Buffer.concat([
        this.cache,
        buf
    ]);
    var chunk;
    while(this.cache.length >= 16){
        chunk = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        this.ghash(chunk);
    }
};
GHASH.prototype.final = function(abl, bl) {
    if (this.cache.length) this.ghash(Buffer.concat([
        this.cache,
        ZEROES
    ], 16));
    this.ghash(fromArray([
        0,
        abl,
        0,
        bl
    ]));
    return this.state;
};
module.exports = GHASH;

},{"safe-buffer":"7V1Cd"}],"aEuIs":[function(require,module,exports) {
var aes = require('./aes');
var Buffer = require('safe-buffer').Buffer;
var Transform = require('cipher-base');
var inherits = require('inherits');
function StreamCipher(mode, key, iv, decrypt) {
    Transform.call(this);
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._cache = Buffer.allocUnsafe(0);
    this._secCache = Buffer.allocUnsafe(0);
    this._decrypt = decrypt;
    this._mode = mode;
}
inherits(StreamCipher, Transform);
StreamCipher.prototype._update = function(chunk) {
    return this._mode.encrypt(this, chunk, this._decrypt);
};
StreamCipher.prototype._final = function() {
    this._cipher.scrub();
};
module.exports = StreamCipher;

},{"./aes":"6OKZf","safe-buffer":"7V1Cd","cipher-base":"butKV","inherits":"gmJTw"}],"aoK0Y":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var MD5 = require('md5.js');
/* eslint-disable camelcase */ function EVP_BytesToKey(password, salt, keyBits, ivLen) {
    if (!Buffer.isBuffer(password)) password = Buffer.from(password, 'binary');
    if (salt) {
        if (!Buffer.isBuffer(salt)) salt = Buffer.from(salt, 'binary');
        if (salt.length !== 8) throw new RangeError('salt should be Buffer with 8 byte length');
    }
    var keyLen = keyBits / 8;
    var key = Buffer.alloc(keyLen);
    var iv = Buffer.alloc(ivLen || 0);
    var tmp = Buffer.alloc(0);
    while(keyLen > 0 || ivLen > 0){
        var hash = new MD5();
        hash.update(tmp);
        hash.update(password);
        if (salt) hash.update(salt);
        tmp = hash.digest();
        var used = 0;
        if (keyLen > 0) {
            var keyStart = key.length - keyLen;
            used = Math.min(keyLen, tmp.length);
            tmp.copy(key, keyStart, 0, used);
            keyLen -= used;
        }
        if (used < tmp.length && ivLen > 0) {
            var ivStart = iv.length - ivLen;
            var length = Math.min(ivLen, tmp.length - used);
            tmp.copy(iv, ivStart, used, used + length);
            ivLen -= length;
        }
    }
    tmp.fill(0);
    return {
        key: key,
        iv: iv
    };
}
module.exports = EVP_BytesToKey;

},{"safe-buffer":"7V1Cd","md5.js":"8VPAE"}],"6gyKn":[function(require,module,exports) {
var AuthCipher = require('./authCipher');
var Buffer = require('safe-buffer').Buffer;
var MODES = require('./modes');
var StreamCipher = require('./streamCipher');
var Transform = require('cipher-base');
var aes = require('./aes');
var ebtk = require('evp_bytestokey');
var inherits = require('inherits');
function Decipher(mode, key, iv) {
    Transform.call(this);
    this._cache = new Splitter();
    this._last = void 0;
    this._cipher = new aes.AES(key);
    this._prev = Buffer.from(iv);
    this._mode = mode;
    this._autopadding = true;
}
inherits(Decipher, Transform);
Decipher.prototype._update = function(data) {
    this._cache.add(data);
    var chunk;
    var thing;
    var out = [];
    while(chunk = this._cache.get(this._autopadding)){
        thing = this._mode.decrypt(this, chunk);
        out.push(thing);
    }
    return Buffer.concat(out);
};
Decipher.prototype._final = function() {
    var chunk = this._cache.flush();
    if (this._autopadding) return unpad(this._mode.decrypt(this, chunk));
    else if (chunk) throw new Error('data not multiple of block length');
};
Decipher.prototype.setAutoPadding = function(setTo) {
    this._autopadding = !!setTo;
    return this;
};
function Splitter() {
    this.cache = Buffer.allocUnsafe(0);
}
Splitter.prototype.add = function(data) {
    this.cache = Buffer.concat([
        this.cache,
        data
    ]);
};
Splitter.prototype.get = function(autoPadding) {
    var out;
    if (autoPadding) {
        if (this.cache.length > 16) {
            out = this.cache.slice(0, 16);
            this.cache = this.cache.slice(16);
            return out;
        }
    } else if (this.cache.length >= 16) {
        out = this.cache.slice(0, 16);
        this.cache = this.cache.slice(16);
        return out;
    }
    return null;
};
Splitter.prototype.flush = function() {
    if (this.cache.length) return this.cache;
};
function unpad(last) {
    var padded = last[15];
    if (padded < 1 || padded > 16) throw new Error('unable to decrypt data');
    var i = -1;
    while((++i) < padded){
        if (last[i + (16 - padded)] !== padded) throw new Error('unable to decrypt data');
    }
    if (padded === 16) return;
    return last.slice(0, 16 - padded);
}
function createDecipheriv(suite, password, iv) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    if (typeof iv === 'string') iv = Buffer.from(iv);
    if (config.mode !== 'GCM' && iv.length !== config.iv) throw new TypeError('invalid iv length ' + iv.length);
    if (typeof password === 'string') password = Buffer.from(password);
    if (password.length !== config.key / 8) throw new TypeError('invalid key length ' + password.length);
    if (config.type === 'stream') return new StreamCipher(config.module, password, iv, true);
    else if (config.type === 'auth') return new AuthCipher(config.module, password, iv, true);
    return new Decipher(config.module, password, iv);
}
function createDecipher(suite, password) {
    var config = MODES[suite.toLowerCase()];
    if (!config) throw new TypeError('invalid suite type');
    var keys = ebtk(password, false, config.key, config.iv);
    return createDecipheriv(suite, keys.key, keys.iv);
}
exports.createDecipher = createDecipher;
exports.createDecipheriv = createDecipheriv;

},{"./authCipher":"7eifx","safe-buffer":"7V1Cd","./modes":"k8Gjw","./streamCipher":"aEuIs","cipher-base":"butKV","./aes":"6OKZf","evp_bytestokey":"aoK0Y","inherits":"gmJTw"}],"6rEis":[function(require,module,exports) {
exports['des-ecb'] = {
    key: 8,
    iv: 0
};
exports['des-cbc'] = exports.des = {
    key: 8,
    iv: 8
};
exports['des-ede3-cbc'] = exports.des3 = {
    key: 24,
    iv: 8
};
exports['des-ede3'] = {
    key: 24,
    iv: 0
};
exports['des-ede-cbc'] = {
    key: 16,
    iv: 8
};
exports['des-ede'] = {
    key: 16,
    iv: 0
};

},{}],"avxdB":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var generatePrime = require('./lib/generatePrime');
var primes = require('./lib/primes.json');
var DH = require('./lib/dh');
function getDiffieHellman(mod) {
    var prime = new Buffer(primes[mod].prime, 'hex');
    var gen = new Buffer(primes[mod].gen, 'hex');
    return new DH(prime, gen);
}
var ENCODINGS = {
    'binary': true,
    'hex': true,
    'base64': true
};
function createDiffieHellman(prime, enc, generator, genc) {
    if (Buffer.isBuffer(enc) || ENCODINGS[enc] === undefined) return createDiffieHellman(prime, 'binary', enc, generator);
    enc = enc || 'binary';
    genc = genc || 'binary';
    generator = generator || new Buffer([
        2
    ]);
    if (!Buffer.isBuffer(generator)) generator = new Buffer(generator, genc);
    if (typeof prime === 'number') return new DH(generatePrime(prime, generator), generator, true);
    if (!Buffer.isBuffer(prime)) prime = new Buffer(prime, enc);
    return new DH(prime, generator, true);
}
exports.DiffieHellmanGroup = exports.createDiffieHellmanGroup = exports.getDiffieHellman = getDiffieHellman;
exports.createDiffieHellman = exports.DiffieHellman = createDiffieHellman;

},{"buffer":"kPwYH","./lib/generatePrime":"jxseI","./lib/primes.json":"5iu2X","./lib/dh":"e4Apa"}],"jxseI":[function(require,module,exports) {
var randomBytes = require('randombytes');
module.exports = findPrime;
findPrime.simpleSieve = simpleSieve;
findPrime.fermatTest = fermatTest;
var BN = require('bn.js');
var TWENTYFOUR = new BN(24);
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var ONE = new BN(1);
var TWO = new BN(2);
var FIVE = new BN(5);
var SIXTEEN = new BN(16);
var EIGHT = new BN(8);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var ELEVEN = new BN(11);
var FOUR = new BN(4);
var TWELVE = new BN(12);
var primes = null;
function _getPrimes() {
    if (primes !== null) return primes;
    var limit = 1048576;
    var res = [];
    res[0] = 2;
    for(var i = 1, k = 3; k < limit; k += 2){
        var sqrt = Math.ceil(Math.sqrt(k));
        for(var j = 0; j < i && res[j] <= sqrt; j++)if (k % res[j] === 0) break;
        if (i !== j && res[j] <= sqrt) continue;
        res[i++] = k;
    }
    primes = res;
    return res;
}
function simpleSieve(p) {
    var primes1 = _getPrimes();
    for(var i = 0; i < primes1.length; i++)if (p.modn(primes1[i]) === 0) {
        if (p.cmpn(primes1[i]) === 0) return true;
        else return false;
    }
    return true;
}
function fermatTest(p) {
    var red = BN.mont(p);
    return TWO.toRed(red).redPow(p.subn(1)).fromRed().cmpn(1) === 0;
}
function findPrime(bits, gen) {
    if (bits < 16) {
        // this is what openssl does
        if (gen === 2 || gen === 5) return new BN([
            140,
            123
        ]);
        else return new BN([
            140,
            39
        ]);
    }
    gen = new BN(gen);
    var num, n2;
    while(true){
        num = new BN(randomBytes(Math.ceil(bits / 8)));
        while(num.bitLength() > bits)num.ishrn(1);
        if (num.isEven()) num.iadd(ONE);
        if (!num.testn(1)) num.iadd(TWO);
        if (!gen.cmp(TWO)) while(num.mod(TWENTYFOUR).cmp(ELEVEN))num.iadd(FOUR);
        else if (!gen.cmp(FIVE)) while(num.mod(TEN).cmp(THREE))num.iadd(FOUR);
        n2 = num.shrn(1);
        if (simpleSieve(n2) && simpleSieve(num) && fermatTest(n2) && fermatTest(num) && millerRabin.test(n2) && millerRabin.test(num)) return num;
    }
}

},{"randombytes":"8w7G4","bn.js":"3VXSG","miller-rabin":"hS6Ct"}],"3VXSG":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this.strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // 'A' - 'F'
        if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else return c - 48 & 15;
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this.strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) r += c - 49 + 10;
            else if (c >= 17) r += c - 17 + 10;
            else r += c;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this.strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype.strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    BN.prototype.inspect = function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    };
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16);
    };
    BN.prototype.toBuffer = function toBuffer(endian, length) {
        assert(typeof Buffer !== 'undefined');
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        this.strip();
        var littleEndian = endian === 'le';
        var res = new ArrayType(reqLength);
        var b, i;
        var q = this.clone();
        if (!littleEndian) {
            // Assume big-endian
            for(i = 0; i < reqLength - byteLength; i++)res[i] = 0;
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[reqLength - i - 1] = b;
            }
        } else {
            for(i = 0; !q.isZero(); i++){
                b = q.andln(255);
                q.iushrn(8);
                res[i] = b;
            }
            for(; i < reqLength; i++)res[i] = 0;
        }
        return res;
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = (num.words[off] & 1 << wbit) >>> wbit;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this.strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this.strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this.strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this.strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this.strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this.strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out.strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out.strip();
    }
    function jumboMulTo(self, num, out) {
        var fftm = new FFTM();
        return fftm.mulp(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out.strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this.strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this.strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this.strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) < num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this.strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this.strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this.strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q.strip();
        a.strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modn = function modn(num) {
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return acc;
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        return this.strip();
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this.strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is BN v4 instance
        r.strip();
        else // r is BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        return a.umod(this.m)._forceRed(this);
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"lnuW3"}],"hS6Ct":[function(require,module,exports) {
var bn = require('bn.js');
var brorand = require('brorand');
function MillerRabin(rand) {
    this.rand = rand || new brorand.Rand();
}
module.exports = MillerRabin;
MillerRabin.create = function create(rand) {
    return new MillerRabin(rand);
};
MillerRabin.prototype._randbelow = function _randbelow(n) {
    var len = n.bitLength();
    var min_bytes = Math.ceil(len / 8);
    // Generage random bytes until a number less than n is found.
    // This ensures that 0..n-1 have an equal probability of being selected.
    do var a = new bn(this.rand.generate(min_bytes));
    while (a.cmp(n) >= 0)
    return a;
};
MillerRabin.prototype._randrange = function _randrange(start, stop) {
    // Generate a random number greater than or equal to start and less than stop.
    var size = stop.sub(start);
    return start.add(this._randbelow(size));
};
MillerRabin.prototype.test = function test(n, k, cb) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    var prime = true;
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        if (cb) cb(a);
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return false;
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) return false;
    }
    return prime;
};
MillerRabin.prototype.getDivisor = function getDivisor(n, k) {
    var len = n.bitLength();
    var red = bn.mont(n);
    var rone = new bn(1).toRed(red);
    if (!k) k = Math.max(1, len / 48 | 0);
    // Find d and s, (n - 1) = (2 ^ s) * d;
    var n1 = n.subn(1);
    for(var s = 0; !n1.testn(s); s++);
    var d = n.shrn(s);
    var rn1 = n1.toRed(red);
    for(; k > 0; k--){
        var a = this._randrange(new bn(2), n1);
        var g = n.gcd(a);
        if (g.cmpn(1) !== 0) return g;
        var x = a.toRed(red).redPow(d);
        if (x.cmp(rone) === 0 || x.cmp(rn1) === 0) continue;
        for(var i = 1; i < s; i++){
            x = x.redSqr();
            if (x.cmp(rone) === 0) return x.fromRed().subn(1).gcd(n);
            if (x.cmp(rn1) === 0) break;
        }
        if (i === s) {
            x = x.redSqr();
            return x.fromRed().subn(1).gcd(n);
        }
    }
    return false;
};

},{"bn.js":"3VXSG","brorand":"68k2j"}],"68k2j":[function(require,module,exports) {
var r;
module.exports = function rand(len) {
    if (!r) r = new Rand(null);
    return r.generate(len);
};
function Rand(rand1) {
    this.rand = rand1;
}
module.exports.Rand = Rand;
Rand.prototype.generate = function generate(len) {
    return this._rand(len);
};
// Emulate crypto API using randy
Rand.prototype._rand = function _rand(n) {
    if (this.rand.getBytes) return this.rand.getBytes(n);
    var res = new Uint8Array(n);
    for(var i = 0; i < res.length; i++)res[i] = this.rand.getByte();
    return res;
};
if (typeof self === 'object') {
    if (self.crypto && self.crypto.getRandomValues) // Modern browsers
    Rand.prototype._rand = function _rand1(n) {
        var arr = new Uint8Array(n);
        self.crypto.getRandomValues(arr);
        return arr;
    };
    else if (self.msCrypto && self.msCrypto.getRandomValues) // IE
    Rand.prototype._rand = function _rand2(n) {
        var arr = new Uint8Array(n);
        self.msCrypto.getRandomValues(arr);
        return arr;
    };
    else if (typeof window === 'object') // Old junk
    Rand.prototype._rand = function() {
        throw new Error('Not implemented yet');
    };
} else // Node.js or Web worker with no crypto support
try {
    var crypto = require('crypto');
    if (typeof crypto.randomBytes !== 'function') throw new Error('Not supported');
    Rand.prototype._rand = function _rand1(n) {
        return crypto.randomBytes(n);
    };
} catch (e) {
}

},{"crypto":"lnuW3"}],"5iu2X":[function(require,module,exports) {
module.exports = JSON.parse("{\"modp1\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a63a3620ffffffffffffffff\"},\"modp2\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece65381ffffffffffffffff\"},\"modp5\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca237327ffffffffffffffff\"},\"modp14\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aacaa68ffffffffffffffff\"},\"modp15\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a93ad2caffffffffffffffff\"},\"modp16\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c934063199ffffffffffffffff\"},\"modp17\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dcc4024ffffffffffffffff\"},\"modp18\":{\"gen\":\"02\",\"prime\":\"ffffffffffffffffc90fdaa22168c234c4c6628b80dc1cd129024e088a67cc74020bbea63b139b22514a08798e3404ddef9519b3cd3a431b302b0a6df25f14374fe1356d6d51c245e485b576625e7ec6f44c42e9a637ed6b0bff5cb6f406b7edee386bfb5a899fa5ae9f24117c4b1fe649286651ece45b3dc2007cb8a163bf0598da48361c55d39a69163fa8fd24cf5f83655d23dca3ad961c62f356208552bb9ed529077096966d670c354e4abc9804f1746c08ca18217c32905e462e36ce3be39e772c180e86039b2783a2ec07a28fb5c55df06f4c52c9de2bcbf6955817183995497cea956ae515d2261898fa051015728e5a8aaac42dad33170d04507a33a85521abdf1cba64ecfb850458dbef0a8aea71575d060c7db3970f85a6e1e4c7abf5ae8cdb0933d71e8c94e04a25619dcee3d2261ad2ee6bf12ffa06d98a0864d87602733ec86a64521f2b18177b200cbbe117577a615d6c770988c0bad946e208e24fa074e5ab3143db5bfce0fd108e4b82d120a92108011a723c12a787e6d788719a10bdba5b2699c327186af4e23c1a946834b6150bda2583e9ca2ad44ce8dbbbc2db04de8ef92e8efc141fbecaa6287c59474e6bc05d99b2964fa090c3a2233ba186515be7ed1f612970cee2d7afb81bdd762170481cd0069127d5b05aa993b4ea988d8fddc186ffb7dc90a6c08f4df435c93402849236c3fab4d27c7026c1d4dcb2602646dec9751e763dba37bdf8ff9406ad9e530ee5db382f413001aeb06a53ed9027d831179727b0865a8918da3edbebcf9b14ed44ce6cbaced4bb1bdb7f1447e6cc254b332051512bd7af426fb8f401378cd2bf5983ca01c64b92ecf032ea15d1721d03f482d7ce6e74fef6d55e702f46980c82b5a84031900b1c9e59e7c97fbec7e8f323a97a7e36cc88be0f1d45b7ff585ac54bd407b22b4154aacc8f6d7ebf48e1d814cc5ed20f8037e0a79715eef29be32806a1d58bb7c5da76f550aa3d8a1fbff0eb19ccb1a313d55cda56c9ec2ef29632387fe8d76e3c0468043e8f663f4860ee12bf2d5b0b7474d6e694f91e6dbe115974a3926f12fee5e438777cb6a932df8cd8bec4d073b931ba3bc832b68d9dd300741fa7bf8afc47ed2576f6936ba424663aab639c5ae4f5683423b4742bf1c978238f16cbe39d652de3fdb8befc848ad922222e04a4037c0713eb57a81a23f0c73473fc646cea306b4bcbc8862f8385ddfa9d4b7fa2c087e879683303ed5bdd3a062b3cf5b3a278a66d2a13f83f44f82ddf310ee074ab6a364597e899a0255dc164f31cc50846851df9ab48195ded7ea1b1d510bd7ee74d73faf36bc31ecfa268359046f4eb879f924009438b481c6cd7889a002ed5ee382bc9190da6fc026e479558e4475677e9aa9e3050e2765694dfc81f56e880b96e7160c980dd98edd3dfffffffffffffffff\"}}");

},{}],"e4Apa":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var MillerRabin = require('miller-rabin');
var millerRabin = new MillerRabin();
var TWENTYFOUR = new BN(24);
var ELEVEN = new BN(11);
var TEN = new BN(10);
var THREE = new BN(3);
var SEVEN = new BN(7);
var primes = require('./generatePrime');
var randomBytes = require('randombytes');
module.exports = DH;
function setPublicKey(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this._pub = new BN(pub);
    return this;
}
function setPrivateKey(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    this._priv = new BN(priv);
    return this;
}
var primeCache = {
};
function checkPrime(prime, generator) {
    var gen = generator.toString('hex');
    var hex = [
        gen,
        prime.toString(16)
    ].join('_');
    if (hex in primeCache) return primeCache[hex];
    var error = 0;
    if (prime.isEven() || !primes.simpleSieve || !primes.fermatTest(prime) || !millerRabin.test(prime)) {
        //not a prime so +1
        error += 1;
        if (gen === '02' || gen === '05') // we'd be able to check the generator
        // it would fail so +8
        error += 8;
        else //we wouldn't be able to test the generator
        // so +4
        error += 4;
        primeCache[hex] = error;
        return error;
    }
    if (!millerRabin.test(prime.shrn(1))) //not a safe prime
    error += 2;
    var rem;
    switch(gen){
        case '02':
            if (prime.mod(TWENTYFOUR).cmp(ELEVEN)) // unsuidable generator
            error += 8;
            break;
        case '05':
            rem = prime.mod(TEN);
            if (rem.cmp(THREE) && rem.cmp(SEVEN)) // prime mod 10 needs to equal 3 or 7
            error += 8;
            break;
        default:
            error += 4;
    }
    primeCache[hex] = error;
    return error;
}
function DH(prime, generator, malleable) {
    this.setGenerator(generator);
    this.__prime = new BN(prime);
    this._prime = BN.mont(this.__prime);
    this._primeLen = prime.length;
    this._pub = undefined;
    this._priv = undefined;
    this._primeCode = undefined;
    if (malleable) {
        this.setPublicKey = setPublicKey;
        this.setPrivateKey = setPrivateKey;
    } else this._primeCode = 8;
}
Object.defineProperty(DH.prototype, 'verifyError', {
    enumerable: true,
    get: function() {
        if (typeof this._primeCode !== 'number') this._primeCode = checkPrime(this.__prime, this.__gen);
        return this._primeCode;
    }
});
DH.prototype.generateKeys = function() {
    if (!this._priv) this._priv = new BN(randomBytes(this._primeLen));
    this._pub = this._gen.toRed(this._prime).redPow(this._priv).fromRed();
    return this.getPublicKey();
};
DH.prototype.computeSecret = function(other) {
    other = new BN(other);
    other = other.toRed(this._prime);
    var secret = other.redPow(this._priv).fromRed();
    var out = new Buffer(secret.toArray());
    var prime = this.getPrime();
    if (out.length < prime.length) {
        var front = new Buffer(prime.length - out.length);
        front.fill(0);
        out = Buffer.concat([
            front,
            out
        ]);
    }
    return out;
};
DH.prototype.getPublicKey = function getPublicKey(enc) {
    return formatReturnValue(this._pub, enc);
};
DH.prototype.getPrivateKey = function getPrivateKey(enc) {
    return formatReturnValue(this._priv, enc);
};
DH.prototype.getPrime = function(enc) {
    return formatReturnValue(this.__prime, enc);
};
DH.prototype.getGenerator = function(enc) {
    return formatReturnValue(this._gen, enc);
};
DH.prototype.setGenerator = function(gen, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(gen)) gen = new Buffer(gen, enc);
    this.__gen = gen;
    this._gen = new BN(gen);
    return this;
};
function formatReturnValue(bn, enc) {
    var buf = new Buffer(bn.toArray());
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"kPwYH","bn.js":"3VXSG","miller-rabin":"hS6Ct","./generatePrime":"jxseI","randombytes":"8w7G4"}],"gNw10":[function(require,module,exports) {
var Buffer = require('safe-buffer').Buffer;
var createHash = require('create-hash');
var stream = require('readable-stream');
var inherits = require('inherits');
var sign = require('./sign');
var verify = require('./verify');
var algorithms = require('./algorithms.json');
Object.keys(algorithms).forEach(function(key) {
    algorithms[key].id = Buffer.from(algorithms[key].id, 'hex');
    algorithms[key.toLowerCase()] = algorithms[key];
});
function Sign(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hashType = data.hash;
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Sign, stream.Writable);
Sign.prototype._write = function _write(data, _, done) {
    this._hash.update(data);
    done();
};
Sign.prototype.update = function update(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Sign.prototype.sign = function signMethod(key, enc) {
    this.end();
    var hash = this._hash.digest();
    var sig = sign(hash, key, this._hashType, this._signType, this._tag);
    return enc ? sig.toString(enc) : sig;
};
function Verify(algorithm) {
    stream.Writable.call(this);
    var data = algorithms[algorithm];
    if (!data) throw new Error('Unknown message digest');
    this._hash = createHash(data.hash);
    this._tag = data.id;
    this._signType = data.sign;
}
inherits(Verify, stream.Writable);
Verify.prototype._write = function _write1(data, _, done) {
    this._hash.update(data);
    done();
};
Verify.prototype.update = function update1(data, enc) {
    if (typeof data === 'string') data = Buffer.from(data, enc);
    this._hash.update(data);
    return this;
};
Verify.prototype.verify = function verifyMethod(key, sig, enc) {
    if (typeof sig === 'string') sig = Buffer.from(sig, enc);
    this.end();
    var hash = this._hash.digest();
    return verify(sig, hash, key, this._signType, this._tag);
};
function createSign(algorithm) {
    return new Sign(algorithm);
}
function createVerify(algorithm) {
    return new Verify(algorithm);
}
module.exports = {
    Sign: createSign,
    Verify: createVerify,
    createSign: createSign,
    createVerify: createVerify
};

},{"safe-buffer":"7V1Cd","create-hash":"hel5c","readable-stream":"dBTw8","inherits":"gmJTw","./sign":"lLIjh","./verify":"eeh0g","./algorithms.json":"gn85U"}],"lLIjh":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var createHmac = require('create-hmac');
var crt = require('browserify-rsa');
var EC = require('elliptic').ec;
var BN = require('bn.js');
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function sign(hash, key, hashType, signType, tag) {
    var priv = parseKeys(key);
    if (priv.curve) {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
        return ecSign(hash, priv);
    } else if (priv.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong private key type');
        return dsaSign(hash, priv, hashType);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong private key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = priv.modulus.byteLength();
    var pad = [
        0,
        1
    ];
    while(hash.length + pad.length + 1 < len)pad.push(255);
    pad.push(0);
    var i = -1;
    while((++i) < hash.length)pad.push(hash[i]);
    var out = crt(pad, priv);
    return out;
}
function ecSign(hash, priv) {
    var curveId = curves[priv.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + priv.curve.join('.'));
    var curve = new EC(curveId);
    var key = curve.keyFromPrivate(priv.privateKey);
    var out = key.sign(hash);
    return Buffer.from(out.toDER());
}
function dsaSign(hash, priv, algo) {
    var x = priv.params.priv_key;
    var p = priv.params.p;
    var q = priv.params.q;
    var g = priv.params.g;
    var r = new BN(0);
    var k;
    var H = bits2int(hash, q).mod(q);
    var s = false;
    var kv = getKey(x, q, hash, algo);
    while(s === false){
        k = makeKey(q, kv, algo);
        r = makeR(g, k, p, q);
        s = k.invm(q).imul(H.add(x.mul(r))).mod(q);
        if (s.cmpn(0) === 0) {
            s = false;
            r = new BN(0);
        }
    }
    return toDER(r, s);
}
function toDER(r, s) {
    r = r.toArray();
    s = s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    if (s[0] & 128) s = [
        0
    ].concat(s);
    var total = r.length + s.length + 4;
    var res = [
        48,
        total,
        2,
        r.length
    ];
    res = res.concat(r, [
        2,
        s.length
    ], s);
    return Buffer.from(res);
}
function getKey(x, q, hash, algo) {
    x = Buffer.from(x.toArray());
    if (x.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - x.length);
        x = Buffer.concat([
            zeros,
            x
        ]);
    }
    var hlen = hash.length;
    var hbits = bits2octets(hash, q);
    var v = Buffer.alloc(hlen);
    v.fill(1);
    var k = Buffer.alloc(hlen);
    k = createHmac(algo, k).update(v).update(Buffer.from([
        0
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    k = createHmac(algo, k).update(v).update(Buffer.from([
        1
    ])).update(x).update(hbits).digest();
    v = createHmac(algo, k).update(v).digest();
    return {
        k: k,
        v: v
    };
}
function bits2int(obits, q) {
    var bits = new BN(obits);
    var shift = (obits.length << 3) - q.bitLength();
    if (shift > 0) bits.ishrn(shift);
    return bits;
}
function bits2octets(bits, q) {
    bits = bits2int(bits, q);
    bits = bits.mod(q);
    var out = Buffer.from(bits.toArray());
    if (out.length < q.byteLength()) {
        var zeros = Buffer.alloc(q.byteLength() - out.length);
        out = Buffer.concat([
            zeros,
            out
        ]);
    }
    return out;
}
function makeKey(q, kv, algo) {
    var t;
    var k;
    do {
        t = Buffer.alloc(0);
        while(t.length * 8 < q.bitLength()){
            kv.v = createHmac(algo, kv.k).update(kv.v).digest();
            t = Buffer.concat([
                t,
                kv.v
            ]);
        }
        k = bits2int(t, q);
        kv.k = createHmac(algo, kv.k).update(kv.v).update(Buffer.from([
            0
        ])).digest();
        kv.v = createHmac(algo, kv.k).update(kv.v).digest();
    }while (k.cmp(q) !== -1)
    return k;
}
function makeR(g, k, p, q) {
    return g.toRed(BN.mont(p)).redPow(k).fromRed().mod(q);
}
module.exports = sign;
module.exports.getKey = getKey;
module.exports.makeKey = makeKey;

},{"safe-buffer":"7V1Cd","create-hmac":"897KI","browserify-rsa":"ioAfx","elliptic":"7VNVr","bn.js":"5l3JP","parse-asn1":"gZwyO","./curves.json":"9Etwf"}],"ioAfx":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var BN = require('bn.js');
var randomBytes = require('randombytes');
function blind(priv) {
    var r = getr(priv);
    var blinder = r.toRed(BN.mont(priv.modulus)).redPow(new BN(priv.publicExponent)).fromRed();
    return {
        blinder: blinder,
        unblinder: r.invm(priv.modulus)
    };
}
function getr(priv) {
    var len = priv.modulus.byteLength();
    var r;
    do r = new BN(randomBytes(len));
    while (r.cmp(priv.modulus) >= 0 || !r.umod(priv.prime1) || !r.umod(priv.prime2))
    return r;
}
function crt(msg, priv) {
    var blinds = blind(priv);
    var len = priv.modulus.byteLength();
    var blinded = new BN(msg).mul(blinds.blinder).umod(priv.modulus);
    var c1 = blinded.toRed(BN.mont(priv.prime1));
    var c2 = blinded.toRed(BN.mont(priv.prime2));
    var qinv = priv.coefficient;
    var p = priv.prime1;
    var q = priv.prime2;
    var m1 = c1.redPow(priv.exponent1).fromRed();
    var m2 = c2.redPow(priv.exponent2).fromRed();
    var h = m1.isub(m2).imul(qinv).umod(p).imul(q);
    return m2.iadd(h).imul(blinds.unblinder).umod(priv.modulus).toArrayLike(Buffer, 'be', len);
}
crt.getr = getr;
module.exports = crt;

},{"buffer":"kPwYH","bn.js":"2pT1O","randombytes":"8w7G4"}],"2pT1O":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate1(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"lnuW3"}],"7VNVr":[function(require,module,exports) {
'use strict';
var elliptic = exports;
elliptic.version = require('../package.json').version;
elliptic.utils = require('./elliptic/utils');
elliptic.rand = require('brorand');
elliptic.curve = require('./elliptic/curve');
elliptic.curves = require('./elliptic/curves');
// Protocols
elliptic.ec = require('./elliptic/ec');
elliptic.eddsa = require('./elliptic/eddsa');

},{"../package.json":"inRS2","./elliptic/utils":"9kwAm","brorand":"68k2j","./elliptic/curve":"bpva8","./elliptic/curves":"hP5SP","./elliptic/ec":"70aIO","./elliptic/eddsa":"1gWIk"}],"inRS2":[function(require,module,exports) {
module.exports = JSON.parse("{\"name\":\"elliptic\",\"version\":\"6.5.4\",\"description\":\"EC cryptography\",\"main\":\"lib/elliptic.js\",\"files\":[\"lib\"],\"scripts\":{\"lint\":\"eslint lib test\",\"lint:fix\":\"npm run lint -- --fix\",\"unit\":\"istanbul test _mocha --reporter=spec test/index.js\",\"test\":\"npm run lint && npm run unit\",\"version\":\"grunt dist && git add dist/\"},\"repository\":{\"type\":\"git\",\"url\":\"git@github.com:indutny/elliptic\"},\"keywords\":[\"EC\",\"Elliptic\",\"curve\",\"Cryptography\"],\"author\":\"Fedor Indutny <fedor@indutny.com>\",\"license\":\"MIT\",\"bugs\":{\"url\":\"https://github.com/indutny/elliptic/issues\"},\"homepage\":\"https://github.com/indutny/elliptic\",\"devDependencies\":{\"brfs\":\"^2.0.2\",\"coveralls\":\"^3.1.0\",\"eslint\":\"^7.6.0\",\"grunt\":\"^1.2.1\",\"grunt-browserify\":\"^5.3.0\",\"grunt-cli\":\"^1.3.2\",\"grunt-contrib-connect\":\"^3.0.0\",\"grunt-contrib-copy\":\"^1.0.0\",\"grunt-contrib-uglify\":\"^5.0.0\",\"grunt-mocha-istanbul\":\"^5.0.2\",\"grunt-saucelabs\":\"^9.0.1\",\"istanbul\":\"^0.4.5\",\"mocha\":\"^8.0.1\"},\"dependencies\":{\"bn.js\":\"^4.11.9\",\"brorand\":\"^1.1.0\",\"hash.js\":\"^1.0.0\",\"hmac-drbg\":\"^1.0.1\",\"inherits\":\"^2.0.4\",\"minimalistic-assert\":\"^1.0.1\",\"minimalistic-crypto-utils\":\"^1.0.1\"}}");

},{}],"9kwAm":[function(require,module,exports) {
'use strict';
var utils = exports;
var BN = require('bn.js');
var minAssert = require('minimalistic-assert');
var minUtils = require('minimalistic-crypto-utils');
utils.assert = minAssert;
utils.toArray = minUtils.toArray;
utils.zero2 = minUtils.zero2;
utils.toHex = minUtils.toHex;
utils.encode = minUtils.encode;
// Represent num in a w-NAF form
function getNAF(num, w, bits) {
    var naf = new Array(Math.max(num.bitLength(), bits) + 1);
    naf.fill(0);
    var ws = 1 << w + 1;
    var k = num.clone();
    for(var i = 0; i < naf.length; i++){
        var z;
        var mod = k.andln(ws - 1);
        if (k.isOdd()) {
            if (mod > (ws >> 1) - 1) z = (ws >> 1) - mod;
            else z = mod;
            k.isubn(z);
        } else z = 0;
        naf[i] = z;
        k.iushrn(1);
    }
    return naf;
}
utils.getNAF = getNAF;
// Represent k1, k2 in a Joint Sparse Form
function getJSF(k1, k2) {
    var jsf = [
        [],
        [], 
    ];
    k1 = k1.clone();
    k2 = k2.clone();
    var d1 = 0;
    var d2 = 0;
    var m8;
    while(k1.cmpn(-d1) > 0 || k2.cmpn(-d2) > 0){
        // First phase
        var m14 = k1.andln(3) + d1 & 3;
        var m24 = k2.andln(3) + d2 & 3;
        if (m14 === 3) m14 = -1;
        if (m24 === 3) m24 = -1;
        var u1;
        if ((m14 & 1) === 0) u1 = 0;
        else {
            m8 = k1.andln(7) + d1 & 7;
            if ((m8 === 3 || m8 === 5) && m24 === 2) u1 = -m14;
            else u1 = m14;
        }
        jsf[0].push(u1);
        var u2;
        if ((m24 & 1) === 0) u2 = 0;
        else {
            m8 = k2.andln(7) + d2 & 7;
            if ((m8 === 3 || m8 === 5) && m14 === 2) u2 = -m24;
            else u2 = m24;
        }
        jsf[1].push(u2);
        // Second phase
        if (2 * d1 === u1 + 1) d1 = 1 - d1;
        if (2 * d2 === u2 + 1) d2 = 1 - d2;
        k1.iushrn(1);
        k2.iushrn(1);
    }
    return jsf;
}
utils.getJSF = getJSF;
function cachedProperty(obj, name, computer) {
    var key = '_' + name;
    obj.prototype[name] = function cachedProperty1() {
        return this[key] !== undefined ? this[key] : this[key] = computer.call(this);
    };
}
utils.cachedProperty = cachedProperty;
function parseBytes(bytes) {
    return typeof bytes === 'string' ? utils.toArray(bytes, 'hex') : bytes;
}
utils.parseBytes = parseBytes;
function intFromLE(bytes) {
    return new BN(bytes, 'hex', 'le');
}
utils.intFromLE = intFromLE;

},{"bn.js":"3VXSG","minimalistic-assert":"af22k","minimalistic-crypto-utils":"4Kfdk"}],"4Kfdk":[function(require,module,exports) {
'use strict';
var utils = exports;
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg !== 'string') {
        for(var i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
        return res;
    }
    if (enc === 'hex') {
        msg = msg.replace(/[^a-z0-9]+/ig, '');
        if (msg.length % 2 !== 0) msg = '0' + msg;
        for(var i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
    } else for(var i = 0; i < msg.length; i++){
        var c = msg.charCodeAt(i);
        var hi = c >> 8;
        var lo = c & 255;
        if (hi) res.push(hi, lo);
        else res.push(lo);
    }
    return res;
}
utils.toArray = toArray;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
utils.zero2 = zero2;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
utils.toHex = toHex;
utils.encode = function encode(arr, enc) {
    if (enc === 'hex') return toHex(arr);
    else return arr;
};

},{}],"bpva8":[function(require,module,exports) {
'use strict';
var curve = exports;
curve.base = require('./base');
curve.short = require('./short');
curve.mont = require('./mont');
curve.edwards = require('./edwards');

},{"./base":"jcWd4","./short":"jAugi","./mont":"7Goio","./edwards":"2DNlv"}],"jcWd4":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var getNAF = utils.getNAF;
var getJSF = utils.getJSF;
var assert = utils.assert;
function BaseCurve(type, conf) {
    this.type = type;
    this.p = new BN(conf.p, 16);
    // Use Montgomery, when there is no fast reduction for the prime
    this.red = conf.prime ? BN.red(conf.prime) : BN.mont(this.p);
    // Useful for many curves
    this.zero = new BN(0).toRed(this.red);
    this.one = new BN(1).toRed(this.red);
    this.two = new BN(2).toRed(this.red);
    // Curve configuration, optional
    this.n = conf.n && new BN(conf.n, 16);
    this.g = conf.g && this.pointFromJSON(conf.g, conf.gRed);
    // Temporary arrays
    this._wnafT1 = new Array(4);
    this._wnafT2 = new Array(4);
    this._wnafT3 = new Array(4);
    this._wnafT4 = new Array(4);
    this._bitLength = this.n ? this.n.bitLength() : 0;
    // Generalized Greg Maxwell's trick
    var adjustCount = this.n && this.p.div(this.n);
    if (!adjustCount || adjustCount.cmpn(100) > 0) this.redN = null;
    else {
        this._maxwellTrick = true;
        this.redN = this.n.toRed(this.red);
    }
}
module.exports = BaseCurve;
BaseCurve.prototype.point = function point() {
    throw new Error('Not implemented');
};
BaseCurve.prototype.validate = function validate() {
    throw new Error('Not implemented');
};
BaseCurve.prototype._fixedNafMul = function _fixedNafMul(p, k) {
    assert(p.precomputed);
    var doubles = p._getDoubles();
    var naf = getNAF(k, 1, this._bitLength);
    var I = (1 << doubles.step + 1) - (doubles.step % 2 === 0 ? 2 : 1);
    I /= 3;
    // Translate into more windowed form
    var repr = [];
    var j;
    var nafW;
    for(j = 0; j < naf.length; j += doubles.step){
        nafW = 0;
        for(var l = j + doubles.step - 1; l >= j; l--)nafW = (nafW << 1) + naf[l];
        repr.push(nafW);
    }
    var a = this.jpoint(null, null, null);
    var b = this.jpoint(null, null, null);
    for(var i = I; i > 0; i--){
        for(j = 0; j < repr.length; j++){
            nafW = repr[j];
            if (nafW === i) b = b.mixedAdd(doubles.points[j]);
            else if (nafW === -i) b = b.mixedAdd(doubles.points[j].neg());
        }
        a = a.add(b);
    }
    return a.toP();
};
BaseCurve.prototype._wnafMul = function _wnafMul(p, k) {
    var w = 4;
    // Precompute window
    var nafPoints = p._getNAFPoints(w);
    w = nafPoints.wnd;
    var wnd = nafPoints.points;
    // Get NAF form
    var naf = getNAF(k, w, this._bitLength);
    // Add `this`*(N+1) for every w-NAF index
    var acc = this.jpoint(null, null, null);
    for(var i = naf.length - 1; i >= 0; i--){
        // Count zeroes
        for(var l = 0; i >= 0 && naf[i] === 0; i--)l++;
        if (i >= 0) l++;
        acc = acc.dblp(l);
        if (i < 0) break;
        var z = naf[i];
        assert(z !== 0);
        if (p.type === 'affine') {
            // J +- P
            if (z > 0) acc = acc.mixedAdd(wnd[z - 1 >> 1]);
            else acc = acc.mixedAdd(wnd[-z - 1 >> 1].neg());
        } else // J +- J
        if (z > 0) acc = acc.add(wnd[z - 1 >> 1]);
        else acc = acc.add(wnd[-z - 1 >> 1].neg());
    }
    return p.type === 'affine' ? acc.toP() : acc;
};
BaseCurve.prototype._wnafMulAdd = function _wnafMulAdd(defW, points, coeffs, len, jacobianResult) {
    var wndWidth = this._wnafT1;
    var wnd = this._wnafT2;
    var naf = this._wnafT3;
    // Fill all arrays
    var max = 0;
    var i;
    var j;
    var p;
    for(i = 0; i < len; i++){
        p = points[i];
        var nafPoints = p._getNAFPoints(defW);
        wndWidth[i] = nafPoints.wnd;
        wnd[i] = nafPoints.points;
    }
    // Comb small window NAFs
    for(i = len - 1; i >= 1; i -= 2){
        var a = i - 1;
        var b = i;
        if (wndWidth[a] !== 1 || wndWidth[b] !== 1) {
            naf[a] = getNAF(coeffs[a], wndWidth[a], this._bitLength);
            naf[b] = getNAF(coeffs[b], wndWidth[b], this._bitLength);
            max = Math.max(naf[a].length, max);
            max = Math.max(naf[b].length, max);
            continue;
        }
        var comb = [
            points[a],
            /* 1 */ null,
            /* 3 */ null,
            /* 5 */ points[b]
        ];
        // Try to avoid Projective points, if possible
        if (points[a].y.cmp(points[b].y) === 0) {
            comb[1] = points[a].add(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        } else if (points[a].y.cmp(points[b].y.redNeg()) === 0) {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].add(points[b].neg());
        } else {
            comb[1] = points[a].toJ().mixedAdd(points[b]);
            comb[2] = points[a].toJ().mixedAdd(points[b].neg());
        }
        var index = [
            -3,
            /* -1 -1 */ -1,
            /* -1 0 */ -5,
            /* -1 1 */ -7,
            /* 0 -1 */ 0,
            /* 0 0 */ 7,
            /* 0 1 */ 5,
            /* 1 -1 */ 1,
            /* 1 0 */ 3
        ];
        var jsf = getJSF(coeffs[a], coeffs[b]);
        max = Math.max(jsf[0].length, max);
        naf[a] = new Array(max);
        naf[b] = new Array(max);
        for(j = 0; j < max; j++){
            var ja = jsf[0][j] | 0;
            var jb = jsf[1][j] | 0;
            naf[a][j] = index[(ja + 1) * 3 + (jb + 1)];
            naf[b][j] = 0;
            wnd[a] = comb;
        }
    }
    var acc = this.jpoint(null, null, null);
    var tmp = this._wnafT4;
    for(i = max; i >= 0; i--){
        var k = 0;
        while(i >= 0){
            var zero = true;
            for(j = 0; j < len; j++){
                tmp[j] = naf[j][i] | 0;
                if (tmp[j] !== 0) zero = false;
            }
            if (!zero) break;
            k++;
            i--;
        }
        if (i >= 0) k++;
        acc = acc.dblp(k);
        if (i < 0) break;
        for(j = 0; j < len; j++){
            var z = tmp[j];
            if (z === 0) continue;
            else if (z > 0) p = wnd[j][z - 1 >> 1];
            else if (z < 0) p = wnd[j][-z - 1 >> 1].neg();
            if (p.type === 'affine') acc = acc.mixedAdd(p);
            else acc = acc.add(p);
        }
    }
    // Zeroify references
    for(i = 0; i < len; i++)wnd[i] = null;
    if (jacobianResult) return acc;
    else return acc.toP();
};
function BasePoint(curve, type) {
    this.curve = curve;
    this.type = type;
    this.precomputed = null;
}
BaseCurve.BasePoint = BasePoint;
BasePoint.prototype.eq = function eq() {
    throw new Error('Not implemented');
};
BasePoint.prototype.validate = function validate1() {
    return this.curve.validate(this);
};
BaseCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    bytes = utils.toArray(bytes, enc);
    var len = this.p.byteLength();
    // uncompressed, hybrid-odd, hybrid-even
    if ((bytes[0] === 4 || bytes[0] === 6 || bytes[0] === 7) && bytes.length - 1 === 2 * len) {
        if (bytes[0] === 6) assert(bytes[bytes.length - 1] % 2 === 0);
        else if (bytes[0] === 7) assert(bytes[bytes.length - 1] % 2 === 1);
        var res = this.point(bytes.slice(1, 1 + len), bytes.slice(1 + len, 1 + 2 * len));
        return res;
    } else if ((bytes[0] === 2 || bytes[0] === 3) && bytes.length - 1 === len) return this.pointFromX(bytes.slice(1, 1 + len), bytes[0] === 3);
    throw new Error('Unknown point format');
};
BasePoint.prototype.encodeCompressed = function encodeCompressed(enc) {
    return this.encode(enc, true);
};
BasePoint.prototype._encode = function _encode(compact) {
    var len = this.curve.p.byteLength();
    var x = this.getX().toArray('be', len);
    if (compact) return [
        this.getY().isEven() ? 2 : 3
    ].concat(x);
    return [
        4
    ].concat(x, this.getY().toArray('be', len));
};
BasePoint.prototype.encode = function encode(enc, compact) {
    return utils.encode(this._encode(compact), enc);
};
BasePoint.prototype.precompute = function precompute(power) {
    if (this.precomputed) return this;
    var precomputed = {
        doubles: null,
        naf: null,
        beta: null
    };
    precomputed.naf = this._getNAFPoints(8);
    precomputed.doubles = this._getDoubles(4, power);
    precomputed.beta = this._getBeta();
    this.precomputed = precomputed;
    return this;
};
BasePoint.prototype._hasDoubles = function _hasDoubles(k) {
    if (!this.precomputed) return false;
    var doubles = this.precomputed.doubles;
    if (!doubles) return false;
    return doubles.points.length >= Math.ceil((k.bitLength() + 1) / doubles.step);
};
BasePoint.prototype._getDoubles = function _getDoubles(step, power) {
    if (this.precomputed && this.precomputed.doubles) return this.precomputed.doubles;
    var doubles = [
        this
    ];
    var acc = this;
    for(var i = 0; i < power; i += step){
        for(var j = 0; j < step; j++)acc = acc.dbl();
        doubles.push(acc);
    }
    return {
        step: step,
        points: doubles
    };
};
BasePoint.prototype._getNAFPoints = function _getNAFPoints(wnd) {
    if (this.precomputed && this.precomputed.naf) return this.precomputed.naf;
    var res = [
        this
    ];
    var max = (1 << wnd) - 1;
    var dbl = max === 1 ? null : this.dbl();
    for(var i = 1; i < max; i++)res[i] = res[i - 1].add(dbl);
    return {
        wnd: wnd,
        points: res
    };
};
BasePoint.prototype._getBeta = function _getBeta() {
    return null;
};
BasePoint.prototype.dblp = function dblp(k) {
    var r = this;
    for(var i = 0; i < k; i++)r = r.dbl();
    return r;
};

},{"bn.js":"3VXSG","../utils":"9kwAm"}],"jAugi":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function ShortCurve(conf) {
    Base.call(this, 'short', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.tinv = this.two.redInvm();
    this.zeroA = this.a.fromRed().cmpn(0) === 0;
    this.threeA = this.a.fromRed().sub(this.p).cmpn(-3) === 0;
    // If the curve is endomorphic, precalculate beta and lambda
    this.endo = this._getEndomorphism(conf);
    this._endoWnafT1 = new Array(4);
    this._endoWnafT2 = new Array(4);
}
inherits(ShortCurve, Base);
module.exports = ShortCurve;
ShortCurve.prototype._getEndomorphism = function _getEndomorphism(conf) {
    // No efficient endomorphism
    if (!this.zeroA || !this.g || !this.n || this.p.modn(3) !== 1) return;
    // Compute beta and lambda, that lambda * P = (beta * Px; Py)
    var beta;
    var lambda;
    if (conf.beta) beta = new BN(conf.beta, 16).toRed(this.red);
    else {
        var betas = this._getEndoRoots(this.p);
        // Choose the smallest beta
        beta = betas[0].cmp(betas[1]) < 0 ? betas[0] : betas[1];
        beta = beta.toRed(this.red);
    }
    if (conf.lambda) lambda = new BN(conf.lambda, 16);
    else {
        // Choose the lambda that is matching selected beta
        var lambdas = this._getEndoRoots(this.n);
        if (this.g.mul(lambdas[0]).x.cmp(this.g.x.redMul(beta)) === 0) lambda = lambdas[0];
        else {
            lambda = lambdas[1];
            assert(this.g.mul(lambda).x.cmp(this.g.x.redMul(beta)) === 0);
        }
    }
    // Get basis vectors, used for balanced length-two representation
    var basis;
    if (conf.basis) basis = conf.basis.map(function(vec) {
        return {
            a: new BN(vec.a, 16),
            b: new BN(vec.b, 16)
        };
    });
    else basis = this._getEndoBasis(lambda);
    return {
        beta: beta,
        lambda: lambda,
        basis: basis
    };
};
ShortCurve.prototype._getEndoRoots = function _getEndoRoots(num) {
    // Find roots of for x^2 + x + 1 in F
    // Root = (-1 +- Sqrt(-3)) / 2
    //
    var red = num === this.p ? this.red : BN.mont(num);
    var tinv = new BN(2).toRed(red).redInvm();
    var ntinv = tinv.redNeg();
    var s = new BN(3).toRed(red).redNeg().redSqrt().redMul(tinv);
    var l1 = ntinv.redAdd(s).fromRed();
    var l2 = ntinv.redSub(s).fromRed();
    return [
        l1,
        l2
    ];
};
ShortCurve.prototype._getEndoBasis = function _getEndoBasis(lambda) {
    // aprxSqrt >= sqrt(this.n)
    var aprxSqrt = this.n.ushrn(Math.floor(this.n.bitLength() / 2));
    // 3.74
    // Run EGCD, until r(L + 1) < aprxSqrt
    var u = lambda;
    var v = this.n.clone();
    var x1 = new BN(1);
    var y1 = new BN(0);
    var x2 = new BN(0);
    var y2 = new BN(1);
    // NOTE: all vectors are roots of: a + b * lambda = 0 (mod n)
    var a0;
    var b0;
    // First vector
    var a1;
    var b1;
    // Second vector
    var a2;
    var b2;
    var prevR;
    var i = 0;
    var r;
    var x;
    while(u.cmpn(0) !== 0){
        var q = v.div(u);
        r = v.sub(q.mul(u));
        x = x2.sub(q.mul(x1));
        var y = y2.sub(q.mul(y1));
        if (!a1 && r.cmp(aprxSqrt) < 0) {
            a0 = prevR.neg();
            b0 = x1;
            a1 = r.neg();
            b1 = x;
        } else if (a1 && (++i) === 2) break;
        prevR = r;
        v = u;
        u = r;
        x2 = x1;
        x1 = x;
        y2 = y1;
        y1 = y;
    }
    a2 = r.neg();
    b2 = x;
    var len1 = a1.sqr().add(b1.sqr());
    var len2 = a2.sqr().add(b2.sqr());
    if (len2.cmp(len1) >= 0) {
        a2 = a0;
        b2 = b0;
    }
    // Normalize signs
    if (a1.negative) {
        a1 = a1.neg();
        b1 = b1.neg();
    }
    if (a2.negative) {
        a2 = a2.neg();
        b2 = b2.neg();
    }
    return [
        {
            a: a1,
            b: b1
        },
        {
            a: a2,
            b: b2
        }, 
    ];
};
ShortCurve.prototype._endoSplit = function _endoSplit(k) {
    var basis = this.endo.basis;
    var v1 = basis[0];
    var v2 = basis[1];
    var c1 = v2.b.mul(k).divRound(this.n);
    var c2 = v1.b.neg().mul(k).divRound(this.n);
    var p1 = c1.mul(v1.a);
    var p2 = c2.mul(v2.a);
    var q1 = c1.mul(v1.b);
    var q2 = c2.mul(v2.b);
    // Calculate answer
    var k1 = k.sub(p1).sub(p2);
    var k2 = q1.add(q2).neg();
    return {
        k1: k1,
        k2: k2
    };
};
ShortCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var y2 = x.redSqr().redMul(x).redIAdd(x.redMul(this.a)).redIAdd(this.b);
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    // XXX Is there any way to tell if the number is odd without converting it
    // to non-red form?
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
ShortCurve.prototype.validate = function validate(point) {
    if (point.inf) return true;
    var x = point.x;
    var y = point.y;
    var ax = this.a.redMul(x);
    var rhs = x.redSqr().redMul(x).redIAdd(ax).redIAdd(this.b);
    return y.redSqr().redISub(rhs).cmpn(0) === 0;
};
ShortCurve.prototype._endoWnafMulAdd = function _endoWnafMulAdd(points, coeffs, jacobianResult) {
    var npoints = this._endoWnafT1;
    var ncoeffs = this._endoWnafT2;
    for(var i = 0; i < points.length; i++){
        var split = this._endoSplit(coeffs[i]);
        var p = points[i];
        var beta = p._getBeta();
        if (split.k1.negative) {
            split.k1.ineg();
            p = p.neg(true);
        }
        if (split.k2.negative) {
            split.k2.ineg();
            beta = beta.neg(true);
        }
        npoints[i * 2] = p;
        npoints[i * 2 + 1] = beta;
        ncoeffs[i * 2] = split.k1;
        ncoeffs[i * 2 + 1] = split.k2;
    }
    var res = this._wnafMulAdd(1, npoints, ncoeffs, i * 2, jacobianResult);
    // Clean-up references to points and coefficients
    for(var j = 0; j < i * 2; j++){
        npoints[j] = null;
        ncoeffs[j] = null;
    }
    return res;
};
function Point(curve, x, y, isRed) {
    Base.BasePoint.call(this, curve, 'affine');
    if (x === null && y === null) {
        this.x = null;
        this.y = null;
        this.inf = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        // Force redgomery representation when loading from JSON
        if (isRed) {
            this.x.forceRed(this.curve.red);
            this.y.forceRed(this.curve.red);
        }
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        this.inf = false;
    }
}
inherits(Point, Base.BasePoint);
ShortCurve.prototype.point = function point(x, y, isRed) {
    return new Point(this, x, y, isRed);
};
ShortCurve.prototype.pointFromJSON = function pointFromJSON(obj, red) {
    return Point.fromJSON(this, obj, red);
};
Point.prototype._getBeta = function _getBeta() {
    if (!this.curve.endo) return;
    var pre = this.precomputed;
    if (pre && pre.beta) return pre.beta;
    var beta = this.curve.point(this.x.redMul(this.curve.endo.beta), this.y);
    if (pre) {
        var curve = this.curve;
        var endoMul = function(p) {
            return curve.point(p.x.redMul(curve.endo.beta), p.y);
        };
        pre.beta = beta;
        beta.precomputed = {
            beta: null,
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(endoMul)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(endoMul)
            }
        };
    }
    return beta;
};
Point.prototype.toJSON = function toJSON() {
    if (!this.precomputed) return [
        this.x,
        this.y
    ];
    return [
        this.x,
        this.y,
        this.precomputed && {
            doubles: this.precomputed.doubles && {
                step: this.precomputed.doubles.step,
                points: this.precomputed.doubles.points.slice(1)
            },
            naf: this.precomputed.naf && {
                wnd: this.precomputed.naf.wnd,
                points: this.precomputed.naf.points.slice(1)
            }
        }
    ];
};
Point.fromJSON = function fromJSON(curve, obj, red) {
    if (typeof obj === 'string') obj = JSON.parse(obj);
    var res = curve.point(obj[0], obj[1], red);
    if (!obj[2]) return res;
    function obj2point(obj1) {
        return curve.point(obj1[0], obj1[1], red);
    }
    var pre = obj[2];
    res.precomputed = {
        beta: null,
        doubles: pre.doubles && {
            step: pre.doubles.step,
            points: [
                res
            ].concat(pre.doubles.points.map(obj2point))
        },
        naf: pre.naf && {
            wnd: pre.naf.wnd,
            points: [
                res
            ].concat(pre.naf.points.map(obj2point))
        }
    };
    return res;
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    return this.inf;
};
Point.prototype.add = function add(p) {
    // O + P = P
    if (this.inf) return p;
    // P + O = P
    if (p.inf) return this;
    // P + P = 2P
    if (this.eq(p)) return this.dbl();
    // P + (-P) = O
    if (this.neg().eq(p)) return this.curve.point(null, null);
    // P + Q = O
    if (this.x.cmp(p.x) === 0) return this.curve.point(null, null);
    var c = this.y.redSub(p.y);
    if (c.cmpn(0) !== 0) c = c.redMul(this.x.redSub(p.x).redInvm());
    var nx = c.redSqr().redISub(this.x).redISub(p.x);
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.dbl = function dbl() {
    if (this.inf) return this;
    // 2P = O
    var ys1 = this.y.redAdd(this.y);
    if (ys1.cmpn(0) === 0) return this.curve.point(null, null);
    var a = this.curve.a;
    var x2 = this.x.redSqr();
    var dyinv = ys1.redInvm();
    var c = x2.redAdd(x2).redIAdd(x2).redIAdd(a).redMul(dyinv);
    var nx = c.redSqr().redISub(this.x.redAdd(this.x));
    var ny = c.redMul(this.x.redSub(nx)).redISub(this.y);
    return this.curve.point(nx, ny);
};
Point.prototype.getX = function getX() {
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    return this.y.fromRed();
};
Point.prototype.mul = function mul(k) {
    k = new BN(k, 16);
    if (this.isInfinity()) return this;
    else if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else if (this.curve.endo) return this.curve._endoWnafMulAdd([
        this
    ], [
        k
    ]);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p2, k2) {
    var points = [
        this,
        p2
    ];
    var coeffs = [
        k1,
        k2
    ];
    if (this.curve.endo) return this.curve._endoWnafMulAdd(points, coeffs, true);
    else return this.curve._wnafMulAdd(1, points, coeffs, 2, true);
};
Point.prototype.eq = function eq(p) {
    return this === p || this.inf === p.inf && (this.inf || this.x.cmp(p.x) === 0 && this.y.cmp(p.y) === 0);
};
Point.prototype.neg = function neg(_precompute) {
    if (this.inf) return this;
    var res = this.curve.point(this.x, this.y.redNeg());
    if (_precompute && this.precomputed) {
        var pre = this.precomputed;
        var negate = function(p) {
            return p.neg();
        };
        res.precomputed = {
            naf: pre.naf && {
                wnd: pre.naf.wnd,
                points: pre.naf.points.map(negate)
            },
            doubles: pre.doubles && {
                step: pre.doubles.step,
                points: pre.doubles.points.map(negate)
            }
        };
    }
    return res;
};
Point.prototype.toJ = function toJ() {
    if (this.inf) return this.curve.jpoint(null, null, null);
    var res = this.curve.jpoint(this.x, this.y, this.curve.one);
    return res;
};
function JPoint(curve, x, y, z) {
    Base.BasePoint.call(this, curve, 'jacobian');
    if (x === null && y === null && z === null) {
        this.x = this.curve.one;
        this.y = this.curve.one;
        this.z = new BN(0);
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = new BN(z, 16);
    }
    if (!this.x.red) this.x = this.x.toRed(this.curve.red);
    if (!this.y.red) this.y = this.y.toRed(this.curve.red);
    if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    this.zOne = this.z === this.curve.one;
}
inherits(JPoint, Base.BasePoint);
ShortCurve.prototype.jpoint = function jpoint(x, y, z) {
    return new JPoint(this, x, y, z);
};
JPoint.prototype.toP = function toP() {
    if (this.isInfinity()) return this.curve.point(null, null);
    var zinv = this.z.redInvm();
    var zinv2 = zinv.redSqr();
    var ax = this.x.redMul(zinv2);
    var ay = this.y.redMul(zinv2).redMul(zinv);
    return this.curve.point(ax, ay);
};
JPoint.prototype.neg = function neg1() {
    return this.curve.jpoint(this.x, this.y.redNeg(), this.z);
};
JPoint.prototype.add = function add1(p) {
    // O + P = P
    if (this.isInfinity()) return p;
    // P + O = P
    if (p.isInfinity()) return this;
    // 12M + 4S + 7A
    var pz2 = p.z.redSqr();
    var z2 = this.z.redSqr();
    var u1 = this.x.redMul(pz2);
    var u2 = p.x.redMul(z2);
    var s1 = this.y.redMul(pz2.redMul(p.z));
    var s2 = p.y.redMul(z2.redMul(this.z));
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(p.z).redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mixedAdd = function mixedAdd(p) {
    // O + P = P
    if (this.isInfinity()) return p.toJ();
    // P + O = P
    if (p.isInfinity()) return this;
    // 8M + 3S + 7A
    var z2 = this.z.redSqr();
    var u1 = this.x;
    var u2 = p.x.redMul(z2);
    var s1 = this.y;
    var s2 = p.y.redMul(z2).redMul(this.z);
    var h = u1.redSub(u2);
    var r = s1.redSub(s2);
    if (h.cmpn(0) === 0) {
        if (r.cmpn(0) !== 0) return this.curve.jpoint(null, null, null);
        else return this.dbl();
    }
    var h2 = h.redSqr();
    var h3 = h2.redMul(h);
    var v = u1.redMul(h2);
    var nx = r.redSqr().redIAdd(h3).redISub(v).redISub(v);
    var ny = r.redMul(v.redISub(nx)).redISub(s1.redMul(h3));
    var nz = this.z.redMul(h);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.dblp = function dblp(pow) {
    if (pow === 0) return this;
    if (this.isInfinity()) return this;
    if (!pow) return this.dbl();
    var i;
    if (this.curve.zeroA || this.curve.threeA) {
        var r = this;
        for(i = 0; i < pow; i++)r = r.dbl();
        return r;
    }
    // 1M + 2S + 1A + N * (4S + 5M + 8A)
    // N = 1 => 6M + 6S + 9A
    var a = this.curve.a;
    var tinv = this.curve.tinv;
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    // Reuse results
    var jyd = jy.redAdd(jy);
    for(i = 0; i < pow; i++){
        var jx2 = jx.redSqr();
        var jyd2 = jyd.redSqr();
        var jyd4 = jyd2.redSqr();
        var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
        var t1 = jx.redMul(jyd2);
        var nx = c.redSqr().redISub(t1.redAdd(t1));
        var t2 = t1.redISub(nx);
        var dny = c.redMul(t2);
        dny = dny.redIAdd(dny).redISub(jyd4);
        var nz = jyd.redMul(jz);
        if (i + 1 < pow) jz4 = jz4.redMul(jyd4);
        jx = nx;
        jz = nz;
        jyd = dny;
    }
    return this.curve.jpoint(jx, jyd.redMul(tinv), jz);
};
JPoint.prototype.dbl = function dbl1() {
    if (this.isInfinity()) return this;
    if (this.curve.zeroA) return this._zeroDbl();
    else if (this.curve.threeA) return this._threeDbl();
    else return this._dbl();
};
JPoint.prototype._zeroDbl = function _zeroDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 14A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a; a = 0
        var m = xx.redAdd(xx).redIAdd(xx);
        // T = M ^ 2 - 2*S
        var t = m.redSqr().redISub(s).redISub(s);
        // 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2*Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html
        //     #doubling-dbl-2009-l
        // 2M + 5S + 13A
        // A = X1^2
        var a = this.x.redSqr();
        // B = Y1^2
        var b = this.y.redSqr();
        // C = B^2
        var c = b.redSqr();
        // D = 2 * ((X1 + B)^2 - A - C)
        var d = this.x.redAdd(b).redSqr().redISub(a).redISub(c);
        d = d.redIAdd(d);
        // E = 3 * A
        var e = a.redAdd(a).redIAdd(a);
        // F = E^2
        var f = e.redSqr();
        // 8 * C
        var c8 = c.redIAdd(c);
        c8 = c8.redIAdd(c8);
        c8 = c8.redIAdd(c8);
        // X3 = F - 2 * D
        nx = f.redISub(d).redISub(d);
        // Y3 = E * (D - X3) - 8 * C
        ny = e.redMul(d.redISub(nx)).redISub(c8);
        // Z3 = 2 * Y1 * Z1
        nz = this.y.redMul(this.z);
        nz = nz.redIAdd(nz);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._threeDbl = function _threeDbl() {
    var nx;
    var ny;
    var nz;
    // Z = 1
    if (this.zOne) {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html
        //     #doubling-mdbl-2007-bl
        // 1M + 5S + 15A
        // XX = X1^2
        var xx = this.x.redSqr();
        // YY = Y1^2
        var yy = this.y.redSqr();
        // YYYY = YY^2
        var yyyy = yy.redSqr();
        // S = 2 * ((X1 + YY)^2 - XX - YYYY)
        var s = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
        s = s.redIAdd(s);
        // M = 3 * XX + a
        var m = xx.redAdd(xx).redIAdd(xx).redIAdd(this.curve.a);
        // T = M^2 - 2 * S
        var t = m.redSqr().redISub(s).redISub(s);
        // X3 = T
        nx = t;
        // Y3 = M * (S - T) - 8 * YYYY
        var yyyy8 = yyyy.redIAdd(yyyy);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        yyyy8 = yyyy8.redIAdd(yyyy8);
        ny = m.redMul(s.redISub(t)).redISub(yyyy8);
        // Z3 = 2 * Y1
        nz = this.y.redAdd(this.y);
    } else {
        // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-3.html#doubling-dbl-2001-b
        // 3M + 5S
        // delta = Z1^2
        var delta = this.z.redSqr();
        // gamma = Y1^2
        var gamma = this.y.redSqr();
        // beta = X1 * gamma
        var beta = this.x.redMul(gamma);
        // alpha = 3 * (X1 - delta) * (X1 + delta)
        var alpha = this.x.redSub(delta).redMul(this.x.redAdd(delta));
        alpha = alpha.redAdd(alpha).redIAdd(alpha);
        // X3 = alpha^2 - 8 * beta
        var beta4 = beta.redIAdd(beta);
        beta4 = beta4.redIAdd(beta4);
        var beta8 = beta4.redAdd(beta4);
        nx = alpha.redSqr().redISub(beta8);
        // Z3 = (Y1 + Z1)^2 - gamma - delta
        nz = this.y.redAdd(this.z).redSqr().redISub(gamma).redISub(delta);
        // Y3 = alpha * (4 * beta - X3) - 8 * gamma^2
        var ggamma8 = gamma.redSqr();
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ggamma8 = ggamma8.redIAdd(ggamma8);
        ny = alpha.redMul(beta4.redISub(nx)).redISub(ggamma8);
    }
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype._dbl = function _dbl() {
    var a = this.curve.a;
    // 4M + 6S + 10A
    var jx = this.x;
    var jy = this.y;
    var jz = this.z;
    var jz4 = jz.redSqr().redSqr();
    var jx2 = jx.redSqr();
    var jy2 = jy.redSqr();
    var c = jx2.redAdd(jx2).redIAdd(jx2).redIAdd(a.redMul(jz4));
    var jxd4 = jx.redAdd(jx);
    jxd4 = jxd4.redIAdd(jxd4);
    var t1 = jxd4.redMul(jy2);
    var nx = c.redSqr().redISub(t1.redAdd(t1));
    var t2 = t1.redISub(nx);
    var jyd8 = jy2.redSqr();
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    jyd8 = jyd8.redIAdd(jyd8);
    var ny = c.redMul(t2).redISub(jyd8);
    var nz = jy.redAdd(jy).redMul(jz);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.trpl = function trpl() {
    if (!this.curve.zeroA) return this.dbl().add(this);
    // hyperelliptic.org/EFD/g1p/auto-shortw-jacobian-0.html#tripling-tpl-2007-bl
    // 5M + 10S + ...
    // XX = X1^2
    var xx = this.x.redSqr();
    // YY = Y1^2
    var yy = this.y.redSqr();
    // ZZ = Z1^2
    var zz = this.z.redSqr();
    // YYYY = YY^2
    var yyyy = yy.redSqr();
    // M = 3 * XX + a * ZZ2; a = 0
    var m = xx.redAdd(xx).redIAdd(xx);
    // MM = M^2
    var mm = m.redSqr();
    // E = 6 * ((X1 + YY)^2 - XX - YYYY) - MM
    var e = this.x.redAdd(yy).redSqr().redISub(xx).redISub(yyyy);
    e = e.redIAdd(e);
    e = e.redAdd(e).redIAdd(e);
    e = e.redISub(mm);
    // EE = E^2
    var ee = e.redSqr();
    // T = 16*YYYY
    var t = yyyy.redIAdd(yyyy);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    t = t.redIAdd(t);
    // U = (M + E)^2 - MM - EE - T
    var u = m.redIAdd(e).redSqr().redISub(mm).redISub(ee).redISub(t);
    // X3 = 4 * (X1 * EE - 4 * YY * U)
    var yyu4 = yy.redMul(u);
    yyu4 = yyu4.redIAdd(yyu4);
    yyu4 = yyu4.redIAdd(yyu4);
    var nx = this.x.redMul(ee).redISub(yyu4);
    nx = nx.redIAdd(nx);
    nx = nx.redIAdd(nx);
    // Y3 = 8 * Y1 * (U * (T - U) - E * EE)
    var ny = this.y.redMul(u.redMul(t.redISub(u)).redISub(e.redMul(ee)));
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    ny = ny.redIAdd(ny);
    // Z3 = (Z1 + E)^2 - ZZ - EE
    var nz = this.z.redAdd(e).redSqr().redISub(zz).redISub(ee);
    return this.curve.jpoint(nx, ny, nz);
};
JPoint.prototype.mul = function mul1(k, kbase) {
    k = new BN(k, kbase);
    return this.curve._wnafMul(this, k);
};
JPoint.prototype.eq = function eq1(p) {
    if (p.type === 'affine') return this.eq(p.toJ());
    if (this === p) return true;
    // x1 * z2^2 == x2 * z1^2
    var z2 = this.z.redSqr();
    var pz2 = p.z.redSqr();
    if (this.x.redMul(pz2).redISub(p.x.redMul(z2)).cmpn(0) !== 0) return false;
    // y1 * z2^3 == y2 * z1^3
    var z3 = z2.redMul(this.z);
    var pz3 = pz2.redMul(p.z);
    return this.y.redMul(pz3).redISub(p.y.redMul(z3)).cmpn(0) === 0;
};
JPoint.prototype.eqXToP = function eqXToP(x) {
    var zs = this.z.redSqr();
    var rx = x.toRed(this.curve.red).redMul(zs);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(zs);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
JPoint.prototype.inspect = function inspect1() {
    if (this.isInfinity()) return '<EC JPoint Infinity>';
    return '<EC JPoint x: ' + this.x.toString(16, 2) + ' y: ' + this.y.toString(16, 2) + ' z: ' + this.z.toString(16, 2) + '>';
};
JPoint.prototype.isInfinity = function isInfinity1() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};

},{"../utils":"9kwAm","bn.js":"3VXSG","inherits":"gmJTw","./base":"jcWd4"}],"7Goio":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var utils = require('../utils');
function MontCurve(conf) {
    Base.call(this, 'mont', conf);
    this.a = new BN(conf.a, 16).toRed(this.red);
    this.b = new BN(conf.b, 16).toRed(this.red);
    this.i4 = new BN(4).toRed(this.red).redInvm();
    this.two = new BN(2).toRed(this.red);
    this.a24 = this.i4.redMul(this.a.redAdd(this.two));
}
inherits(MontCurve, Base);
module.exports = MontCurve;
MontCurve.prototype.validate = function validate(point) {
    var x = point.normalize().x;
    var x2 = x.redSqr();
    var rhs = x2.redMul(x).redAdd(x2.redMul(this.a)).redAdd(x);
    var y = rhs.redSqrt();
    return y.redSqr().cmp(rhs) === 0;
};
function Point(curve, x, z) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && z === null) {
        this.x = this.curve.one;
        this.z = this.curve.zero;
    } else {
        this.x = new BN(x, 16);
        this.z = new BN(z, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
    }
}
inherits(Point, Base.BasePoint);
MontCurve.prototype.decodePoint = function decodePoint(bytes, enc) {
    return this.point(utils.toArray(bytes, enc), 1);
};
MontCurve.prototype.point = function point(x, z) {
    return new Point(this, x, z);
};
MontCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
Point.prototype.precompute = function precompute() {
// No-op
};
Point.prototype._encode = function _encode() {
    return this.getX().toArray('be', this.curve.p.byteLength());
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1] || curve.one);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.z.cmpn(0) === 0;
};
Point.prototype.dbl = function dbl() {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#doubling-dbl-1987-m-3
    // 2M + 2S + 4A
    // A = X1 + Z1
    var a = this.x.redAdd(this.z);
    // AA = A^2
    var aa = a.redSqr();
    // B = X1 - Z1
    var b = this.x.redSub(this.z);
    // BB = B^2
    var bb = b.redSqr();
    // C = AA - BB
    var c = aa.redSub(bb);
    // X3 = AA * BB
    var nx = aa.redMul(bb);
    // Z3 = C * (BB + A24 * C)
    var nz = c.redMul(bb.redAdd(this.curve.a24.redMul(c)));
    return this.curve.point(nx, nz);
};
Point.prototype.add = function add() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.diffAdd = function diffAdd(p, diff) {
    // http://hyperelliptic.org/EFD/g1p/auto-montgom-xz.html#diffadd-dadd-1987-m-3
    // 4M + 2S + 6A
    // A = X2 + Z2
    var a = this.x.redAdd(this.z);
    // B = X2 - Z2
    var b = this.x.redSub(this.z);
    // C = X3 + Z3
    var c = p.x.redAdd(p.z);
    // D = X3 - Z3
    var d = p.x.redSub(p.z);
    // DA = D * A
    var da = d.redMul(a);
    // CB = C * B
    var cb = c.redMul(b);
    // X5 = Z1 * (DA + CB)^2
    var nx = diff.z.redMul(da.redAdd(cb).redSqr());
    // Z5 = X1 * (DA - CB)^2
    var nz = diff.x.redMul(da.redISub(cb).redSqr());
    return this.curve.point(nx, nz);
};
Point.prototype.mul = function mul(k) {
    var t = k.clone();
    var a = this; // (N / 2) * Q + Q
    var b = this.curve.point(null, null); // (N / 2) * Q
    var c = this; // Q
    for(var bits = []; t.cmpn(0) !== 0; t.iushrn(1))bits.push(t.andln(1));
    for(var i = bits.length - 1; i >= 0; i--)if (bits[i] === 0) {
        // N * Q + Q = ((N / 2) * Q + Q)) + (N / 2) * Q
        a = a.diffAdd(b, c);
        // N * Q = 2 * ((N / 2) * Q + Q))
        b = b.dbl();
    } else {
        // N * Q = ((N / 2) * Q + Q) + ((N / 2) * Q)
        b = a.diffAdd(b, c);
        // N * Q + Q = 2 * ((N / 2) * Q + Q)
        a = a.dbl();
    }
    return b;
};
Point.prototype.mulAdd = function mulAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.jumlAdd = function jumlAdd() {
    throw new Error('Not supported on Montgomery curve');
};
Point.prototype.eq = function eq(other) {
    return this.getX().cmp(other.getX()) === 0;
};
Point.prototype.normalize = function normalize() {
    this.x = this.x.redMul(this.z.redInvm());
    this.z = this.curve.one;
    return this;
};
Point.prototype.getX = function getX() {
    // Normalize coordinates
    this.normalize();
    return this.x.fromRed();
};

},{"bn.js":"3VXSG","inherits":"gmJTw","./base":"jcWd4","../utils":"9kwAm"}],"2DNlv":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var BN = require('bn.js');
var inherits = require('inherits');
var Base = require('./base');
var assert = utils.assert;
function EdwardsCurve(conf) {
    // NOTE: Important as we are creating point in Base.call()
    this.twisted = (conf.a | 0) !== 1;
    this.mOneA = this.twisted && (conf.a | 0) === -1;
    this.extended = this.mOneA;
    Base.call(this, 'edwards', conf);
    this.a = new BN(conf.a, 16).umod(this.red.m);
    this.a = this.a.toRed(this.red);
    this.c = new BN(conf.c, 16).toRed(this.red);
    this.c2 = this.c.redSqr();
    this.d = new BN(conf.d, 16).toRed(this.red);
    this.dd = this.d.redAdd(this.d);
    assert(!this.twisted || this.c.fromRed().cmpn(1) === 0);
    this.oneC = (conf.c | 0) === 1;
}
inherits(EdwardsCurve, Base);
module.exports = EdwardsCurve;
EdwardsCurve.prototype._mulA = function _mulA(num) {
    if (this.mOneA) return num.redNeg();
    else return this.a.redMul(num);
};
EdwardsCurve.prototype._mulC = function _mulC(num) {
    if (this.oneC) return num;
    else return this.c.redMul(num);
};
// Just for compatibility with Short curve
EdwardsCurve.prototype.jpoint = function jpoint(x, y, z, t) {
    return this.point(x, y, z, t);
};
EdwardsCurve.prototype.pointFromX = function pointFromX(x, odd) {
    x = new BN(x, 16);
    if (!x.red) x = x.toRed(this.red);
    var x2 = x.redSqr();
    var rhs = this.c2.redSub(this.a.redMul(x2));
    var lhs = this.one.redSub(this.c2.redMul(this.d).redMul(x2));
    var y2 = rhs.redMul(lhs.redInvm());
    var y = y2.redSqrt();
    if (y.redSqr().redSub(y2).cmp(this.zero) !== 0) throw new Error('invalid point');
    var isOdd = y.fromRed().isOdd();
    if (odd && !isOdd || !odd && isOdd) y = y.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.pointFromY = function pointFromY(y, odd) {
    y = new BN(y, 16);
    if (!y.red) y = y.toRed(this.red);
    // x^2 = (y^2 - c^2) / (c^2 d y^2 - a)
    var y2 = y.redSqr();
    var lhs = y2.redSub(this.c2);
    var rhs = y2.redMul(this.d).redMul(this.c2).redSub(this.a);
    var x2 = lhs.redMul(rhs.redInvm());
    if (x2.cmp(this.zero) === 0) {
        if (odd) throw new Error('invalid point');
        else return this.point(this.zero, y);
    }
    var x = x2.redSqrt();
    if (x.redSqr().redSub(x2).cmp(this.zero) !== 0) throw new Error('invalid point');
    if (x.fromRed().isOdd() !== odd) x = x.redNeg();
    return this.point(x, y);
};
EdwardsCurve.prototype.validate = function validate(point) {
    if (point.isInfinity()) return true;
    // Curve: A * X^2 + Y^2 = C^2 * (1 + D * X^2 * Y^2)
    point.normalize();
    var x2 = point.x.redSqr();
    var y2 = point.y.redSqr();
    var lhs = x2.redMul(this.a).redAdd(y2);
    var rhs = this.c2.redMul(this.one.redAdd(this.d.redMul(x2).redMul(y2)));
    return lhs.cmp(rhs) === 0;
};
function Point(curve, x, y, z, t) {
    Base.BasePoint.call(this, curve, 'projective');
    if (x === null && y === null && z === null) {
        this.x = this.curve.zero;
        this.y = this.curve.one;
        this.z = this.curve.one;
        this.t = this.curve.zero;
        this.zOne = true;
    } else {
        this.x = new BN(x, 16);
        this.y = new BN(y, 16);
        this.z = z ? new BN(z, 16) : this.curve.one;
        this.t = t && new BN(t, 16);
        if (!this.x.red) this.x = this.x.toRed(this.curve.red);
        if (!this.y.red) this.y = this.y.toRed(this.curve.red);
        if (!this.z.red) this.z = this.z.toRed(this.curve.red);
        if (this.t && !this.t.red) this.t = this.t.toRed(this.curve.red);
        this.zOne = this.z === this.curve.one;
        // Use extended coordinates
        if (this.curve.extended && !this.t) {
            this.t = this.x.redMul(this.y);
            if (!this.zOne) this.t = this.t.redMul(this.z.redInvm());
        }
    }
}
inherits(Point, Base.BasePoint);
EdwardsCurve.prototype.pointFromJSON = function pointFromJSON(obj) {
    return Point.fromJSON(this, obj);
};
EdwardsCurve.prototype.point = function point(x, y, z, t) {
    return new Point(this, x, y, z, t);
};
Point.fromJSON = function fromJSON(curve, obj) {
    return new Point(curve, obj[0], obj[1], obj[2]);
};
Point.prototype.inspect = function inspect() {
    if (this.isInfinity()) return '<EC Point Infinity>';
    return '<EC Point x: ' + this.x.fromRed().toString(16, 2) + ' y: ' + this.y.fromRed().toString(16, 2) + ' z: ' + this.z.fromRed().toString(16, 2) + '>';
};
Point.prototype.isInfinity = function isInfinity() {
    // XXX This code assumes that zero is always zero in red
    return this.x.cmpn(0) === 0 && (this.y.cmp(this.z) === 0 || this.zOne && this.y.cmp(this.curve.c) === 0);
};
Point.prototype._extDbl = function _extDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #doubling-dbl-2008-hwcd
    // 4M + 4S
    // A = X1^2
    var a = this.x.redSqr();
    // B = Y1^2
    var b = this.y.redSqr();
    // C = 2 * Z1^2
    var c = this.z.redSqr();
    c = c.redIAdd(c);
    // D = a * A
    var d = this.curve._mulA(a);
    // E = (X1 + Y1)^2 - A - B
    var e = this.x.redAdd(this.y).redSqr().redISub(a).redISub(b);
    // G = D + B
    var g = d.redAdd(b);
    // F = G - C
    var f = g.redSub(c);
    // H = D - B
    var h = d.redSub(b);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projDbl = function _projDbl() {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #doubling-dbl-2008-bbjlp
    //     #doubling-dbl-2007-bl
    // and others
    // Generally 3M + 4S or 2M + 4S
    // B = (X1 + Y1)^2
    var b = this.x.redAdd(this.y).redSqr();
    // C = X1^2
    var c = this.x.redSqr();
    // D = Y1^2
    var d = this.y.redSqr();
    var nx;
    var ny;
    var nz;
    var e;
    var h;
    var j;
    if (this.curve.twisted) {
        // E = a * C
        e = this.curve._mulA(c);
        // F = E + D
        var f = e.redAdd(d);
        if (this.zOne) {
            // X3 = (B - C - D) * (F - 2)
            nx = b.redSub(c).redSub(d).redMul(f.redSub(this.curve.two));
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F^2 - 2 * F
            nz = f.redSqr().redSub(f).redSub(f);
        } else {
            // H = Z1^2
            h = this.z.redSqr();
            // J = F - 2 * H
            j = f.redSub(h).redISub(h);
            // X3 = (B-C-D)*J
            nx = b.redSub(c).redISub(d).redMul(j);
            // Y3 = F * (E - D)
            ny = f.redMul(e.redSub(d));
            // Z3 = F * J
            nz = f.redMul(j);
        }
    } else {
        // E = C + D
        e = c.redAdd(d);
        // H = (c * Z1)^2
        h = this.curve._mulC(this.z).redSqr();
        // J = E - 2 * H
        j = e.redSub(h).redSub(h);
        // X3 = c * (B - E) * J
        nx = this.curve._mulC(b.redISub(e)).redMul(j);
        // Y3 = c * E * (C - D)
        ny = this.curve._mulC(e).redMul(c.redISub(d));
        // Z3 = E * J
        nz = e.redMul(j);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.dbl = function dbl() {
    if (this.isInfinity()) return this;
    // Double in extended coordinates
    if (this.curve.extended) return this._extDbl();
    else return this._projDbl();
};
Point.prototype._extAdd = function _extAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html
    //     #addition-add-2008-hwcd-3
    // 8M
    // A = (Y1 - X1) * (Y2 - X2)
    var a = this.y.redSub(this.x).redMul(p.y.redSub(p.x));
    // B = (Y1 + X1) * (Y2 + X2)
    var b = this.y.redAdd(this.x).redMul(p.y.redAdd(p.x));
    // C = T1 * k * T2
    var c = this.t.redMul(this.curve.dd).redMul(p.t);
    // D = Z1 * 2 * Z2
    var d = this.z.redMul(p.z.redAdd(p.z));
    // E = B - A
    var e = b.redSub(a);
    // F = D - C
    var f = d.redSub(c);
    // G = D + C
    var g = d.redAdd(c);
    // H = B + A
    var h = b.redAdd(a);
    // X3 = E * F
    var nx = e.redMul(f);
    // Y3 = G * H
    var ny = g.redMul(h);
    // T3 = E * H
    var nt = e.redMul(h);
    // Z3 = F * G
    var nz = f.redMul(g);
    return this.curve.point(nx, ny, nz, nt);
};
Point.prototype._projAdd = function _projAdd(p) {
    // hyperelliptic.org/EFD/g1p/auto-twisted-projective.html
    //     #addition-add-2008-bbjlp
    //     #addition-add-2007-bl
    // 10M + 1S
    // A = Z1 * Z2
    var a = this.z.redMul(p.z);
    // B = A^2
    var b = a.redSqr();
    // C = X1 * X2
    var c = this.x.redMul(p.x);
    // D = Y1 * Y2
    var d = this.y.redMul(p.y);
    // E = d * C * D
    var e = this.curve.d.redMul(c).redMul(d);
    // F = B - E
    var f = b.redSub(e);
    // G = B + E
    var g = b.redAdd(e);
    // X3 = A * F * ((X1 + Y1) * (X2 + Y2) - C - D)
    var tmp = this.x.redAdd(this.y).redMul(p.x.redAdd(p.y)).redISub(c).redISub(d);
    var nx = a.redMul(f).redMul(tmp);
    var ny;
    var nz;
    if (this.curve.twisted) {
        // Y3 = A * G * (D - a * C)
        ny = a.redMul(g).redMul(d.redSub(this.curve._mulA(c)));
        // Z3 = F * G
        nz = f.redMul(g);
    } else {
        // Y3 = A * G * (D - C)
        ny = a.redMul(g).redMul(d.redSub(c));
        // Z3 = c * F * G
        nz = this.curve._mulC(f).redMul(g);
    }
    return this.curve.point(nx, ny, nz);
};
Point.prototype.add = function add(p) {
    if (this.isInfinity()) return p;
    if (p.isInfinity()) return this;
    if (this.curve.extended) return this._extAdd(p);
    else return this._projAdd(p);
};
Point.prototype.mul = function mul(k) {
    if (this._hasDoubles(k)) return this.curve._fixedNafMul(this, k);
    else return this.curve._wnafMul(this, k);
};
Point.prototype.mulAdd = function mulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, false);
};
Point.prototype.jmulAdd = function jmulAdd(k1, p, k2) {
    return this.curve._wnafMulAdd(1, [
        this,
        p
    ], [
        k1,
        k2
    ], 2, true);
};
Point.prototype.normalize = function normalize() {
    if (this.zOne) return this;
    // Normalize coordinates
    var zi = this.z.redInvm();
    this.x = this.x.redMul(zi);
    this.y = this.y.redMul(zi);
    if (this.t) this.t = this.t.redMul(zi);
    this.z = this.curve.one;
    this.zOne = true;
    return this;
};
Point.prototype.neg = function neg() {
    return this.curve.point(this.x.redNeg(), this.y, this.z, this.t && this.t.redNeg());
};
Point.prototype.getX = function getX() {
    this.normalize();
    return this.x.fromRed();
};
Point.prototype.getY = function getY() {
    this.normalize();
    return this.y.fromRed();
};
Point.prototype.eq = function eq(other) {
    return this === other || this.getX().cmp(other.getX()) === 0 && this.getY().cmp(other.getY()) === 0;
};
Point.prototype.eqXToP = function eqXToP(x) {
    var rx = x.toRed(this.curve.red).redMul(this.z);
    if (this.x.cmp(rx) === 0) return true;
    var xc = x.clone();
    var t = this.curve.redN.redMul(this.z);
    for(;;){
        xc.iadd(this.curve.n);
        if (xc.cmp(this.curve.p) >= 0) return false;
        rx.redIAdd(t);
        if (this.x.cmp(rx) === 0) return true;
    }
};
// Compatibility with BaseCurve
Point.prototype.toP = Point.prototype.normalize;
Point.prototype.mixedAdd = Point.prototype.add;

},{"../utils":"9kwAm","bn.js":"3VXSG","inherits":"gmJTw","./base":"jcWd4"}],"hP5SP":[function(require,module,exports) {
'use strict';
var curves = exports;
var hash = require('hash.js');
var curve = require('./curve');
var utils = require('./utils');
var assert = utils.assert;
function PresetCurve(options) {
    if (options.type === 'short') this.curve = new curve.short(options);
    else if (options.type === 'edwards') this.curve = new curve.edwards(options);
    else this.curve = new curve.mont(options);
    this.g = this.curve.g;
    this.n = this.curve.n;
    this.hash = options.hash;
    assert(this.g.validate(), 'Invalid curve');
    assert(this.g.mul(this.n).isInfinity(), 'Invalid curve, G*N != O');
}
curves.PresetCurve = PresetCurve;
function defineCurve(name, options) {
    Object.defineProperty(curves, name, {
        configurable: true,
        enumerable: true,
        get: function() {
            var curve1 = new PresetCurve(options);
            Object.defineProperty(curves, name, {
                configurable: true,
                enumerable: true,
                value: curve1
            });
            return curve1;
        }
    });
}
defineCurve('p192', {
    type: 'short',
    prime: 'p192',
    p: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff fffffffc',
    b: '64210519 e59c80e7 0fa7e9ab 72243049 feb8deec c146b9b1',
    n: 'ffffffff ffffffff ffffffff 99def836 146bc9b1 b4d22831',
    hash: hash.sha256,
    gRed: false,
    g: [
        '188da80e b03090f6 7cbf20eb 43a18800 f4ff0afd 82ff1012',
        '07192b95 ffc8da78 631011ed 6b24cdd5 73f977a1 1e794811', 
    ]
});
defineCurve('p224', {
    type: 'short',
    prime: 'p224',
    p: 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001',
    a: 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff fffffffe',
    b: 'b4050a85 0c04b3ab f5413256 5044b0b7 d7bfd8ba 270b3943 2355ffb4',
    n: 'ffffffff ffffffff ffffffff ffff16a2 e0b8f03e 13dd2945 5c5c2a3d',
    hash: hash.sha256,
    gRed: false,
    g: [
        'b70e0cbd 6bb4bf7f 321390b9 4a03c1d3 56c21122 343280d6 115c1d21',
        'bd376388 b5f723fb 4c22dfe6 cd4375a0 5a074764 44d58199 85007e34', 
    ]
});
defineCurve('p256', {
    type: 'short',
    prime: null,
    p: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff ffffffff',
    a: 'ffffffff 00000001 00000000 00000000 00000000 ffffffff ffffffff fffffffc',
    b: '5ac635d8 aa3a93e7 b3ebbd55 769886bc 651d06b0 cc53b0f6 3bce3c3e 27d2604b',
    n: 'ffffffff 00000000 ffffffff ffffffff bce6faad a7179e84 f3b9cac2 fc632551',
    hash: hash.sha256,
    gRed: false,
    g: [
        '6b17d1f2 e12c4247 f8bce6e5 63a440f2 77037d81 2deb33a0 f4a13945 d898c296',
        '4fe342e2 fe1a7f9b 8ee7eb4a 7c0f9e16 2bce3357 6b315ece cbb64068 37bf51f5', 
    ]
});
defineCurve('p384', {
    type: 'short',
    prime: null,
    p: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 ffffffff",
    a: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe ffffffff 00000000 00000000 fffffffc",
    b: "b3312fa7 e23ee7e4 988e056b e3f82d19 181d9c6e fe814112 0314088f 5013875a c656398d 8a2ed19d 2a85c8ed d3ec2aef",
    n: "ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff c7634d81 f4372ddf 581a0db2 48b0a77a ecec196a ccc52973",
    hash: hash.sha384,
    gRed: false,
    g: [
        "aa87ca22 be8b0537 8eb1c71e f320ad74 6e1d3b62 8ba79b98 59f741e0 82542a38 5502f25d bf55296c 3a545e38 72760ab7",
        "3617de4a 96262c6f 5d9e98bf 9292dc29 f8f41dbd 289a147c e9da3113 b5f0b8c0 0a60b1ce 1d7e819d 7a431d7c 90ea0e5f", 
    ]
});
defineCurve('p521', {
    type: 'short',
    prime: null,
    p: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff",
    a: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffc",
    b: "00000051 953eb961 8e1c9a1f 929a21a0 b68540ee a2da725b 99b315f3 b8b48991 8ef109e1 56193951 ec7e937b 1652c0bd 3bb1bf07 3573df88 3d2c34f1 ef451fd4 6b503f00",
    n: "000001ff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffa 51868783 bf2f966b 7fcc0148 f709a5d0 3bb5c9b8 899c47ae bb6fb71e 91386409",
    hash: hash.sha512,
    gRed: false,
    g: [
        "000000c6 858e06b7 0404e9cd 9e3ecb66 2395b442 9c648139 053fb521 f828af60 6b4d3dba a14b5e77 efe75928 fe1dc127 a2ffa8de 3348b3c1 856a429b f97e7e31 c2e5bd66",
        "00000118 39296a78 9a3bc004 5c8a5fb4 2c7d1bd9 98f54449 579b4468 17afbd17 273e662c 97ee7299 5ef42640 c550b901 3fad0761 353c7086 a272c240 88be9476 9fd16650", 
    ]
});
defineCurve('curve25519', {
    type: 'mont',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '76d06',
    b: '1',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '9', 
    ]
});
defineCurve('ed25519', {
    type: 'edwards',
    prime: 'p25519',
    p: '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed',
    a: '-1',
    c: '1',
    // -121665 * (121666^(-1)) (mod P)
    d: '52036cee2b6ffe73 8cc740797779e898 00700a4d4141d8ab 75eb4dca135978a3',
    n: '1000000000000000 0000000000000000 14def9dea2f79cd6 5812631a5cf5d3ed',
    hash: hash.sha256,
    gRed: false,
    g: [
        '216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51a',
        // 4/5
        '6666666666666666666666666666666666666666666666666666666666666658', 
    ]
});
var pre;
try {
    pre = require('./precomputed/secp256k1');
} catch (e) {
    pre = undefined;
}
defineCurve('secp256k1', {
    type: 'short',
    prime: 'k256',
    p: 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f',
    a: '0',
    b: '7',
    n: 'ffffffff ffffffff ffffffff fffffffe baaedce6 af48a03b bfd25e8c d0364141',
    h: '1',
    hash: hash.sha256,
    // Precomputed endomorphism
    beta: '7ae96a2b657c07106e64479eac3434e99cf0497512f58995c1396c28719501ee',
    lambda: '5363ad4cc05c30e0a5261c028812645a122e22ea20816678df02967c1b23bd72',
    basis: [
        {
            a: '3086d221a7d46bcde86c90e49284eb15',
            b: '-e4437ed6010e88286f547fa90abfe4c3'
        },
        {
            a: '114ca50f7a8e2f3f657c1108d9d44cfd8',
            b: '3086d221a7d46bcde86c90e49284eb15'
        }, 
    ],
    gRed: false,
    g: [
        '79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798',
        '483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8',
        pre, 
    ]
});

},{"hash.js":"9Etc2","./curve":"bpva8","./utils":"9kwAm","./precomputed/secp256k1":"2SASv"}],"9Etc2":[function(require,module,exports) {
var hash = exports;
hash.utils = require('./hash/utils');
hash.common = require('./hash/common');
hash.sha = require('./hash/sha');
hash.ripemd = require('./hash/ripemd');
hash.hmac = require('./hash/hmac');
// Proxy hash functions to the main object
hash.sha1 = hash.sha.sha1;
hash.sha256 = hash.sha.sha256;
hash.sha224 = hash.sha.sha224;
hash.sha384 = hash.sha.sha384;
hash.sha512 = hash.sha.sha512;
hash.ripemd160 = hash.ripemd.ripemd160;

},{"./hash/utils":"5D4Rq","./hash/common":"gzTvs","./hash/sha":"7bktf","./hash/ripemd":"i9gve","./hash/hmac":"jCOaa"}],"5D4Rq":[function(require,module,exports) {
'use strict';
var assert = require('minimalistic-assert');
var inherits = require('inherits');
exports.inherits = inherits;
function isSurrogatePair(msg, i) {
    if ((msg.charCodeAt(i) & 64512) !== 55296) return false;
    if (i < 0 || i + 1 >= msg.length) return false;
    return (msg.charCodeAt(i + 1) & 64512) === 56320;
}
function toArray(msg, enc) {
    if (Array.isArray(msg)) return msg.slice();
    if (!msg) return [];
    var res = [];
    if (typeof msg === 'string') {
        if (!enc) {
            // Inspired by stringToUtf8ByteArray() in closure-library by Google
            // https://github.com/google/closure-library/blob/8598d87242af59aac233270742c8984e2b2bdbe0/closure/goog/crypt/crypt.js#L117-L143
            // Apache License 2.0
            // https://github.com/google/closure-library/blob/master/LICENSE
            var p = 0;
            for(var i = 0; i < msg.length; i++){
                var c = msg.charCodeAt(i);
                if (c < 128) res[p++] = c;
                else if (c < 2048) {
                    res[p++] = c >> 6 | 192;
                    res[p++] = c & 63 | 128;
                } else if (isSurrogatePair(msg, i)) {
                    c = 65536 + ((c & 1023) << 10) + (msg.charCodeAt(++i) & 1023);
                    res[p++] = c >> 18 | 240;
                    res[p++] = c >> 12 & 63 | 128;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                } else {
                    res[p++] = c >> 12 | 224;
                    res[p++] = c >> 6 & 63 | 128;
                    res[p++] = c & 63 | 128;
                }
            }
        } else if (enc === 'hex') {
            msg = msg.replace(/[^a-z0-9]+/ig, '');
            if (msg.length % 2 !== 0) msg = '0' + msg;
            for(i = 0; i < msg.length; i += 2)res.push(parseInt(msg[i] + msg[i + 1], 16));
        }
    } else for(i = 0; i < msg.length; i++)res[i] = msg[i] | 0;
    return res;
}
exports.toArray = toArray;
function toHex(msg) {
    var res = '';
    for(var i = 0; i < msg.length; i++)res += zero2(msg[i].toString(16));
    return res;
}
exports.toHex = toHex;
function htonl(w) {
    var res = w >>> 24 | w >>> 8 & 65280 | w << 8 & 16711680 | (w & 255) << 24;
    return res >>> 0;
}
exports.htonl = htonl;
function toHex32(msg, endian) {
    var res = '';
    for(var i = 0; i < msg.length; i++){
        var w = msg[i];
        if (endian === 'little') w = htonl(w);
        res += zero8(w.toString(16));
    }
    return res;
}
exports.toHex32 = toHex32;
function zero2(word) {
    if (word.length === 1) return '0' + word;
    else return word;
}
exports.zero2 = zero2;
function zero8(word) {
    if (word.length === 7) return '0' + word;
    else if (word.length === 6) return '00' + word;
    else if (word.length === 5) return '000' + word;
    else if (word.length === 4) return '0000' + word;
    else if (word.length === 3) return '00000' + word;
    else if (word.length === 2) return '000000' + word;
    else if (word.length === 1) return '0000000' + word;
    else return word;
}
exports.zero8 = zero8;
function join32(msg, start, end, endian) {
    var len = end - start;
    assert(len % 4 === 0);
    var res = new Array(len / 4);
    for(var i = 0, k = start; i < res.length; i++, k += 4){
        var w;
        if (endian === 'big') w = msg[k] << 24 | msg[k + 1] << 16 | msg[k + 2] << 8 | msg[k + 3];
        else w = msg[k + 3] << 24 | msg[k + 2] << 16 | msg[k + 1] << 8 | msg[k];
        res[i] = w >>> 0;
    }
    return res;
}
exports.join32 = join32;
function split32(msg, endian) {
    var res = new Array(msg.length * 4);
    for(var i = 0, k = 0; i < msg.length; i++, k += 4){
        var m = msg[i];
        if (endian === 'big') {
            res[k] = m >>> 24;
            res[k + 1] = m >>> 16 & 255;
            res[k + 2] = m >>> 8 & 255;
            res[k + 3] = m & 255;
        } else {
            res[k + 3] = m >>> 24;
            res[k + 2] = m >>> 16 & 255;
            res[k + 1] = m >>> 8 & 255;
            res[k] = m & 255;
        }
    }
    return res;
}
exports.split32 = split32;
function rotr32(w, b) {
    return w >>> b | w << 32 - b;
}
exports.rotr32 = rotr32;
function rotl32(w, b) {
    return w << b | w >>> 32 - b;
}
exports.rotl32 = rotl32;
function sum32(a, b) {
    return a + b >>> 0;
}
exports.sum32 = sum32;
function sum32_3(a, b, c) {
    return a + b + c >>> 0;
}
exports.sum32_3 = sum32_3;
function sum32_4(a, b, c, d) {
    return a + b + c + d >>> 0;
}
exports.sum32_4 = sum32_4;
function sum32_5(a, b, c, d, e) {
    return a + b + c + d + e >>> 0;
}
exports.sum32_5 = sum32_5;
function sum64(buf, pos, ah, al) {
    var bh = buf[pos];
    var bl = buf[pos + 1];
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    buf[pos] = hi >>> 0;
    buf[pos + 1] = lo;
}
exports.sum64 = sum64;
function sum64_hi(ah, al, bh, bl) {
    var lo = al + bl >>> 0;
    var hi = (lo < al ? 1 : 0) + ah + bh;
    return hi >>> 0;
}
exports.sum64_hi = sum64_hi;
function sum64_lo(ah, al, bh, bl) {
    var lo = al + bl;
    return lo >>> 0;
}
exports.sum64_lo = sum64_lo;
function sum64_4_hi(ah, al, bh, bl, ch, cl, dh, dl) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    var hi = ah + bh + ch + dh + carry;
    return hi >>> 0;
}
exports.sum64_4_hi = sum64_4_hi;
function sum64_4_lo(ah, al, bh, bl, ch, cl, dh, dl) {
    var lo = al + bl + cl + dl;
    return lo >>> 0;
}
exports.sum64_4_lo = sum64_4_lo;
function sum64_5_hi(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var carry = 0;
    var lo = al;
    lo = lo + bl >>> 0;
    carry += lo < al ? 1 : 0;
    lo = lo + cl >>> 0;
    carry += lo < cl ? 1 : 0;
    lo = lo + dl >>> 0;
    carry += lo < dl ? 1 : 0;
    lo = lo + el >>> 0;
    carry += lo < el ? 1 : 0;
    var hi = ah + bh + ch + dh + eh + carry;
    return hi >>> 0;
}
exports.sum64_5_hi = sum64_5_hi;
function sum64_5_lo(ah, al, bh, bl, ch, cl, dh, dl, eh, el) {
    var lo = al + bl + cl + dl + el;
    return lo >>> 0;
}
exports.sum64_5_lo = sum64_5_lo;
function rotr64_hi(ah, al, num) {
    var r = al << 32 - num | ah >>> num;
    return r >>> 0;
}
exports.rotr64_hi = rotr64_hi;
function rotr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.rotr64_lo = rotr64_lo;
function shr64_hi(ah, al, num) {
    return ah >>> num;
}
exports.shr64_hi = shr64_hi;
function shr64_lo(ah, al, num) {
    var r = ah << 32 - num | al >>> num;
    return r >>> 0;
}
exports.shr64_lo = shr64_lo;

},{"minimalistic-assert":"af22k","inherits":"gmJTw"}],"gzTvs":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function BlockHash() {
    this.pending = null;
    this.pendingTotal = 0;
    this.blockSize = this.constructor.blockSize;
    this.outSize = this.constructor.outSize;
    this.hmacStrength = this.constructor.hmacStrength;
    this.padLength = this.constructor.padLength / 8;
    this.endian = 'big';
    this._delta8 = this.blockSize / 8;
    this._delta32 = this.blockSize / 32;
}
exports.BlockHash = BlockHash;
BlockHash.prototype.update = function update(msg, enc) {
    // Convert message to array, pad it, and join into 32bit blocks
    msg = utils.toArray(msg, enc);
    if (!this.pending) this.pending = msg;
    else this.pending = this.pending.concat(msg);
    this.pendingTotal += msg.length;
    // Enough data, try updating
    if (this.pending.length >= this._delta8) {
        msg = this.pending;
        // Process pending data in blocks
        var r = msg.length % this._delta8;
        this.pending = msg.slice(msg.length - r, msg.length);
        if (this.pending.length === 0) this.pending = null;
        msg = utils.join32(msg, 0, msg.length - r, this.endian);
        for(var i = 0; i < msg.length; i += this._delta32)this._update(msg, i, i + this._delta32);
    }
    return this;
};
BlockHash.prototype.digest = function digest(enc) {
    this.update(this._pad());
    assert(this.pending === null);
    return this._digest(enc);
};
BlockHash.prototype._pad = function pad() {
    var len = this.pendingTotal;
    var bytes = this._delta8;
    var k = bytes - (len + this.padLength) % bytes;
    var res = new Array(k + this.padLength);
    res[0] = 128;
    for(var i = 1; i < k; i++)res[i] = 0;
    // Append length
    len <<= 3;
    if (this.endian === 'big') {
        for(var t = 8; t < this.padLength; t++)res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = len >>> 24 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len & 255;
    } else {
        res[i++] = len & 255;
        res[i++] = len >>> 8 & 255;
        res[i++] = len >>> 16 & 255;
        res[i++] = len >>> 24 & 255;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        res[i++] = 0;
        for(t = 8; t < this.padLength; t++)res[i++] = 0;
    }
    return res;
};

},{"./utils":"5D4Rq","minimalistic-assert":"af22k"}],"7bktf":[function(require,module,exports) {
'use strict';
exports.sha1 = require('./sha/1');
exports.sha224 = require('./sha/224');
exports.sha256 = require('./sha/256');
exports.sha384 = require('./sha/384');
exports.sha512 = require('./sha/512');

},{"./sha/1":"5PLTH","./sha/224":"5tqXC","./sha/256":"7WyAe","./sha/384":"lfSo2","./sha/512":"fHXBj"}],"5PLTH":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_5 = utils.sum32_5;
var ft_1 = shaCommon.ft_1;
var BlockHash = common.BlockHash;
var sha1_K = [
    1518500249,
    1859775393,
    2400959708,
    3395469782
];
function SHA1() {
    if (!(this instanceof SHA1)) return new SHA1();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.W = new Array(80);
}
utils.inherits(SHA1, BlockHash);
module.exports = SHA1;
SHA1.blockSize = 512;
SHA1.outSize = 160;
SHA1.hmacStrength = 80;
SHA1.padLength = 64;
SHA1.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = rotl32(W[i - 3] ^ W[i - 8] ^ W[i - 14] ^ W[i - 16], 1);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    for(i = 0; i < W.length; i++){
        var s = ~~(i / 20);
        var t = sum32_5(rotl32(a, 5), ft_1(s, b, c, d), e, W[i], sha1_K[s]);
        e = d;
        d = c;
        c = rotl32(b, 30);
        b = a;
        a = t;
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
};
SHA1.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"5D4Rq","../common":"gzTvs","./common":"g4tp1"}],"g4tp1":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var rotr32 = utils.rotr32;
function ft_1(s, x, y, z) {
    if (s === 0) return ch32(x, y, z);
    if (s === 1 || s === 3) return p32(x, y, z);
    if (s === 2) return maj32(x, y, z);
}
exports.ft_1 = ft_1;
function ch32(x, y, z) {
    return x & y ^ ~x & z;
}
exports.ch32 = ch32;
function maj32(x, y, z) {
    return x & y ^ x & z ^ y & z;
}
exports.maj32 = maj32;
function p32(x, y, z) {
    return x ^ y ^ z;
}
exports.p32 = p32;
function s0_256(x) {
    return rotr32(x, 2) ^ rotr32(x, 13) ^ rotr32(x, 22);
}
exports.s0_256 = s0_256;
function s1_256(x) {
    return rotr32(x, 6) ^ rotr32(x, 11) ^ rotr32(x, 25);
}
exports.s1_256 = s1_256;
function g0_256(x) {
    return rotr32(x, 7) ^ rotr32(x, 18) ^ x >>> 3;
}
exports.g0_256 = g0_256;
function g1_256(x) {
    return rotr32(x, 17) ^ rotr32(x, 19) ^ x >>> 10;
}
exports.g1_256 = g1_256;

},{"../utils":"5D4Rq"}],"5tqXC":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA256 = require('./256');
function SHA224() {
    if (!(this instanceof SHA224)) return new SHA224();
    SHA256.call(this);
    this.h = [
        3238371032,
        914150663,
        812702999,
        4144912697,
        4290775857,
        1750603025,
        1694076839,
        3204075428
    ];
}
utils.inherits(SHA224, SHA256);
module.exports = SHA224;
SHA224.blockSize = 512;
SHA224.outSize = 224;
SHA224.hmacStrength = 192;
SHA224.padLength = 64;
SHA224.prototype._digest = function digest(enc) {
    // Just truncate output
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 7), 'big');
    else return utils.split32(this.h.slice(0, 7), 'big');
};

},{"../utils":"5D4Rq","./256":"7WyAe"}],"7WyAe":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var shaCommon = require('./common');
var assert = require('minimalistic-assert');
var sum32 = utils.sum32;
var sum32_4 = utils.sum32_4;
var sum32_5 = utils.sum32_5;
var ch32 = shaCommon.ch32;
var maj32 = shaCommon.maj32;
var s0_256 = shaCommon.s0_256;
var s1_256 = shaCommon.s1_256;
var g0_256 = shaCommon.g0_256;
var g1_256 = shaCommon.g1_256;
var BlockHash = common.BlockHash;
var sha256_K = [
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
];
function SHA256() {
    if (!(this instanceof SHA256)) return new SHA256();
    BlockHash.call(this);
    this.h = [
        1779033703,
        3144134277,
        1013904242,
        2773480762,
        1359893119,
        2600822924,
        528734635,
        1541459225
    ];
    this.k = sha256_K;
    this.W = new Array(64);
}
utils.inherits(SHA256, BlockHash);
module.exports = SHA256;
SHA256.blockSize = 512;
SHA256.outSize = 256;
SHA256.hmacStrength = 192;
SHA256.padLength = 64;
SHA256.prototype._update = function _update(msg, start) {
    var W = this.W;
    for(var i = 0; i < 16; i++)W[i] = msg[start + i];
    for(; i < W.length; i++)W[i] = sum32_4(g1_256(W[i - 2]), W[i - 7], g0_256(W[i - 15]), W[i - 16]);
    var a = this.h[0];
    var b = this.h[1];
    var c = this.h[2];
    var d = this.h[3];
    var e = this.h[4];
    var f = this.h[5];
    var g = this.h[6];
    var h = this.h[7];
    assert(this.k.length === W.length);
    for(i = 0; i < W.length; i++){
        var T1 = sum32_5(h, s1_256(e), ch32(e, f, g), this.k[i], W[i]);
        var T2 = sum32(s0_256(a), maj32(a, b, c));
        h = g;
        g = f;
        f = e;
        e = sum32(d, T1);
        d = c;
        c = b;
        b = a;
        a = sum32(T1, T2);
    }
    this.h[0] = sum32(this.h[0], a);
    this.h[1] = sum32(this.h[1], b);
    this.h[2] = sum32(this.h[2], c);
    this.h[3] = sum32(this.h[3], d);
    this.h[4] = sum32(this.h[4], e);
    this.h[5] = sum32(this.h[5], f);
    this.h[6] = sum32(this.h[6], g);
    this.h[7] = sum32(this.h[7], h);
};
SHA256.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};

},{"../utils":"5D4Rq","../common":"gzTvs","./common":"g4tp1","minimalistic-assert":"af22k"}],"lfSo2":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var SHA512 = require('./512');
function SHA384() {
    if (!(this instanceof SHA384)) return new SHA384();
    SHA512.call(this);
    this.h = [
        3418070365,
        3238371032,
        1654270250,
        914150663,
        2438529370,
        812702999,
        355462360,
        4144912697,
        1731405415,
        4290775857,
        2394180231,
        1750603025,
        3675008525,
        1694076839,
        1203062813,
        3204075428
    ];
}
utils.inherits(SHA384, SHA512);
module.exports = SHA384;
SHA384.blockSize = 1024;
SHA384.outSize = 384;
SHA384.hmacStrength = 192;
SHA384.padLength = 128;
SHA384.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h.slice(0, 12), 'big');
    else return utils.split32(this.h.slice(0, 12), 'big');
};

},{"../utils":"5D4Rq","./512":"fHXBj"}],"fHXBj":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var common = require('../common');
var assert = require('minimalistic-assert');
var rotr64_hi = utils.rotr64_hi;
var rotr64_lo = utils.rotr64_lo;
var shr64_hi = utils.shr64_hi;
var shr64_lo = utils.shr64_lo;
var sum64 = utils.sum64;
var sum64_hi = utils.sum64_hi;
var sum64_lo = utils.sum64_lo;
var sum64_4_hi = utils.sum64_4_hi;
var sum64_4_lo = utils.sum64_4_lo;
var sum64_5_hi = utils.sum64_5_hi;
var sum64_5_lo = utils.sum64_5_lo;
var BlockHash = common.BlockHash;
var sha512_K = [
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
];
function SHA512() {
    if (!(this instanceof SHA512)) return new SHA512();
    BlockHash.call(this);
    this.h = [
        1779033703,
        4089235720,
        3144134277,
        2227873595,
        1013904242,
        4271175723,
        2773480762,
        1595750129,
        1359893119,
        2917565137,
        2600822924,
        725511199,
        528734635,
        4215389547,
        1541459225,
        327033209
    ];
    this.k = sha512_K;
    this.W = new Array(160);
}
utils.inherits(SHA512, BlockHash);
module.exports = SHA512;
SHA512.blockSize = 1024;
SHA512.outSize = 512;
SHA512.hmacStrength = 192;
SHA512.padLength = 128;
SHA512.prototype._prepareBlock = function _prepareBlock(msg, start) {
    var W = this.W;
    // 32 x 32bit words
    for(var i = 0; i < 32; i++)W[i] = msg[start + i];
    for(; i < W.length; i += 2){
        var c0_hi = g1_512_hi(W[i - 4], W[i - 3]); // i - 2
        var c0_lo = g1_512_lo(W[i - 4], W[i - 3]);
        var c1_hi = W[i - 14]; // i - 7
        var c1_lo = W[i - 13];
        var c2_hi = g0_512_hi(W[i - 30], W[i - 29]); // i - 15
        var c2_lo = g0_512_lo(W[i - 30], W[i - 29]);
        var c3_hi = W[i - 32]; // i - 16
        var c3_lo = W[i - 31];
        W[i] = sum64_4_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
        W[i + 1] = sum64_4_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo);
    }
};
SHA512.prototype._update = function _update(msg, start) {
    this._prepareBlock(msg, start);
    var W = this.W;
    var ah = this.h[0];
    var al = this.h[1];
    var bh = this.h[2];
    var bl = this.h[3];
    var ch = this.h[4];
    var cl = this.h[5];
    var dh = this.h[6];
    var dl = this.h[7];
    var eh = this.h[8];
    var el = this.h[9];
    var fh = this.h[10];
    var fl = this.h[11];
    var gh = this.h[12];
    var gl = this.h[13];
    var hh = this.h[14];
    var hl = this.h[15];
    assert(this.k.length === W.length);
    for(var i = 0; i < W.length; i += 2){
        var c0_hi = hh;
        var c0_lo = hl;
        var c1_hi = s1_512_hi(eh, el);
        var c1_lo = s1_512_lo(eh, el);
        var c2_hi = ch64_hi(eh, el, fh, fl, gh, gl);
        var c2_lo = ch64_lo(eh, el, fh, fl, gh, gl);
        var c3_hi = this.k[i];
        var c3_lo = this.k[i + 1];
        var c4_hi = W[i];
        var c4_lo = W[i + 1];
        var T1_hi = sum64_5_hi(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        var T1_lo = sum64_5_lo(c0_hi, c0_lo, c1_hi, c1_lo, c2_hi, c2_lo, c3_hi, c3_lo, c4_hi, c4_lo);
        c0_hi = s0_512_hi(ah, al);
        c0_lo = s0_512_lo(ah, al);
        c1_hi = maj64_hi(ah, al, bh, bl, ch, cl);
        c1_lo = maj64_lo(ah, al, bh, bl, ch, cl);
        var T2_hi = sum64_hi(c0_hi, c0_lo, c1_hi, c1_lo);
        var T2_lo = sum64_lo(c0_hi, c0_lo, c1_hi, c1_lo);
        hh = gh;
        hl = gl;
        gh = fh;
        gl = fl;
        fh = eh;
        fl = el;
        eh = sum64_hi(dh, dl, T1_hi, T1_lo);
        el = sum64_lo(dl, dl, T1_hi, T1_lo);
        dh = ch;
        dl = cl;
        ch = bh;
        cl = bl;
        bh = ah;
        bl = al;
        ah = sum64_hi(T1_hi, T1_lo, T2_hi, T2_lo);
        al = sum64_lo(T1_hi, T1_lo, T2_hi, T2_lo);
    }
    sum64(this.h, 0, ah, al);
    sum64(this.h, 2, bh, bl);
    sum64(this.h, 4, ch, cl);
    sum64(this.h, 6, dh, dl);
    sum64(this.h, 8, eh, el);
    sum64(this.h, 10, fh, fl);
    sum64(this.h, 12, gh, gl);
    sum64(this.h, 14, hh, hl);
};
SHA512.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'big');
    else return utils.split32(this.h, 'big');
};
function ch64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ ~xh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function ch64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ ~xl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_hi(xh, xl, yh, yl, zh) {
    var r = xh & yh ^ xh & zh ^ yh & zh;
    if (r < 0) r += 4294967296;
    return r;
}
function maj64_lo(xh, xl, yh, yl, zh, zl) {
    var r = xl & yl ^ xl & zl ^ yl & zl;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 28);
    var c1_hi = rotr64_hi(xl, xh, 2); // 34
    var c2_hi = rotr64_hi(xl, xh, 7); // 39
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 28);
    var c1_lo = rotr64_lo(xl, xh, 2); // 34
    var c2_lo = rotr64_lo(xl, xh, 7); // 39
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 14);
    var c1_hi = rotr64_hi(xh, xl, 18);
    var c2_hi = rotr64_hi(xl, xh, 9); // 41
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function s1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 14);
    var c1_lo = rotr64_lo(xh, xl, 18);
    var c2_lo = rotr64_lo(xl, xh, 9); // 41
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 1);
    var c1_hi = rotr64_hi(xh, xl, 8);
    var c2_hi = shr64_hi(xh, xl, 7);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g0_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 1);
    var c1_lo = rotr64_lo(xh, xl, 8);
    var c2_lo = shr64_lo(xh, xl, 7);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_hi(xh, xl) {
    var c0_hi = rotr64_hi(xh, xl, 19);
    var c1_hi = rotr64_hi(xl, xh, 29); // 61
    var c2_hi = shr64_hi(xh, xl, 6);
    var r = c0_hi ^ c1_hi ^ c2_hi;
    if (r < 0) r += 4294967296;
    return r;
}
function g1_512_lo(xh, xl) {
    var c0_lo = rotr64_lo(xh, xl, 19);
    var c1_lo = rotr64_lo(xl, xh, 29); // 61
    var c2_lo = shr64_lo(xh, xl, 6);
    var r = c0_lo ^ c1_lo ^ c2_lo;
    if (r < 0) r += 4294967296;
    return r;
}

},{"../utils":"5D4Rq","../common":"gzTvs","minimalistic-assert":"af22k"}],"i9gve":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var common = require('./common');
var rotl32 = utils.rotl32;
var sum32 = utils.sum32;
var sum32_3 = utils.sum32_3;
var sum32_4 = utils.sum32_4;
var BlockHash = common.BlockHash;
function RIPEMD160() {
    if (!(this instanceof RIPEMD160)) return new RIPEMD160();
    BlockHash.call(this);
    this.h = [
        1732584193,
        4023233417,
        2562383102,
        271733878,
        3285377520
    ];
    this.endian = 'little';
}
utils.inherits(RIPEMD160, BlockHash);
exports.ripemd160 = RIPEMD160;
RIPEMD160.blockSize = 512;
RIPEMD160.outSize = 160;
RIPEMD160.hmacStrength = 192;
RIPEMD160.padLength = 64;
RIPEMD160.prototype._update = function update(msg, start) {
    var A = this.h[0];
    var B = this.h[1];
    var C = this.h[2];
    var D = this.h[3];
    var E = this.h[4];
    var Ah = A;
    var Bh = B;
    var Ch = C;
    var Dh = D;
    var Eh = E;
    for(var j = 0; j < 80; j++){
        var T = sum32(rotl32(sum32_4(A, f(j, B, C, D), msg[r[j] + start], K(j)), s[j]), E);
        A = E;
        E = D;
        D = rotl32(C, 10);
        C = B;
        B = T;
        T = sum32(rotl32(sum32_4(Ah, f(79 - j, Bh, Ch, Dh), msg[rh[j] + start], Kh(j)), sh[j]), Eh);
        Ah = Eh;
        Eh = Dh;
        Dh = rotl32(Ch, 10);
        Ch = Bh;
        Bh = T;
    }
    T = sum32_3(this.h[1], C, Dh);
    this.h[1] = sum32_3(this.h[2], D, Eh);
    this.h[2] = sum32_3(this.h[3], E, Ah);
    this.h[3] = sum32_3(this.h[4], A, Bh);
    this.h[4] = sum32_3(this.h[0], B, Ch);
    this.h[0] = T;
};
RIPEMD160.prototype._digest = function digest(enc) {
    if (enc === 'hex') return utils.toHex32(this.h, 'little');
    else return utils.split32(this.h, 'little');
};
function f(j, x, y, z) {
    if (j <= 15) return x ^ y ^ z;
    else if (j <= 31) return x & y | ~x & z;
    else if (j <= 47) return (x | ~y) ^ z;
    else if (j <= 63) return x & z | y & ~z;
    else return x ^ (y | ~z);
}
function K(j) {
    if (j <= 15) return 0;
    else if (j <= 31) return 1518500249;
    else if (j <= 47) return 1859775393;
    else if (j <= 63) return 2400959708;
    else return 2840853838;
}
function Kh(j) {
    if (j <= 15) return 1352829926;
    else if (j <= 31) return 1548603684;
    else if (j <= 47) return 1836072691;
    else if (j <= 63) return 2053994217;
    else return 0;
}
var r = [
    0,
    1,
    2,
    3,
    4,
    5,
    6,
    7,
    8,
    9,
    10,
    11,
    12,
    13,
    14,
    15,
    7,
    4,
    13,
    1,
    10,
    6,
    15,
    3,
    12,
    0,
    9,
    5,
    2,
    14,
    11,
    8,
    3,
    10,
    14,
    4,
    9,
    15,
    8,
    1,
    2,
    7,
    0,
    6,
    13,
    11,
    5,
    12,
    1,
    9,
    11,
    10,
    0,
    8,
    12,
    4,
    13,
    3,
    7,
    15,
    14,
    5,
    6,
    2,
    4,
    0,
    5,
    9,
    7,
    12,
    2,
    10,
    14,
    1,
    3,
    8,
    11,
    6,
    15,
    13
];
var rh = [
    5,
    14,
    7,
    0,
    9,
    2,
    11,
    4,
    13,
    6,
    15,
    8,
    1,
    10,
    3,
    12,
    6,
    11,
    3,
    7,
    0,
    13,
    5,
    10,
    14,
    15,
    8,
    12,
    4,
    9,
    1,
    2,
    15,
    5,
    1,
    3,
    7,
    14,
    6,
    9,
    11,
    8,
    12,
    2,
    10,
    0,
    4,
    13,
    8,
    6,
    4,
    1,
    3,
    11,
    15,
    0,
    5,
    12,
    2,
    13,
    9,
    7,
    10,
    14,
    12,
    15,
    10,
    4,
    1,
    5,
    8,
    7,
    6,
    2,
    13,
    14,
    0,
    3,
    9,
    11
];
var s = [
    11,
    14,
    15,
    12,
    5,
    8,
    7,
    9,
    11,
    13,
    14,
    15,
    6,
    7,
    9,
    8,
    7,
    6,
    8,
    13,
    11,
    9,
    7,
    15,
    7,
    12,
    15,
    9,
    11,
    7,
    13,
    12,
    11,
    13,
    6,
    7,
    14,
    9,
    13,
    15,
    14,
    8,
    13,
    6,
    5,
    12,
    7,
    5,
    11,
    12,
    14,
    15,
    14,
    15,
    9,
    8,
    9,
    14,
    5,
    6,
    8,
    6,
    5,
    12,
    9,
    15,
    5,
    11,
    6,
    8,
    13,
    12,
    5,
    12,
    13,
    14,
    11,
    8,
    5,
    6
];
var sh = [
    8,
    9,
    9,
    11,
    13,
    15,
    15,
    5,
    7,
    7,
    8,
    11,
    14,
    14,
    12,
    6,
    9,
    13,
    15,
    7,
    12,
    8,
    9,
    11,
    7,
    7,
    12,
    7,
    6,
    15,
    13,
    11,
    9,
    7,
    15,
    11,
    8,
    6,
    6,
    14,
    12,
    13,
    5,
    14,
    13,
    13,
    7,
    5,
    15,
    5,
    8,
    11,
    14,
    14,
    6,
    14,
    6,
    9,
    12,
    9,
    12,
    5,
    15,
    8,
    8,
    5,
    12,
    9,
    12,
    5,
    14,
    6,
    8,
    13,
    6,
    5,
    15,
    13,
    11,
    11
];

},{"./utils":"5D4Rq","./common":"gzTvs"}],"jCOaa":[function(require,module,exports) {
'use strict';
var utils = require('./utils');
var assert = require('minimalistic-assert');
function Hmac(hash, key, enc) {
    if (!(this instanceof Hmac)) return new Hmac(hash, key, enc);
    this.Hash = hash;
    this.blockSize = hash.blockSize / 8;
    this.outSize = hash.outSize / 8;
    this.inner = null;
    this.outer = null;
    this._init(utils.toArray(key, enc));
}
module.exports = Hmac;
Hmac.prototype._init = function init(key) {
    // Shorten key, if needed
    if (key.length > this.blockSize) key = new this.Hash().update(key).digest();
    assert(key.length <= this.blockSize);
    // Add padding to key
    for(var i = key.length; i < this.blockSize; i++)key.push(0);
    for(i = 0; i < key.length; i++)key[i] ^= 54;
    this.inner = new this.Hash().update(key);
    // 0x36 ^ 0x5c = 0x6a
    for(i = 0; i < key.length; i++)key[i] ^= 106;
    this.outer = new this.Hash().update(key);
};
Hmac.prototype.update = function update(msg, enc) {
    this.inner.update(msg, enc);
    return this;
};
Hmac.prototype.digest = function digest(enc) {
    this.outer.update(this.inner.digest());
    return this.outer.digest(enc);
};

},{"./utils":"5D4Rq","minimalistic-assert":"af22k"}],"2SASv":[function(require,module,exports) {
module.exports = {
    doubles: {
        step: 4,
        points: [
            [
                'e60fce93b59e9ec53011aabc21c23e97b2a31369b87a5ae9c44ee89e2a6dec0a',
                'f7e3507399e595929db99f34f57937101296891e44d23f0be1f32cce69616821', 
            ],
            [
                '8282263212c609d9ea2a6e3e172de238d8c39cabd5ac1ca10646e23fd5f51508',
                '11f8a8098557dfe45e8256e830b60ace62d613ac2f7b17bed31b6eaff6e26caf', 
            ],
            [
                '175e159f728b865a72f99cc6c6fc846de0b93833fd2222ed73fce5b551e5b739',
                'd3506e0d9e3c79eba4ef97a51ff71f5eacb5955add24345c6efa6ffee9fed695', 
            ],
            [
                '363d90d447b00c9c99ceac05b6262ee053441c7e55552ffe526bad8f83ff4640',
                '4e273adfc732221953b445397f3363145b9a89008199ecb62003c7f3bee9de9', 
            ],
            [
                '8b4b5f165df3c2be8c6244b5b745638843e4a781a15bcd1b69f79a55dffdf80c',
                '4aad0a6f68d308b4b3fbd7813ab0da04f9e336546162ee56b3eff0c65fd4fd36', 
            ],
            [
                '723cbaa6e5db996d6bf771c00bd548c7b700dbffa6c0e77bcb6115925232fcda',
                '96e867b5595cc498a921137488824d6e2660a0653779494801dc069d9eb39f5f', 
            ],
            [
                'eebfa4d493bebf98ba5feec812c2d3b50947961237a919839a533eca0e7dd7fa',
                '5d9a8ca3970ef0f269ee7edaf178089d9ae4cdc3a711f712ddfd4fdae1de8999', 
            ],
            [
                '100f44da696e71672791d0a09b7bde459f1215a29b3c03bfefd7835b39a48db0',
                'cdd9e13192a00b772ec8f3300c090666b7ff4a18ff5195ac0fbd5cd62bc65a09', 
            ],
            [
                'e1031be262c7ed1b1dc9227a4a04c017a77f8d4464f3b3852c8acde6e534fd2d',
                '9d7061928940405e6bb6a4176597535af292dd419e1ced79a44f18f29456a00d', 
            ],
            [
                'feea6cae46d55b530ac2839f143bd7ec5cf8b266a41d6af52d5e688d9094696d',
                'e57c6b6c97dce1bab06e4e12bf3ecd5c981c8957cc41442d3155debf18090088', 
            ],
            [
                'da67a91d91049cdcb367be4be6ffca3cfeed657d808583de33fa978bc1ec6cb1',
                '9bacaa35481642bc41f463f7ec9780e5dec7adc508f740a17e9ea8e27a68be1d', 
            ],
            [
                '53904faa0b334cdda6e000935ef22151ec08d0f7bb11069f57545ccc1a37b7c0',
                '5bc087d0bc80106d88c9eccac20d3c1c13999981e14434699dcb096b022771c8', 
            ],
            [
                '8e7bcd0bd35983a7719cca7764ca906779b53a043a9b8bcaeff959f43ad86047',
                '10b7770b2a3da4b3940310420ca9514579e88e2e47fd68b3ea10047e8460372a', 
            ],
            [
                '385eed34c1cdff21e6d0818689b81bde71a7f4f18397e6690a841e1599c43862',
                '283bebc3e8ea23f56701de19e9ebf4576b304eec2086dc8cc0458fe5542e5453', 
            ],
            [
                '6f9d9b803ecf191637c73a4413dfa180fddf84a5947fbc9c606ed86c3fac3a7',
                '7c80c68e603059ba69b8e2a30e45c4d47ea4dd2f5c281002d86890603a842160', 
            ],
            [
                '3322d401243c4e2582a2147c104d6ecbf774d163db0f5e5313b7e0e742d0e6bd',
                '56e70797e9664ef5bfb019bc4ddaf9b72805f63ea2873af624f3a2e96c28b2a0', 
            ],
            [
                '85672c7d2de0b7da2bd1770d89665868741b3f9af7643397721d74d28134ab83',
                '7c481b9b5b43b2eb6374049bfa62c2e5e77f17fcc5298f44c8e3094f790313a6', 
            ],
            [
                '948bf809b1988a46b06c9f1919413b10f9226c60f668832ffd959af60c82a0a',
                '53a562856dcb6646dc6b74c5d1c3418c6d4dff08c97cd2bed4cb7f88d8c8e589', 
            ],
            [
                '6260ce7f461801c34f067ce0f02873a8f1b0e44dfc69752accecd819f38fd8e8',
                'bc2da82b6fa5b571a7f09049776a1ef7ecd292238051c198c1a84e95b2b4ae17', 
            ],
            [
                'e5037de0afc1d8d43d8348414bbf4103043ec8f575bfdc432953cc8d2037fa2d',
                '4571534baa94d3b5f9f98d09fb990bddbd5f5b03ec481f10e0e5dc841d755bda', 
            ],
            [
                'e06372b0f4a207adf5ea905e8f1771b4e7e8dbd1c6a6c5b725866a0ae4fce725',
                '7a908974bce18cfe12a27bb2ad5a488cd7484a7787104870b27034f94eee31dd', 
            ],
            [
                '213c7a715cd5d45358d0bbf9dc0ce02204b10bdde2a3f58540ad6908d0559754',
                '4b6dad0b5ae462507013ad06245ba190bb4850f5f36a7eeddff2c27534b458f2', 
            ],
            [
                '4e7c272a7af4b34e8dbb9352a5419a87e2838c70adc62cddf0cc3a3b08fbd53c',
                '17749c766c9d0b18e16fd09f6def681b530b9614bff7dd33e0b3941817dcaae6', 
            ],
            [
                'fea74e3dbe778b1b10f238ad61686aa5c76e3db2be43057632427e2840fb27b6',
                '6e0568db9b0b13297cf674deccb6af93126b596b973f7b77701d3db7f23cb96f', 
            ],
            [
                '76e64113f677cf0e10a2570d599968d31544e179b760432952c02a4417bdde39',
                'c90ddf8dee4e95cf577066d70681f0d35e2a33d2b56d2032b4b1752d1901ac01', 
            ],
            [
                'c738c56b03b2abe1e8281baa743f8f9a8f7cc643df26cbee3ab150242bcbb891',
                '893fb578951ad2537f718f2eacbfbbbb82314eef7880cfe917e735d9699a84c3', 
            ],
            [
                'd895626548b65b81e264c7637c972877d1d72e5f3a925014372e9f6588f6c14b',
                'febfaa38f2bc7eae728ec60818c340eb03428d632bb067e179363ed75d7d991f', 
            ],
            [
                'b8da94032a957518eb0f6433571e8761ceffc73693e84edd49150a564f676e03',
                '2804dfa44805a1e4d7c99cc9762808b092cc584d95ff3b511488e4e74efdf6e7', 
            ],
            [
                'e80fea14441fb33a7d8adab9475d7fab2019effb5156a792f1a11778e3c0df5d',
                'eed1de7f638e00771e89768ca3ca94472d155e80af322ea9fcb4291b6ac9ec78', 
            ],
            [
                'a301697bdfcd704313ba48e51d567543f2a182031efd6915ddc07bbcc4e16070',
                '7370f91cfb67e4f5081809fa25d40f9b1735dbf7c0a11a130c0d1a041e177ea1', 
            ],
            [
                '90ad85b389d6b936463f9d0512678de208cc330b11307fffab7ac63e3fb04ed4',
                'e507a3620a38261affdcbd9427222b839aefabe1582894d991d4d48cb6ef150', 
            ],
            [
                '8f68b9d2f63b5f339239c1ad981f162ee88c5678723ea3351b7b444c9ec4c0da',
                '662a9f2dba063986de1d90c2b6be215dbbea2cfe95510bfdf23cbf79501fff82', 
            ],
            [
                'e4f3fb0176af85d65ff99ff9198c36091f48e86503681e3e6686fd5053231e11',
                '1e63633ad0ef4f1c1661a6d0ea02b7286cc7e74ec951d1c9822c38576feb73bc', 
            ],
            [
                '8c00fa9b18ebf331eb961537a45a4266c7034f2f0d4e1d0716fb6eae20eae29e',
                'efa47267fea521a1a9dc343a3736c974c2fadafa81e36c54e7d2a4c66702414b', 
            ],
            [
                'e7a26ce69dd4829f3e10cec0a9e98ed3143d084f308b92c0997fddfc60cb3e41',
                '2a758e300fa7984b471b006a1aafbb18d0a6b2c0420e83e20e8a9421cf2cfd51', 
            ],
            [
                'b6459e0ee3662ec8d23540c223bcbdc571cbcb967d79424f3cf29eb3de6b80ef',
                '67c876d06f3e06de1dadf16e5661db3c4b3ae6d48e35b2ff30bf0b61a71ba45', 
            ],
            [
                'd68a80c8280bb840793234aa118f06231d6f1fc67e73c5a5deda0f5b496943e8',
                'db8ba9fff4b586d00c4b1f9177b0e28b5b0e7b8f7845295a294c84266b133120', 
            ],
            [
                '324aed7df65c804252dc0270907a30b09612aeb973449cea4095980fc28d3d5d',
                '648a365774b61f2ff130c0c35aec1f4f19213b0c7e332843967224af96ab7c84', 
            ],
            [
                '4df9c14919cde61f6d51dfdbe5fee5dceec4143ba8d1ca888e8bd373fd054c96',
                '35ec51092d8728050974c23a1d85d4b5d506cdc288490192ebac06cad10d5d', 
            ],
            [
                '9c3919a84a474870faed8a9c1cc66021523489054d7f0308cbfc99c8ac1f98cd',
                'ddb84f0f4a4ddd57584f044bf260e641905326f76c64c8e6be7e5e03d4fc599d', 
            ],
            [
                '6057170b1dd12fdf8de05f281d8e06bb91e1493a8b91d4cc5a21382120a959e5',
                '9a1af0b26a6a4807add9a2daf71df262465152bc3ee24c65e899be932385a2a8', 
            ],
            [
                'a576df8e23a08411421439a4518da31880cef0fba7d4df12b1a6973eecb94266',
                '40a6bf20e76640b2c92b97afe58cd82c432e10a7f514d9f3ee8be11ae1b28ec8', 
            ],
            [
                '7778a78c28dec3e30a05fe9629de8c38bb30d1f5cf9a3a208f763889be58ad71',
                '34626d9ab5a5b22ff7098e12f2ff580087b38411ff24ac563b513fc1fd9f43ac', 
            ],
            [
                '928955ee637a84463729fd30e7afd2ed5f96274e5ad7e5cb09eda9c06d903ac',
                'c25621003d3f42a827b78a13093a95eeac3d26efa8a8d83fc5180e935bcd091f', 
            ],
            [
                '85d0fef3ec6db109399064f3a0e3b2855645b4a907ad354527aae75163d82751',
                '1f03648413a38c0be29d496e582cf5663e8751e96877331582c237a24eb1f962', 
            ],
            [
                'ff2b0dce97eece97c1c9b6041798b85dfdfb6d8882da20308f5404824526087e',
                '493d13fef524ba188af4c4dc54d07936c7b7ed6fb90e2ceb2c951e01f0c29907', 
            ],
            [
                '827fbbe4b1e880ea9ed2b2e6301b212b57f1ee148cd6dd28780e5e2cf856e241',
                'c60f9c923c727b0b71bef2c67d1d12687ff7a63186903166d605b68baec293ec', 
            ],
            [
                'eaa649f21f51bdbae7be4ae34ce6e5217a58fdce7f47f9aa7f3b58fa2120e2b3',
                'be3279ed5bbbb03ac69a80f89879aa5a01a6b965f13f7e59d47a5305ba5ad93d', 
            ],
            [
                'e4a42d43c5cf169d9391df6decf42ee541b6d8f0c9a137401e23632dda34d24f',
                '4d9f92e716d1c73526fc99ccfb8ad34ce886eedfa8d8e4f13a7f7131deba9414', 
            ],
            [
                '1ec80fef360cbdd954160fadab352b6b92b53576a88fea4947173b9d4300bf19',
                'aeefe93756b5340d2f3a4958a7abbf5e0146e77f6295a07b671cdc1cc107cefd', 
            ],
            [
                '146a778c04670c2f91b00af4680dfa8bce3490717d58ba889ddb5928366642be',
                'b318e0ec3354028add669827f9d4b2870aaa971d2f7e5ed1d0b297483d83efd0', 
            ],
            [
                'fa50c0f61d22e5f07e3acebb1aa07b128d0012209a28b9776d76a8793180eef9',
                '6b84c6922397eba9b72cd2872281a68a5e683293a57a213b38cd8d7d3f4f2811', 
            ],
            [
                'da1d61d0ca721a11b1a5bf6b7d88e8421a288ab5d5bba5220e53d32b5f067ec2',
                '8157f55a7c99306c79c0766161c91e2966a73899d279b48a655fba0f1ad836f1', 
            ],
            [
                'a8e282ff0c9706907215ff98e8fd416615311de0446f1e062a73b0610d064e13',
                '7f97355b8db81c09abfb7f3c5b2515888b679a3e50dd6bd6cef7c73111f4cc0c', 
            ],
            [
                '174a53b9c9a285872d39e56e6913cab15d59b1fa512508c022f382de8319497c',
                'ccc9dc37abfc9c1657b4155f2c47f9e6646b3a1d8cb9854383da13ac079afa73', 
            ],
            [
                '959396981943785c3d3e57edf5018cdbe039e730e4918b3d884fdff09475b7ba',
                '2e7e552888c331dd8ba0386a4b9cd6849c653f64c8709385e9b8abf87524f2fd', 
            ],
            [
                'd2a63a50ae401e56d645a1153b109a8fcca0a43d561fba2dbb51340c9d82b151',
                'e82d86fb6443fcb7565aee58b2948220a70f750af484ca52d4142174dcf89405', 
            ],
            [
                '64587e2335471eb890ee7896d7cfdc866bacbdbd3839317b3436f9b45617e073',
                'd99fcdd5bf6902e2ae96dd6447c299a185b90a39133aeab358299e5e9faf6589', 
            ],
            [
                '8481bde0e4e4d885b3a546d3e549de042f0aa6cea250e7fd358d6c86dd45e458',
                '38ee7b8cba5404dd84a25bf39cecb2ca900a79c42b262e556d64b1b59779057e', 
            ],
            [
                '13464a57a78102aa62b6979ae817f4637ffcfed3c4b1ce30bcd6303f6caf666b',
                '69be159004614580ef7e433453ccb0ca48f300a81d0942e13f495a907f6ecc27', 
            ],
            [
                'bc4a9df5b713fe2e9aef430bcc1dc97a0cd9ccede2f28588cada3a0d2d83f366',
                'd3a81ca6e785c06383937adf4b798caa6e8a9fbfa547b16d758d666581f33c1', 
            ],
            [
                '8c28a97bf8298bc0d23d8c749452a32e694b65e30a9472a3954ab30fe5324caa',
                '40a30463a3305193378fedf31f7cc0eb7ae784f0451cb9459e71dc73cbef9482', 
            ],
            [
                '8ea9666139527a8c1dd94ce4f071fd23c8b350c5a4bb33748c4ba111faccae0',
                '620efabbc8ee2782e24e7c0cfb95c5d735b783be9cf0f8e955af34a30e62b945', 
            ],
            [
                'dd3625faef5ba06074669716bbd3788d89bdde815959968092f76cc4eb9a9787',
                '7a188fa3520e30d461da2501045731ca941461982883395937f68d00c644a573', 
            ],
            [
                'f710d79d9eb962297e4f6232b40e8f7feb2bc63814614d692c12de752408221e',
                'ea98e67232d3b3295d3b535532115ccac8612c721851617526ae47a9c77bfc82', 
            ], 
        ]
    },
    naf: {
        wnd: 7,
        points: [
            [
                'f9308a019258c31049344f85f89d5229b531c845836f99b08601f113bce036f9',
                '388f7b0f632de8140fe337e62a37f3566500a99934c2231b6cb9fd7584b8e672', 
            ],
            [
                '2f8bde4d1a07209355b4a7250a5c5128e88b84bddc619ab7cba8d569b240efe4',
                'd8ac222636e5e3d6d4dba9dda6c9c426f788271bab0d6840dca87d3aa6ac62d6', 
            ],
            [
                '5cbdf0646e5db4eaa398f365f2ea7a0e3d419b7e0330e39ce92bddedcac4f9bc',
                '6aebca40ba255960a3178d6d861a54dba813d0b813fde7b5a5082628087264da', 
            ],
            [
                'acd484e2f0c7f65309ad178a9f559abde09796974c57e714c35f110dfc27ccbe',
                'cc338921b0a7d9fd64380971763b61e9add888a4375f8e0f05cc262ac64f9c37', 
            ],
            [
                '774ae7f858a9411e5ef4246b70c65aac5649980be5c17891bbec17895da008cb',
                'd984a032eb6b5e190243dd56d7b7b365372db1e2dff9d6a8301d74c9c953c61b', 
            ],
            [
                'f28773c2d975288bc7d1d205c3748651b075fbc6610e58cddeeddf8f19405aa8',
                'ab0902e8d880a89758212eb65cdaf473a1a06da521fa91f29b5cb52db03ed81', 
            ],
            [
                'd7924d4f7d43ea965a465ae3095ff41131e5946f3c85f79e44adbcf8e27e080e',
                '581e2872a86c72a683842ec228cc6defea40af2bd896d3a5c504dc9ff6a26b58', 
            ],
            [
                'defdea4cdb677750a420fee807eacf21eb9898ae79b9768766e4faa04a2d4a34',
                '4211ab0694635168e997b0ead2a93daeced1f4a04a95c0f6cfb199f69e56eb77', 
            ],
            [
                '2b4ea0a797a443d293ef5cff444f4979f06acfebd7e86d277475656138385b6c',
                '85e89bc037945d93b343083b5a1c86131a01f60c50269763b570c854e5c09b7a', 
            ],
            [
                '352bbf4a4cdd12564f93fa332ce333301d9ad40271f8107181340aef25be59d5',
                '321eb4075348f534d59c18259dda3e1f4a1b3b2e71b1039c67bd3d8bcf81998c', 
            ],
            [
                '2fa2104d6b38d11b0230010559879124e42ab8dfeff5ff29dc9cdadd4ecacc3f',
                '2de1068295dd865b64569335bd5dd80181d70ecfc882648423ba76b532b7d67', 
            ],
            [
                '9248279b09b4d68dab21a9b066edda83263c3d84e09572e269ca0cd7f5453714',
                '73016f7bf234aade5d1aa71bdea2b1ff3fc0de2a887912ffe54a32ce97cb3402', 
            ],
            [
                'daed4f2be3a8bf278e70132fb0beb7522f570e144bf615c07e996d443dee8729',
                'a69dce4a7d6c98e8d4a1aca87ef8d7003f83c230f3afa726ab40e52290be1c55', 
            ],
            [
                'c44d12c7065d812e8acf28d7cbb19f9011ecd9e9fdf281b0e6a3b5e87d22e7db',
                '2119a460ce326cdc76c45926c982fdac0e106e861edf61c5a039063f0e0e6482', 
            ],
            [
                '6a245bf6dc698504c89a20cfded60853152b695336c28063b61c65cbd269e6b4',
                'e022cf42c2bd4a708b3f5126f16a24ad8b33ba48d0423b6efd5e6348100d8a82', 
            ],
            [
                '1697ffa6fd9de627c077e3d2fe541084ce13300b0bec1146f95ae57f0d0bd6a5',
                'b9c398f186806f5d27561506e4557433a2cf15009e498ae7adee9d63d01b2396', 
            ],
            [
                '605bdb019981718b986d0f07e834cb0d9deb8360ffb7f61df982345ef27a7479',
                '2972d2de4f8d20681a78d93ec96fe23c26bfae84fb14db43b01e1e9056b8c49', 
            ],
            [
                '62d14dab4150bf497402fdc45a215e10dcb01c354959b10cfe31c7e9d87ff33d',
                '80fc06bd8cc5b01098088a1950eed0db01aa132967ab472235f5642483b25eaf', 
            ],
            [
                '80c60ad0040f27dade5b4b06c408e56b2c50e9f56b9b8b425e555c2f86308b6f',
                '1c38303f1cc5c30f26e66bad7fe72f70a65eed4cbe7024eb1aa01f56430bd57a', 
            ],
            [
                '7a9375ad6167ad54aa74c6348cc54d344cc5dc9487d847049d5eabb0fa03c8fb',
                'd0e3fa9eca8726909559e0d79269046bdc59ea10c70ce2b02d499ec224dc7f7', 
            ],
            [
                'd528ecd9b696b54c907a9ed045447a79bb408ec39b68df504bb51f459bc3ffc9',
                'eecf41253136e5f99966f21881fd656ebc4345405c520dbc063465b521409933', 
            ],
            [
                '49370a4b5f43412ea25f514e8ecdad05266115e4a7ecb1387231808f8b45963',
                '758f3f41afd6ed428b3081b0512fd62a54c3f3afbb5b6764b653052a12949c9a', 
            ],
            [
                '77f230936ee88cbbd73df930d64702ef881d811e0e1498e2f1c13eb1fc345d74',
                '958ef42a7886b6400a08266e9ba1b37896c95330d97077cbbe8eb3c7671c60d6', 
            ],
            [
                'f2dac991cc4ce4b9ea44887e5c7c0bce58c80074ab9d4dbaeb28531b7739f530',
                'e0dedc9b3b2f8dad4da1f32dec2531df9eb5fbeb0598e4fd1a117dba703a3c37', 
            ],
            [
                '463b3d9f662621fb1b4be8fbbe2520125a216cdfc9dae3debcba4850c690d45b',
                '5ed430d78c296c3543114306dd8622d7c622e27c970a1de31cb377b01af7307e', 
            ],
            [
                'f16f804244e46e2a09232d4aff3b59976b98fac14328a2d1a32496b49998f247',
                'cedabd9b82203f7e13d206fcdf4e33d92a6c53c26e5cce26d6579962c4e31df6', 
            ],
            [
                'caf754272dc84563b0352b7a14311af55d245315ace27c65369e15f7151d41d1',
                'cb474660ef35f5f2a41b643fa5e460575f4fa9b7962232a5c32f908318a04476', 
            ],
            [
                '2600ca4b282cb986f85d0f1709979d8b44a09c07cb86d7c124497bc86f082120',
                '4119b88753c15bd6a693b03fcddbb45d5ac6be74ab5f0ef44b0be9475a7e4b40', 
            ],
            [
                '7635ca72d7e8432c338ec53cd12220bc01c48685e24f7dc8c602a7746998e435',
                '91b649609489d613d1d5e590f78e6d74ecfc061d57048bad9e76f302c5b9c61', 
            ],
            [
                '754e3239f325570cdbbf4a87deee8a66b7f2b33479d468fbc1a50743bf56cc18',
                '673fb86e5bda30fb3cd0ed304ea49a023ee33d0197a695d0c5d98093c536683', 
            ],
            [
                'e3e6bd1071a1e96aff57859c82d570f0330800661d1c952f9fe2694691d9b9e8',
                '59c9e0bba394e76f40c0aa58379a3cb6a5a2283993e90c4167002af4920e37f5', 
            ],
            [
                '186b483d056a033826ae73d88f732985c4ccb1f32ba35f4b4cc47fdcf04aa6eb',
                '3b952d32c67cf77e2e17446e204180ab21fb8090895138b4a4a797f86e80888b', 
            ],
            [
                'df9d70a6b9876ce544c98561f4be4f725442e6d2b737d9c91a8321724ce0963f',
                '55eb2dafd84d6ccd5f862b785dc39d4ab157222720ef9da217b8c45cf2ba2417', 
            ],
            [
                '5edd5cc23c51e87a497ca815d5dce0f8ab52554f849ed8995de64c5f34ce7143',
                'efae9c8dbc14130661e8cec030c89ad0c13c66c0d17a2905cdc706ab7399a868', 
            ],
            [
                '290798c2b6476830da12fe02287e9e777aa3fba1c355b17a722d362f84614fba',
                'e38da76dcd440621988d00bcf79af25d5b29c094db2a23146d003afd41943e7a', 
            ],
            [
                'af3c423a95d9f5b3054754efa150ac39cd29552fe360257362dfdecef4053b45',
                'f98a3fd831eb2b749a93b0e6f35cfb40c8cd5aa667a15581bc2feded498fd9c6', 
            ],
            [
                '766dbb24d134e745cccaa28c99bf274906bb66b26dcf98df8d2fed50d884249a',
                '744b1152eacbe5e38dcc887980da38b897584a65fa06cedd2c924f97cbac5996', 
            ],
            [
                '59dbf46f8c94759ba21277c33784f41645f7b44f6c596a58ce92e666191abe3e',
                'c534ad44175fbc300f4ea6ce648309a042ce739a7919798cd85e216c4a307f6e', 
            ],
            [
                'f13ada95103c4537305e691e74e9a4a8dd647e711a95e73cb62dc6018cfd87b8',
                'e13817b44ee14de663bf4bc808341f326949e21a6a75c2570778419bdaf5733d', 
            ],
            [
                '7754b4fa0e8aced06d4167a2c59cca4cda1869c06ebadfb6488550015a88522c',
                '30e93e864e669d82224b967c3020b8fa8d1e4e350b6cbcc537a48b57841163a2', 
            ],
            [
                '948dcadf5990e048aa3874d46abef9d701858f95de8041d2a6828c99e2262519',
                'e491a42537f6e597d5d28a3224b1bc25df9154efbd2ef1d2cbba2cae5347d57e', 
            ],
            [
                '7962414450c76c1689c7b48f8202ec37fb224cf5ac0bfa1570328a8a3d7c77ab',
                '100b610ec4ffb4760d5c1fc133ef6f6b12507a051f04ac5760afa5b29db83437', 
            ],
            [
                '3514087834964b54b15b160644d915485a16977225b8847bb0dd085137ec47ca',
                'ef0afbb2056205448e1652c48e8127fc6039e77c15c2378b7e7d15a0de293311', 
            ],
            [
                'd3cc30ad6b483e4bc79ce2c9dd8bc54993e947eb8df787b442943d3f7b527eaf',
                '8b378a22d827278d89c5e9be8f9508ae3c2ad46290358630afb34db04eede0a4', 
            ],
            [
                '1624d84780732860ce1c78fcbfefe08b2b29823db913f6493975ba0ff4847610',
                '68651cf9b6da903e0914448c6cd9d4ca896878f5282be4c8cc06e2a404078575', 
            ],
            [
                '733ce80da955a8a26902c95633e62a985192474b5af207da6df7b4fd5fc61cd4',
                'f5435a2bd2badf7d485a4d8b8db9fcce3e1ef8e0201e4578c54673bc1dc5ea1d', 
            ],
            [
                '15d9441254945064cf1a1c33bbd3b49f8966c5092171e699ef258dfab81c045c',
                'd56eb30b69463e7234f5137b73b84177434800bacebfc685fc37bbe9efe4070d', 
            ],
            [
                'a1d0fcf2ec9de675b612136e5ce70d271c21417c9d2b8aaaac138599d0717940',
                'edd77f50bcb5a3cab2e90737309667f2641462a54070f3d519212d39c197a629', 
            ],
            [
                'e22fbe15c0af8ccc5780c0735f84dbe9a790badee8245c06c7ca37331cb36980',
                'a855babad5cd60c88b430a69f53a1a7a38289154964799be43d06d77d31da06', 
            ],
            [
                '311091dd9860e8e20ee13473c1155f5f69635e394704eaa74009452246cfa9b3',
                '66db656f87d1f04fffd1f04788c06830871ec5a64feee685bd80f0b1286d8374', 
            ],
            [
                '34c1fd04d301be89b31c0442d3e6ac24883928b45a9340781867d4232ec2dbdf',
                '9414685e97b1b5954bd46f730174136d57f1ceeb487443dc5321857ba73abee', 
            ],
            [
                'f219ea5d6b54701c1c14de5b557eb42a8d13f3abbcd08affcc2a5e6b049b8d63',
                '4cb95957e83d40b0f73af4544cccf6b1f4b08d3c07b27fb8d8c2962a400766d1', 
            ],
            [
                'd7b8740f74a8fbaab1f683db8f45de26543a5490bca627087236912469a0b448',
                'fa77968128d9c92ee1010f337ad4717eff15db5ed3c049b3411e0315eaa4593b', 
            ],
            [
                '32d31c222f8f6f0ef86f7c98d3a3335ead5bcd32abdd94289fe4d3091aa824bf',
                '5f3032f5892156e39ccd3d7915b9e1da2e6dac9e6f26e961118d14b8462e1661', 
            ],
            [
                '7461f371914ab32671045a155d9831ea8793d77cd59592c4340f86cbc18347b5',
                '8ec0ba238b96bec0cbdddcae0aa442542eee1ff50c986ea6b39847b3cc092ff6', 
            ],
            [
                'ee079adb1df1860074356a25aa38206a6d716b2c3e67453d287698bad7b2b2d6',
                '8dc2412aafe3be5c4c5f37e0ecc5f9f6a446989af04c4e25ebaac479ec1c8c1e', 
            ],
            [
                '16ec93e447ec83f0467b18302ee620f7e65de331874c9dc72bfd8616ba9da6b5',
                '5e4631150e62fb40d0e8c2a7ca5804a39d58186a50e497139626778e25b0674d', 
            ],
            [
                'eaa5f980c245f6f038978290afa70b6bd8855897f98b6aa485b96065d537bd99',
                'f65f5d3e292c2e0819a528391c994624d784869d7e6ea67fb18041024edc07dc', 
            ],
            [
                '78c9407544ac132692ee1910a02439958ae04877151342ea96c4b6b35a49f51',
                'f3e0319169eb9b85d5404795539a5e68fa1fbd583c064d2462b675f194a3ddb4', 
            ],
            [
                '494f4be219a1a77016dcd838431aea0001cdc8ae7a6fc688726578d9702857a5',
                '42242a969283a5f339ba7f075e36ba2af925ce30d767ed6e55f4b031880d562c', 
            ],
            [
                'a598a8030da6d86c6bc7f2f5144ea549d28211ea58faa70ebf4c1e665c1fe9b5',
                '204b5d6f84822c307e4b4a7140737aec23fc63b65b35f86a10026dbd2d864e6b', 
            ],
            [
                'c41916365abb2b5d09192f5f2dbeafec208f020f12570a184dbadc3e58595997',
                '4f14351d0087efa49d245b328984989d5caf9450f34bfc0ed16e96b58fa9913', 
            ],
            [
                '841d6063a586fa475a724604da03bc5b92a2e0d2e0a36acfe4c73a5514742881',
                '73867f59c0659e81904f9a1c7543698e62562d6744c169ce7a36de01a8d6154', 
            ],
            [
                '5e95bb399a6971d376026947f89bde2f282b33810928be4ded112ac4d70e20d5',
                '39f23f366809085beebfc71181313775a99c9aed7d8ba38b161384c746012865', 
            ],
            [
                '36e4641a53948fd476c39f8a99fd974e5ec07564b5315d8bf99471bca0ef2f66',
                'd2424b1b1abe4eb8164227b085c9aa9456ea13493fd563e06fd51cf5694c78fc', 
            ],
            [
                '336581ea7bfbbb290c191a2f507a41cf5643842170e914faeab27c2c579f726',
                'ead12168595fe1be99252129b6e56b3391f7ab1410cd1e0ef3dcdcabd2fda224', 
            ],
            [
                '8ab89816dadfd6b6a1f2634fcf00ec8403781025ed6890c4849742706bd43ede',
                '6fdcef09f2f6d0a044e654aef624136f503d459c3e89845858a47a9129cdd24e', 
            ],
            [
                '1e33f1a746c9c5778133344d9299fcaa20b0938e8acff2544bb40284b8c5fb94',
                '60660257dd11b3aa9c8ed618d24edff2306d320f1d03010e33a7d2057f3b3b6', 
            ],
            [
                '85b7c1dcb3cec1b7ee7f30ded79dd20a0ed1f4cc18cbcfcfa410361fd8f08f31',
                '3d98a9cdd026dd43f39048f25a8847f4fcafad1895d7a633c6fed3c35e999511', 
            ],
            [
                '29df9fbd8d9e46509275f4b125d6d45d7fbe9a3b878a7af872a2800661ac5f51',
                'b4c4fe99c775a606e2d8862179139ffda61dc861c019e55cd2876eb2a27d84b', 
            ],
            [
                'a0b1cae06b0a847a3fea6e671aaf8adfdfe58ca2f768105c8082b2e449fce252',
                'ae434102edde0958ec4b19d917a6a28e6b72da1834aff0e650f049503a296cf2', 
            ],
            [
                '4e8ceafb9b3e9a136dc7ff67e840295b499dfb3b2133e4ba113f2e4c0e121e5',
                'cf2174118c8b6d7a4b48f6d534ce5c79422c086a63460502b827ce62a326683c', 
            ],
            [
                'd24a44e047e19b6f5afb81c7ca2f69080a5076689a010919f42725c2b789a33b',
                '6fb8d5591b466f8fc63db50f1c0f1c69013f996887b8244d2cdec417afea8fa3', 
            ],
            [
                'ea01606a7a6c9cdd249fdfcfacb99584001edd28abbab77b5104e98e8e3b35d4',
                '322af4908c7312b0cfbfe369f7a7b3cdb7d4494bc2823700cfd652188a3ea98d', 
            ],
            [
                'af8addbf2b661c8a6c6328655eb96651252007d8c5ea31be4ad196de8ce2131f',
                '6749e67c029b85f52a034eafd096836b2520818680e26ac8f3dfbcdb71749700', 
            ],
            [
                'e3ae1974566ca06cc516d47e0fb165a674a3dabcfca15e722f0e3450f45889',
                '2aeabe7e4531510116217f07bf4d07300de97e4874f81f533420a72eeb0bd6a4', 
            ],
            [
                '591ee355313d99721cf6993ffed1e3e301993ff3ed258802075ea8ced397e246',
                'b0ea558a113c30bea60fc4775460c7901ff0b053d25ca2bdeee98f1a4be5d196', 
            ],
            [
                '11396d55fda54c49f19aa97318d8da61fa8584e47b084945077cf03255b52984',
                '998c74a8cd45ac01289d5833a7beb4744ff536b01b257be4c5767bea93ea57a4', 
            ],
            [
                '3c5d2a1ba39c5a1790000738c9e0c40b8dcdfd5468754b6405540157e017aa7a',
                'b2284279995a34e2f9d4de7396fc18b80f9b8b9fdd270f6661f79ca4c81bd257', 
            ],
            [
                'cc8704b8a60a0defa3a99a7299f2e9c3fbc395afb04ac078425ef8a1793cc030',
                'bdd46039feed17881d1e0862db347f8cf395b74fc4bcdc4e940b74e3ac1f1b13', 
            ],
            [
                'c533e4f7ea8555aacd9777ac5cad29b97dd4defccc53ee7ea204119b2889b197',
                '6f0a256bc5efdf429a2fb6242f1a43a2d9b925bb4a4b3a26bb8e0f45eb596096', 
            ],
            [
                'c14f8f2ccb27d6f109f6d08d03cc96a69ba8c34eec07bbcf566d48e33da6593',
                'c359d6923bb398f7fd4473e16fe1c28475b740dd098075e6c0e8649113dc3a38', 
            ],
            [
                'a6cbc3046bc6a450bac24789fa17115a4c9739ed75f8f21ce441f72e0b90e6ef',
                '21ae7f4680e889bb130619e2c0f95a360ceb573c70603139862afd617fa9b9f', 
            ],
            [
                '347d6d9a02c48927ebfb86c1359b1caf130a3c0267d11ce6344b39f99d43cc38',
                '60ea7f61a353524d1c987f6ecec92f086d565ab687870cb12689ff1e31c74448', 
            ],
            [
                'da6545d2181db8d983f7dcb375ef5866d47c67b1bf31c8cf855ef7437b72656a',
                '49b96715ab6878a79e78f07ce5680c5d6673051b4935bd897fea824b77dc208a', 
            ],
            [
                'c40747cc9d012cb1a13b8148309c6de7ec25d6945d657146b9d5994b8feb1111',
                '5ca560753be2a12fc6de6caf2cb489565db936156b9514e1bb5e83037e0fa2d4', 
            ],
            [
                '4e42c8ec82c99798ccf3a610be870e78338c7f713348bd34c8203ef4037f3502',
                '7571d74ee5e0fb92a7a8b33a07783341a5492144cc54bcc40a94473693606437', 
            ],
            [
                '3775ab7089bc6af823aba2e1af70b236d251cadb0c86743287522a1b3b0dedea',
                'be52d107bcfa09d8bcb9736a828cfa7fac8db17bf7a76a2c42ad961409018cf7', 
            ],
            [
                'cee31cbf7e34ec379d94fb814d3d775ad954595d1314ba8846959e3e82f74e26',
                '8fd64a14c06b589c26b947ae2bcf6bfa0149ef0be14ed4d80f448a01c43b1c6d', 
            ],
            [
                'b4f9eaea09b6917619f6ea6a4eb5464efddb58fd45b1ebefcdc1a01d08b47986',
                '39e5c9925b5a54b07433a4f18c61726f8bb131c012ca542eb24a8ac07200682a', 
            ],
            [
                'd4263dfc3d2df923a0179a48966d30ce84e2515afc3dccc1b77907792ebcc60e',
                '62dfaf07a0f78feb30e30d6295853ce189e127760ad6cf7fae164e122a208d54', 
            ],
            [
                '48457524820fa65a4f8d35eb6930857c0032acc0a4a2de422233eeda897612c4',
                '25a748ab367979d98733c38a1fa1c2e7dc6cc07db2d60a9ae7a76aaa49bd0f77', 
            ],
            [
                'dfeeef1881101f2cb11644f3a2afdfc2045e19919152923f367a1767c11cceda',
                'ecfb7056cf1de042f9420bab396793c0c390bde74b4bbdff16a83ae09a9a7517', 
            ],
            [
                '6d7ef6b17543f8373c573f44e1f389835d89bcbc6062ced36c82df83b8fae859',
                'cd450ec335438986dfefa10c57fea9bcc521a0959b2d80bbf74b190dca712d10', 
            ],
            [
                'e75605d59102a5a2684500d3b991f2e3f3c88b93225547035af25af66e04541f',
                'f5c54754a8f71ee540b9b48728473e314f729ac5308b06938360990e2bfad125', 
            ],
            [
                'eb98660f4c4dfaa06a2be453d5020bc99a0c2e60abe388457dd43fefb1ed620c',
                '6cb9a8876d9cb8520609af3add26cd20a0a7cd8a9411131ce85f44100099223e', 
            ],
            [
                '13e87b027d8514d35939f2e6892b19922154596941888336dc3563e3b8dba942',
                'fef5a3c68059a6dec5d624114bf1e91aac2b9da568d6abeb2570d55646b8adf1', 
            ],
            [
                'ee163026e9fd6fe017c38f06a5be6fc125424b371ce2708e7bf4491691e5764a',
                '1acb250f255dd61c43d94ccc670d0f58f49ae3fa15b96623e5430da0ad6c62b2', 
            ],
            [
                'b268f5ef9ad51e4d78de3a750c2dc89b1e626d43505867999932e5db33af3d80',
                '5f310d4b3c99b9ebb19f77d41c1dee018cf0d34fd4191614003e945a1216e423', 
            ],
            [
                'ff07f3118a9df035e9fad85eb6c7bfe42b02f01ca99ceea3bf7ffdba93c4750d',
                '438136d603e858a3a5c440c38eccbaddc1d2942114e2eddd4740d098ced1f0d8', 
            ],
            [
                '8d8b9855c7c052a34146fd20ffb658bea4b9f69e0d825ebec16e8c3ce2b526a1',
                'cdb559eedc2d79f926baf44fb84ea4d44bcf50fee51d7ceb30e2e7f463036758', 
            ],
            [
                '52db0b5384dfbf05bfa9d472d7ae26dfe4b851ceca91b1eba54263180da32b63',
                'c3b997d050ee5d423ebaf66a6db9f57b3180c902875679de924b69d84a7b375', 
            ],
            [
                'e62f9490d3d51da6395efd24e80919cc7d0f29c3f3fa48c6fff543becbd43352',
                '6d89ad7ba4876b0b22c2ca280c682862f342c8591f1daf5170e07bfd9ccafa7d', 
            ],
            [
                '7f30ea2476b399b4957509c88f77d0191afa2ff5cb7b14fd6d8e7d65aaab1193',
                'ca5ef7d4b231c94c3b15389a5f6311e9daff7bb67b103e9880ef4bff637acaec', 
            ],
            [
                '5098ff1e1d9f14fb46a210fada6c903fef0fb7b4a1dd1d9ac60a0361800b7a00',
                '9731141d81fc8f8084d37c6e7542006b3ee1b40d60dfe5362a5b132fd17ddc0', 
            ],
            [
                '32b78c7de9ee512a72895be6b9cbefa6e2f3c4ccce445c96b9f2c81e2778ad58',
                'ee1849f513df71e32efc3896ee28260c73bb80547ae2275ba497237794c8753c', 
            ],
            [
                'e2cb74fddc8e9fbcd076eef2a7c72b0ce37d50f08269dfc074b581550547a4f7',
                'd3aa2ed71c9dd2247a62df062736eb0baddea9e36122d2be8641abcb005cc4a4', 
            ],
            [
                '8438447566d4d7bedadc299496ab357426009a35f235cb141be0d99cd10ae3a8',
                'c4e1020916980a4da5d01ac5e6ad330734ef0d7906631c4f2390426b2edd791f', 
            ],
            [
                '4162d488b89402039b584c6fc6c308870587d9c46f660b878ab65c82c711d67e',
                '67163e903236289f776f22c25fb8a3afc1732f2b84b4e95dbda47ae5a0852649', 
            ],
            [
                '3fad3fa84caf0f34f0f89bfd2dcf54fc175d767aec3e50684f3ba4a4bf5f683d',
                'cd1bc7cb6cc407bb2f0ca647c718a730cf71872e7d0d2a53fa20efcdfe61826', 
            ],
            [
                '674f2600a3007a00568c1a7ce05d0816c1fb84bf1370798f1c69532faeb1a86b',
                '299d21f9413f33b3edf43b257004580b70db57da0b182259e09eecc69e0d38a5', 
            ],
            [
                'd32f4da54ade74abb81b815ad1fb3b263d82d6c692714bcff87d29bd5ee9f08f',
                'f9429e738b8e53b968e99016c059707782e14f4535359d582fc416910b3eea87', 
            ],
            [
                '30e4e670435385556e593657135845d36fbb6931f72b08cb1ed954f1e3ce3ff6',
                '462f9bce619898638499350113bbc9b10a878d35da70740dc695a559eb88db7b', 
            ],
            [
                'be2062003c51cc3004682904330e4dee7f3dcd10b01e580bf1971b04d4cad297',
                '62188bc49d61e5428573d48a74e1c655b1c61090905682a0d5558ed72dccb9bc', 
            ],
            [
                '93144423ace3451ed29e0fb9ac2af211cb6e84a601df5993c419859fff5df04a',
                '7c10dfb164c3425f5c71a3f9d7992038f1065224f72bb9d1d902a6d13037b47c', 
            ],
            [
                'b015f8044f5fcbdcf21ca26d6c34fb8197829205c7b7d2a7cb66418c157b112c',
                'ab8c1e086d04e813744a655b2df8d5f83b3cdc6faa3088c1d3aea1454e3a1d5f', 
            ],
            [
                'd5e9e1da649d97d89e4868117a465a3a4f8a18de57a140d36b3f2af341a21b52',
                '4cb04437f391ed73111a13cc1d4dd0db1693465c2240480d8955e8592f27447a', 
            ],
            [
                'd3ae41047dd7ca065dbf8ed77b992439983005cd72e16d6f996a5316d36966bb',
                'bd1aeb21ad22ebb22a10f0303417c6d964f8cdd7df0aca614b10dc14d125ac46', 
            ],
            [
                '463e2763d885f958fc66cdd22800f0a487197d0a82e377b49f80af87c897b065',
                'bfefacdb0e5d0fd7df3a311a94de062b26b80c61fbc97508b79992671ef7ca7f', 
            ],
            [
                '7985fdfd127c0567c6f53ec1bb63ec3158e597c40bfe747c83cddfc910641917',
                '603c12daf3d9862ef2b25fe1de289aed24ed291e0ec6708703a5bd567f32ed03', 
            ],
            [
                '74a1ad6b5f76e39db2dd249410eac7f99e74c59cb83d2d0ed5ff1543da7703e9',
                'cc6157ef18c9c63cd6193d83631bbea0093e0968942e8c33d5737fd790e0db08', 
            ],
            [
                '30682a50703375f602d416664ba19b7fc9bab42c72747463a71d0896b22f6da3',
                '553e04f6b018b4fa6c8f39e7f311d3176290d0e0f19ca73f17714d9977a22ff8', 
            ],
            [
                '9e2158f0d7c0d5f26c3791efefa79597654e7a2b2464f52b1ee6c1347769ef57',
                '712fcdd1b9053f09003a3481fa7762e9ffd7c8ef35a38509e2fbf2629008373', 
            ],
            [
                '176e26989a43c9cfeba4029c202538c28172e566e3c4fce7322857f3be327d66',
                'ed8cc9d04b29eb877d270b4878dc43c19aefd31f4eee09ee7b47834c1fa4b1c3', 
            ],
            [
                '75d46efea3771e6e68abb89a13ad747ecf1892393dfc4f1b7004788c50374da8',
                '9852390a99507679fd0b86fd2b39a868d7efc22151346e1a3ca4726586a6bed8', 
            ],
            [
                '809a20c67d64900ffb698c4c825f6d5f2310fb0451c869345b7319f645605721',
                '9e994980d9917e22b76b061927fa04143d096ccc54963e6a5ebfa5f3f8e286c1', 
            ],
            [
                '1b38903a43f7f114ed4500b4eac7083fdefece1cf29c63528d563446f972c180',
                '4036edc931a60ae889353f77fd53de4a2708b26b6f5da72ad3394119daf408f9', 
            ], 
        ]
    }
};

},{}],"70aIO":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var HmacDRBG = require('hmac-drbg');
var utils = require('../utils');
var curves = require('../curves');
var rand = require('brorand');
var assert = utils.assert;
var KeyPair = require('./key');
var Signature = require('./signature');
function EC(options) {
    if (!(this instanceof EC)) return new EC(options);
    // Shortcut `elliptic.ec(curve-name)`
    if (typeof options === 'string') {
        assert(Object.prototype.hasOwnProperty.call(curves, options), 'Unknown curve ' + options);
        options = curves[options];
    }
    // Shortcut for `elliptic.ec(elliptic.curves.curveName)`
    if (options instanceof curves.PresetCurve) options = {
        curve: options
    };
    this.curve = options.curve.curve;
    this.n = this.curve.n;
    this.nh = this.n.ushrn(1);
    this.g = this.curve.g;
    // Point on curve
    this.g = options.curve.g;
    this.g.precompute(options.curve.n.bitLength() + 1);
    // Hash for function for DRBG
    this.hash = options.hash || options.curve.hash;
}
module.exports = EC;
EC.prototype.keyPair = function keyPair(options) {
    return new KeyPair(this, options);
};
EC.prototype.keyFromPrivate = function keyFromPrivate(priv, enc) {
    return KeyPair.fromPrivate(this, priv, enc);
};
EC.prototype.keyFromPublic = function keyFromPublic(pub, enc) {
    return KeyPair.fromPublic(this, pub, enc);
};
EC.prototype.genKeyPair = function genKeyPair(options) {
    if (!options) options = {
    };
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8',
        entropy: options.entropy || rand(this.hash.hmacStrength),
        entropyEnc: options.entropy && options.entropyEnc || 'utf8',
        nonce: this.n.toArray()
    });
    var bytes = this.n.byteLength();
    var ns2 = this.n.sub(new BN(2));
    for(;;){
        var priv = new BN(drbg.generate(bytes));
        if (priv.cmp(ns2) > 0) continue;
        priv.iaddn(1);
        return this.keyFromPrivate(priv);
    }
};
EC.prototype._truncateToN = function _truncateToN(msg, truncOnly) {
    var delta = msg.byteLength() * 8 - this.n.bitLength();
    if (delta > 0) msg = msg.ushrn(delta);
    if (!truncOnly && msg.cmp(this.n) >= 0) return msg.sub(this.n);
    else return msg;
};
EC.prototype.sign = function sign(msg, key, enc, options) {
    if (typeof enc === 'object') {
        options = enc;
        enc = null;
    }
    if (!options) options = {
    };
    key = this.keyFromPrivate(key, enc);
    msg = this._truncateToN(new BN(msg, 16));
    // Zero-extend key to provide enough entropy
    var bytes = this.n.byteLength();
    var bkey = key.getPrivate().toArray('be', bytes);
    // Zero-extend nonce to have the same byte size as N
    var nonce = msg.toArray('be', bytes);
    // Instantiate Hmac_DRBG
    var drbg = new HmacDRBG({
        hash: this.hash,
        entropy: bkey,
        nonce: nonce,
        pers: options.pers,
        persEnc: options.persEnc || 'utf8'
    });
    // Number of bytes to generate
    var ns1 = this.n.sub(new BN(1));
    for(var iter = 0;; iter++){
        var k = options.k ? options.k(iter) : new BN(drbg.generate(this.n.byteLength()));
        k = this._truncateToN(k, true);
        if (k.cmpn(1) <= 0 || k.cmp(ns1) >= 0) continue;
        var kp = this.g.mul(k);
        if (kp.isInfinity()) continue;
        var kpX = kp.getX();
        var r = kpX.umod(this.n);
        if (r.cmpn(0) === 0) continue;
        var s = k.invm(this.n).mul(r.mul(key.getPrivate()).iadd(msg));
        s = s.umod(this.n);
        if (s.cmpn(0) === 0) continue;
        var recoveryParam = (kp.getY().isOdd() ? 1 : 0) | (kpX.cmp(r) !== 0 ? 2 : 0);
        // Use complement of `s`, if it is > `n / 2`
        if (options.canonical && s.cmp(this.nh) > 0) {
            s = this.n.sub(s);
            recoveryParam ^= 1;
        }
        return new Signature({
            r: r,
            s: s,
            recoveryParam: recoveryParam
        });
    }
};
EC.prototype.verify = function verify(msg, signature, key, enc) {
    msg = this._truncateToN(new BN(msg, 16));
    key = this.keyFromPublic(key, enc);
    signature = new Signature(signature, 'hex');
    // Perform primitive values validation
    var r = signature.r;
    var s = signature.s;
    if (r.cmpn(1) < 0 || r.cmp(this.n) >= 0) return false;
    if (s.cmpn(1) < 0 || s.cmp(this.n) >= 0) return false;
    // Validate signature
    var sinv = s.invm(this.n);
    var u1 = sinv.mul(msg).umod(this.n);
    var u2 = sinv.mul(r).umod(this.n);
    var p;
    if (!this.curve._maxwellTrick) {
        p = this.g.mulAdd(u1, key.getPublic(), u2);
        if (p.isInfinity()) return false;
        return p.getX().umod(this.n).cmp(r) === 0;
    }
    // NOTE: Greg Maxwell's trick, inspired by:
    // https://git.io/vad3K
    p = this.g.jmulAdd(u1, key.getPublic(), u2);
    if (p.isInfinity()) return false;
    // Compare `p.x` of Jacobian point with `r`,
    // this will do `p.x == r * p.z^2` instead of multiplying `p.x` by the
    // inverse of `p.z^2`
    return p.eqXToP(r);
};
EC.prototype.recoverPubKey = function(msg, signature, j, enc) {
    assert((3 & j) === j, 'The recovery param is more than two bits');
    signature = new Signature(signature, enc);
    var n = this.n;
    var e = new BN(msg);
    var r = signature.r;
    var s = signature.s;
    // A set LSB signifies that the y-coordinate is odd
    var isYOdd = j & 1;
    var isSecondKey = j >> 1;
    if (r.cmp(this.curve.p.umod(this.curve.n)) >= 0 && isSecondKey) throw new Error('Unable to find sencond key candinate');
    // 1.1. Let x = r + jn.
    if (isSecondKey) r = this.curve.pointFromX(r.add(this.curve.n), isYOdd);
    else r = this.curve.pointFromX(r, isYOdd);
    var rInv = signature.r.invm(n);
    var s1 = n.sub(e).mul(rInv).umod(n);
    var s2 = s.mul(rInv).umod(n);
    // 1.6.1 Compute Q = r^-1 (sR -  eG)
    //               Q = r^-1 (sR + -eG)
    return this.g.mulAdd(s1, r, s2);
};
EC.prototype.getKeyRecoveryParam = function(e, signature, Q, enc) {
    signature = new Signature(signature, enc);
    if (signature.recoveryParam !== null) return signature.recoveryParam;
    for(var i = 0; i < 4; i++){
        var Qprime;
        try {
            Qprime = this.recoverPubKey(e, signature, i);
        } catch (e1) {
            continue;
        }
        if (Qprime.eq(Q)) return i;
    }
    throw new Error('Unable to find valid recovery factor');
};

},{"bn.js":"3VXSG","hmac-drbg":"aq68f","../utils":"9kwAm","../curves":"hP5SP","brorand":"68k2j","./key":"kFDIN","./signature":"l6M5F"}],"aq68f":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var utils = require('minimalistic-crypto-utils');
var assert = require('minimalistic-assert');
function HmacDRBG(options) {
    if (!(this instanceof HmacDRBG)) return new HmacDRBG(options);
    this.hash = options.hash;
    this.predResist = !!options.predResist;
    this.outLen = this.hash.outSize;
    this.minEntropy = options.minEntropy || this.hash.hmacStrength;
    this._reseed = null;
    this.reseedInterval = null;
    this.K = null;
    this.V = null;
    var entropy = utils.toArray(options.entropy, options.entropyEnc || 'hex');
    var nonce = utils.toArray(options.nonce, options.nonceEnc || 'hex');
    var pers = utils.toArray(options.pers, options.persEnc || 'hex');
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._init(entropy, nonce, pers);
}
module.exports = HmacDRBG;
HmacDRBG.prototype._init = function init(entropy, nonce, pers) {
    var seed = entropy.concat(nonce).concat(pers);
    this.K = new Array(this.outLen / 8);
    this.V = new Array(this.outLen / 8);
    for(var i = 0; i < this.V.length; i++){
        this.K[i] = 0;
        this.V[i] = 1;
    }
    this._update(seed);
    this._reseed = 1;
    this.reseedInterval = 281474976710656; // 2^48
};
HmacDRBG.prototype._hmac = function hmac() {
    return new hash.hmac(this.hash, this.K);
};
HmacDRBG.prototype._update = function update(seed) {
    var kmac = this._hmac().update(this.V).update([
        0
    ]);
    if (seed) kmac = kmac.update(seed);
    this.K = kmac.digest();
    this.V = this._hmac().update(this.V).digest();
    if (!seed) return;
    this.K = this._hmac().update(this.V).update([
        1
    ]).update(seed).digest();
    this.V = this._hmac().update(this.V).digest();
};
HmacDRBG.prototype.reseed = function reseed(entropy, entropyEnc, add, addEnc) {
    // Optional entropy enc
    if (typeof entropyEnc !== 'string') {
        addEnc = add;
        add = entropyEnc;
        entropyEnc = null;
    }
    entropy = utils.toArray(entropy, entropyEnc);
    add = utils.toArray(add, addEnc);
    assert(entropy.length >= this.minEntropy / 8, 'Not enough entropy. Minimum is: ' + this.minEntropy + ' bits');
    this._update(entropy.concat(add || []));
    this._reseed = 1;
};
HmacDRBG.prototype.generate = function generate(len, enc, add, addEnc) {
    if (this._reseed > this.reseedInterval) throw new Error('Reseed is required');
    // Optional encoding
    if (typeof enc !== 'string') {
        addEnc = add;
        add = enc;
        enc = null;
    }
    // Optional additional data
    if (add) {
        add = utils.toArray(add, addEnc || 'hex');
        this._update(add);
    }
    var temp = [];
    while(temp.length < len){
        this.V = this._hmac().update(this.V).digest();
        temp = temp.concat(this.V);
    }
    var res = temp.slice(0, len);
    this._update(add);
    this._reseed++;
    return utils.encode(res, enc);
};

},{"hash.js":"9Etc2","minimalistic-crypto-utils":"4Kfdk","minimalistic-assert":"af22k"}],"kFDIN":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function KeyPair(ec, options) {
    this.ec = ec;
    this.priv = null;
    this.pub = null;
    // KeyPair(ec, { priv: ..., pub: ... })
    if (options.priv) this._importPrivate(options.priv, options.privEnc);
    if (options.pub) this._importPublic(options.pub, options.pubEnc);
}
module.exports = KeyPair;
KeyPair.fromPublic = function fromPublic(ec, pub, enc) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(ec, {
        pub: pub,
        pubEnc: enc
    });
};
KeyPair.fromPrivate = function fromPrivate(ec, priv, enc) {
    if (priv instanceof KeyPair) return priv;
    return new KeyPair(ec, {
        priv: priv,
        privEnc: enc
    });
};
KeyPair.prototype.validate = function validate() {
    var pub = this.getPublic();
    if (pub.isInfinity()) return {
        result: false,
        reason: 'Invalid public key'
    };
    if (!pub.validate()) return {
        result: false,
        reason: 'Public key is not a point'
    };
    if (!pub.mul(this.ec.curve.n).isInfinity()) return {
        result: false,
        reason: 'Public key * N != O'
    };
    return {
        result: true,
        reason: null
    };
};
KeyPair.prototype.getPublic = function getPublic(compact, enc) {
    // compact is optional argument
    if (typeof compact === 'string') {
        enc = compact;
        compact = null;
    }
    if (!this.pub) this.pub = this.ec.g.mul(this.priv);
    if (!enc) return this.pub;
    return this.pub.encode(enc, compact);
};
KeyPair.prototype.getPrivate = function getPrivate(enc) {
    if (enc === 'hex') return this.priv.toString(16, 2);
    else return this.priv;
};
KeyPair.prototype._importPrivate = function _importPrivate(key, enc) {
    this.priv = new BN(key, enc || 16);
    // Ensure that the priv won't be bigger than n, otherwise we may fail
    // in fixed multiplication method
    this.priv = this.priv.umod(this.ec.curve.n);
};
KeyPair.prototype._importPublic = function _importPublic(key, enc) {
    if (key.x || key.y) {
        // Montgomery points only have an `x` coordinate.
        // Weierstrass/Edwards points on the other hand have both `x` and
        // `y` coordinates.
        if (this.ec.curve.type === 'mont') assert(key.x, 'Need x coordinate');
        else if (this.ec.curve.type === 'short' || this.ec.curve.type === 'edwards') assert(key.x && key.y, 'Need both x and y coordinate');
        this.pub = this.ec.curve.point(key.x, key.y);
        return;
    }
    this.pub = this.ec.curve.decodePoint(key, enc);
};
// ECDH
KeyPair.prototype.derive = function derive(pub) {
    if (!pub.validate()) assert(pub.validate(), 'public point not validated');
    return pub.mul(this.priv).getX();
};
// ECDSA
KeyPair.prototype.sign = function sign(msg, enc, options) {
    return this.ec.sign(msg, this, enc, options);
};
KeyPair.prototype.verify = function verify(msg, signature) {
    return this.ec.verify(msg, signature, this);
};
KeyPair.prototype.inspect = function inspect() {
    return '<Key priv: ' + (this.priv && this.priv.toString(16, 2)) + ' pub: ' + (this.pub && this.pub.inspect()) + ' >';
};

},{"bn.js":"3VXSG","../utils":"9kwAm"}],"l6M5F":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
function Signature(options, enc) {
    if (options instanceof Signature) return options;
    if (this._importDER(options, enc)) return;
    assert(options.r && options.s, 'Signature without r or s');
    this.r = new BN(options.r, 16);
    this.s = new BN(options.s, 16);
    if (options.recoveryParam === undefined) this.recoveryParam = null;
    else this.recoveryParam = options.recoveryParam;
}
module.exports = Signature;
function Position() {
    this.place = 0;
}
function getLength(buf, p) {
    var initial = buf[p.place++];
    if (!(initial & 128)) return initial;
    var octetLen = initial & 15;
    // Indefinite length or overflow
    if (octetLen === 0 || octetLen > 4) return false;
    var val = 0;
    for(var i = 0, off = p.place; i < octetLen; i++, off++){
        val <<= 8;
        val |= buf[off];
        val >>>= 0;
    }
    // Leading zeroes
    if (val <= 127) return false;
    p.place = off;
    return val;
}
function rmPadding(buf) {
    var i = 0;
    var len = buf.length - 1;
    while(!buf[i] && !(buf[i + 1] & 128) && i < len)i++;
    if (i === 0) return buf;
    return buf.slice(i);
}
Signature.prototype._importDER = function _importDER(data, enc) {
    data = utils.toArray(data, enc);
    var p = new Position();
    if (data[p.place++] !== 48) return false;
    var len = getLength(data, p);
    if (len === false) return false;
    if (len + p.place !== data.length) return false;
    if (data[p.place++] !== 2) return false;
    var rlen = getLength(data, p);
    if (rlen === false) return false;
    var r = data.slice(p.place, rlen + p.place);
    p.place += rlen;
    if (data[p.place++] !== 2) return false;
    var slen = getLength(data, p);
    if (slen === false) return false;
    if (data.length !== slen + p.place) return false;
    var s = data.slice(p.place, slen + p.place);
    if (r[0] === 0) {
        if (r[1] & 128) r = r.slice(1);
        else // Leading zeroes
        return false;
    }
    if (s[0] === 0) {
        if (s[1] & 128) s = s.slice(1);
        else // Leading zeroes
        return false;
    }
    this.r = new BN(r);
    this.s = new BN(s);
    this.recoveryParam = null;
    return true;
};
function constructLength(arr, len) {
    if (len < 128) {
        arr.push(len);
        return;
    }
    var octets = 1 + (Math.log(len) / Math.LN2 >>> 3);
    arr.push(octets | 128);
    while(--octets)arr.push(len >>> (octets << 3) & 255);
    arr.push(len);
}
Signature.prototype.toDER = function toDER(enc) {
    var r = this.r.toArray();
    var s = this.s.toArray();
    // Pad values
    if (r[0] & 128) r = [
        0
    ].concat(r);
    // Pad values
    if (s[0] & 128) s = [
        0
    ].concat(s);
    r = rmPadding(r);
    s = rmPadding(s);
    while(!s[0] && !(s[1] & 128))s = s.slice(1);
    var arr = [
        2
    ];
    constructLength(arr, r.length);
    arr = arr.concat(r);
    arr.push(2);
    constructLength(arr, s.length);
    var backHalf = arr.concat(s);
    var res = [
        48
    ];
    constructLength(res, backHalf.length);
    res = res.concat(backHalf);
    return utils.encode(res, enc);
};

},{"bn.js":"3VXSG","../utils":"9kwAm"}],"1gWIk":[function(require,module,exports) {
'use strict';
var hash = require('hash.js');
var curves = require('../curves');
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var KeyPair = require('./key');
var Signature = require('./signature');
function EDDSA(curve) {
    assert(curve === 'ed25519', 'only tested with ed25519 so far');
    if (!(this instanceof EDDSA)) return new EDDSA(curve);
    curve = curves[curve].curve;
    this.curve = curve;
    this.g = curve.g;
    this.g.precompute(curve.n.bitLength() + 1);
    this.pointClass = curve.point().constructor;
    this.encodingLength = Math.ceil(curve.n.bitLength() / 8);
    this.hash = hash.sha512;
}
module.exports = EDDSA;
/**
* @param {Array|String} message - message bytes
* @param {Array|String|KeyPair} secret - secret bytes or a keypair
* @returns {Signature} - signature
*/ EDDSA.prototype.sign = function sign(message, secret) {
    message = parseBytes(message);
    var key = this.keyFromSecret(secret);
    var r = this.hashInt(key.messagePrefix(), message);
    var R = this.g.mul(r);
    var Rencoded = this.encodePoint(R);
    var s_ = this.hashInt(Rencoded, key.pubBytes(), message).mul(key.priv());
    var S = r.add(s_).umod(this.curve.n);
    return this.makeSignature({
        R: R,
        S: S,
        Rencoded: Rencoded
    });
};
/**
* @param {Array} message - message bytes
* @param {Array|String|Signature} sig - sig bytes
* @param {Array|String|Point|KeyPair} pub - public key
* @returns {Boolean} - true if public key matches sig of message
*/ EDDSA.prototype.verify = function verify(message, sig, pub) {
    message = parseBytes(message);
    sig = this.makeSignature(sig);
    var key = this.keyFromPublic(pub);
    var h = this.hashInt(sig.Rencoded(), key.pubBytes(), message);
    var SG = this.g.mul(sig.S());
    var RplusAh = sig.R().add(key.pub().mul(h));
    return RplusAh.eq(SG);
};
EDDSA.prototype.hashInt = function hashInt() {
    var hash1 = this.hash();
    for(var i = 0; i < arguments.length; i++)hash1.update(arguments[i]);
    return utils.intFromLE(hash1.digest()).umod(this.curve.n);
};
EDDSA.prototype.keyFromPublic = function keyFromPublic(pub) {
    return KeyPair.fromPublic(this, pub);
};
EDDSA.prototype.keyFromSecret = function keyFromSecret(secret) {
    return KeyPair.fromSecret(this, secret);
};
EDDSA.prototype.makeSignature = function makeSignature(sig) {
    if (sig instanceof Signature) return sig;
    return new Signature(this, sig);
};
/**
* * https://tools.ietf.org/html/draft-josefsson-eddsa-ed25519-03#section-5.2
*
* EDDSA defines methods for encoding and decoding points and integers. These are
* helper convenience methods, that pass along to utility functions implied
* parameters.
*
*/ EDDSA.prototype.encodePoint = function encodePoint(point) {
    var enc = point.getY().toArray('le', this.encodingLength);
    enc[this.encodingLength - 1] |= point.getX().isOdd() ? 128 : 0;
    return enc;
};
EDDSA.prototype.decodePoint = function decodePoint(bytes) {
    bytes = utils.parseBytes(bytes);
    var lastIx = bytes.length - 1;
    var normed = bytes.slice(0, lastIx).concat(bytes[lastIx] & -129);
    var xIsOdd = (bytes[lastIx] & 128) !== 0;
    var y = utils.intFromLE(normed);
    return this.curve.pointFromY(y, xIsOdd);
};
EDDSA.prototype.encodeInt = function encodeInt(num) {
    return num.toArray('le', this.encodingLength);
};
EDDSA.prototype.decodeInt = function decodeInt(bytes) {
    return utils.intFromLE(bytes);
};
EDDSA.prototype.isPoint = function isPoint(val) {
    return val instanceof this.pointClass;
};

},{"hash.js":"9Etc2","../curves":"hP5SP","../utils":"9kwAm","./key":"62sWy","./signature":"lASsp"}],"62sWy":[function(require,module,exports) {
'use strict';
var utils = require('../utils');
var assert = utils.assert;
var parseBytes = utils.parseBytes;
var cachedProperty = utils.cachedProperty;
/**
* @param {EDDSA} eddsa - instance
* @param {Object} params - public/private key parameters
*
* @param {Array<Byte>} [params.secret] - secret seed bytes
* @param {Point} [params.pub] - public key point (aka `A` in eddsa terms)
* @param {Array<Byte>} [params.pub] - public key point encoded as bytes
*
*/ function KeyPair(eddsa, params) {
    this.eddsa = eddsa;
    this._secret = parseBytes(params.secret);
    if (eddsa.isPoint(params.pub)) this._pub = params.pub;
    else this._pubBytes = parseBytes(params.pub);
}
KeyPair.fromPublic = function fromPublic(eddsa, pub) {
    if (pub instanceof KeyPair) return pub;
    return new KeyPair(eddsa, {
        pub: pub
    });
};
KeyPair.fromSecret = function fromSecret(eddsa, secret) {
    if (secret instanceof KeyPair) return secret;
    return new KeyPair(eddsa, {
        secret: secret
    });
};
KeyPair.prototype.secret = function secret() {
    return this._secret;
};
cachedProperty(KeyPair, 'pubBytes', function pubBytes() {
    return this.eddsa.encodePoint(this.pub());
});
cachedProperty(KeyPair, 'pub', function pub() {
    if (this._pubBytes) return this.eddsa.decodePoint(this._pubBytes);
    return this.eddsa.g.mul(this.priv());
});
cachedProperty(KeyPair, 'privBytes', function privBytes() {
    var eddsa = this.eddsa;
    var hash = this.hash();
    var lastIx = eddsa.encodingLength - 1;
    var a = hash.slice(0, eddsa.encodingLength);
    a[0] &= 248;
    a[lastIx] &= 127;
    a[lastIx] |= 64;
    return a;
});
cachedProperty(KeyPair, 'priv', function priv() {
    return this.eddsa.decodeInt(this.privBytes());
});
cachedProperty(KeyPair, 'hash', function hash() {
    return this.eddsa.hash().update(this.secret()).digest();
});
cachedProperty(KeyPair, 'messagePrefix', function messagePrefix() {
    return this.hash().slice(this.eddsa.encodingLength);
});
KeyPair.prototype.sign = function sign(message) {
    assert(this._secret, 'KeyPair can only verify');
    return this.eddsa.sign(message, this);
};
KeyPair.prototype.verify = function verify(message, sig) {
    return this.eddsa.verify(message, sig, this);
};
KeyPair.prototype.getSecret = function getSecret(enc) {
    assert(this._secret, 'KeyPair is public only');
    return utils.encode(this.secret(), enc);
};
KeyPair.prototype.getPublic = function getPublic(enc) {
    return utils.encode(this.pubBytes(), enc);
};
module.exports = KeyPair;

},{"../utils":"9kwAm"}],"lASsp":[function(require,module,exports) {
'use strict';
var BN = require('bn.js');
var utils = require('../utils');
var assert = utils.assert;
var cachedProperty = utils.cachedProperty;
var parseBytes = utils.parseBytes;
/**
* @param {EDDSA} eddsa - eddsa instance
* @param {Array<Bytes>|Object} sig -
* @param {Array<Bytes>|Point} [sig.R] - R point as Point or bytes
* @param {Array<Bytes>|bn} [sig.S] - S scalar as bn or bytes
* @param {Array<Bytes>} [sig.Rencoded] - R point encoded
* @param {Array<Bytes>} [sig.Sencoded] - S scalar encoded
*/ function Signature(eddsa, sig) {
    this.eddsa = eddsa;
    if (typeof sig !== 'object') sig = parseBytes(sig);
    if (Array.isArray(sig)) sig = {
        R: sig.slice(0, eddsa.encodingLength),
        S: sig.slice(eddsa.encodingLength)
    };
    assert(sig.R && sig.S, 'Signature without R or S');
    if (eddsa.isPoint(sig.R)) this._R = sig.R;
    if (sig.S instanceof BN) this._S = sig.S;
    this._Rencoded = Array.isArray(sig.R) ? sig.R : sig.Rencoded;
    this._Sencoded = Array.isArray(sig.S) ? sig.S : sig.Sencoded;
}
cachedProperty(Signature, 'S', function S() {
    return this.eddsa.decodeInt(this.Sencoded());
});
cachedProperty(Signature, 'R', function R() {
    return this.eddsa.decodePoint(this.Rencoded());
});
cachedProperty(Signature, 'Rencoded', function Rencoded() {
    return this.eddsa.encodePoint(this.R());
});
cachedProperty(Signature, 'Sencoded', function Sencoded() {
    return this.eddsa.encodeInt(this.S());
});
Signature.prototype.toBytes = function toBytes() {
    return this.Rencoded().concat(this.Sencoded());
};
Signature.prototype.toHex = function toHex() {
    return utils.encode(this.toBytes(), 'hex').toUpperCase();
};
module.exports = Signature;

},{"bn.js":"3VXSG","../utils":"9kwAm"}],"5l3JP":[function(require,module,exports) {
(function(module, exports) {
    // Utils
    function assert(val, msg) {
        if (!val) throw new Error(msg || 'Assertion failed');
    }
    // Could use `inherits` module, but don't want to move from single file
    // architecture yet.
    function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function() {
        };
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
    }
    // BN
    function BN(number, base, endian) {
        if (BN.isBN(number)) return number;
        this.negative = 0;
        this.words = null;
        this.length = 0;
        // Reduction context
        this.red = null;
        if (number !== null) {
            if (base === 'le' || base === 'be') {
                endian = base;
                base = 10;
            }
            this._init(number || 0, base || 10, endian || 'be');
        }
    }
    if (typeof module === 'object') module.exports = BN;
    else exports.BN = BN;
    BN.BN = BN;
    BN.wordSize = 26;
    var Buffer;
    try {
        if (typeof window !== 'undefined' && typeof window.Buffer !== 'undefined') Buffer = window.Buffer;
        else Buffer = require('buffer').Buffer;
    } catch (e) {
    }
    BN.isBN = function isBN(num) {
        if (num instanceof BN) return true;
        return num !== null && typeof num === 'object' && num.constructor.wordSize === BN.wordSize && Array.isArray(num.words);
    };
    BN.max = function max(left, right) {
        if (left.cmp(right) > 0) return left;
        return right;
    };
    BN.min = function min(left, right) {
        if (left.cmp(right) < 0) return left;
        return right;
    };
    BN.prototype._init = function init(number, base, endian) {
        if (typeof number === 'number') return this._initNumber(number, base, endian);
        if (typeof number === 'object') return this._initArray(number, base, endian);
        if (base === 'hex') base = 16;
        assert(base === (base | 0) && base >= 2 && base <= 36);
        number = number.toString().replace(/\s+/g, '');
        var start = 0;
        if (number[0] === '-') {
            start++;
            this.negative = 1;
        }
        if (start < number.length) {
            if (base === 16) this._parseHex(number, start, endian);
            else {
                this._parseBase(number, base, start);
                if (endian === 'le') this._initArray(this.toArray(), base, endian);
            }
        }
    };
    BN.prototype._initNumber = function _initNumber(number, base, endian) {
        if (number < 0) {
            this.negative = 1;
            number = -number;
        }
        if (number < 67108864) {
            this.words = [
                number & 67108863
            ];
            this.length = 1;
        } else if (number < 4503599627370496) {
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863
            ];
            this.length = 2;
        } else {
            assert(number < 9007199254740992); // 2 ^ 53 (unsafe)
            this.words = [
                number & 67108863,
                number / 67108864 & 67108863,
                1
            ];
            this.length = 3;
        }
        if (endian !== 'le') return;
        // Reverse the bytes
        this._initArray(this.toArray(), base, endian);
    };
    BN.prototype._initArray = function _initArray(number, base, endian) {
        // Perhaps a Uint8Array
        assert(typeof number.length === 'number');
        if (number.length <= 0) {
            this.words = [
                0
            ];
            this.length = 1;
            return this;
        }
        this.length = Math.ceil(number.length / 3);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        var j, w;
        var off = 0;
        if (endian === 'be') for(i = number.length - 1, j = 0; i >= 0; i -= 3){
            w = number[i] | number[i - 1] << 8 | number[i - 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        else if (endian === 'le') for(i = 0, j = 0; i < number.length; i += 3){
            w = number[i] | number[i + 1] << 8 | number[i + 2] << 16;
            this.words[j] |= w << off & 67108863;
            this.words[j + 1] = w >>> 26 - off & 67108863;
            off += 24;
            if (off >= 26) {
                off -= 26;
                j++;
            }
        }
        return this._strip();
    };
    function parseHex4Bits(string, index) {
        var c = string.charCodeAt(index);
        // '0' - '9'
        if (c >= 48 && c <= 57) return c - 48;
        else if (c >= 65 && c <= 70) return c - 55;
        else if (c >= 97 && c <= 102) return c - 87;
        else assert(false, 'Invalid character in ' + string);
    }
    function parseHexByte(string, lowerBound, index) {
        var r = parseHex4Bits(string, index);
        if (index - 1 >= lowerBound) r |= parseHex4Bits(string, index - 1) << 4;
        return r;
    }
    BN.prototype._parseHex = function _parseHex(number, start, endian) {
        // Create possibly bigger array to ensure that it fits the number
        this.length = Math.ceil((number.length - start) / 6);
        this.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)this.words[i] = 0;
        // 24-bits chunks
        var off = 0;
        var j = 0;
        var w;
        if (endian === 'be') for(i = number.length - 1; i >= start; i -= 2){
            w = parseHexByte(number, start, i) << off;
            this.words[j] |= w & 67108863;
            if (off >= 18) {
                off -= 18;
                j += 1;
                this.words[j] |= w >>> 26;
            } else off += 8;
        }
        else {
            var parseLength = number.length - start;
            for(i = parseLength % 2 === 0 ? start + 1 : start; i < number.length; i += 2){
                w = parseHexByte(number, start, i) << off;
                this.words[j] |= w & 67108863;
                if (off >= 18) {
                    off -= 18;
                    j += 1;
                    this.words[j] |= w >>> 26;
                } else off += 8;
            }
        }
        this._strip();
    };
    function parseBase(str, start, end, mul) {
        var r = 0;
        var b = 0;
        var len = Math.min(str.length, end);
        for(var i = start; i < len; i++){
            var c = str.charCodeAt(i) - 48;
            r *= mul;
            // 'a'
            if (c >= 49) b = c - 49 + 10;
            else if (c >= 17) b = c - 17 + 10;
            else b = c;
            assert(c >= 0 && b < mul, 'Invalid character');
            r += b;
        }
        return r;
    }
    BN.prototype._parseBase = function _parseBase(number, base, start) {
        // Initialize as zero
        this.words = [
            0
        ];
        this.length = 1;
        // Find length of limb in base
        for(var limbLen = 0, limbPow = 1; limbPow <= 67108863; limbPow *= base)limbLen++;
        limbLen--;
        limbPow = limbPow / base | 0;
        var total = number.length - start;
        var mod = total % limbLen;
        var end = Math.min(total, total - mod) + start;
        var word = 0;
        for(var i = start; i < end; i += limbLen){
            word = parseBase(number, i, i + limbLen, base);
            this.imuln(limbPow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        if (mod !== 0) {
            var pow = 1;
            word = parseBase(number, i, number.length, base);
            for(i = 0; i < mod; i++)pow *= base;
            this.imuln(pow);
            if (this.words[0] + word < 67108864) this.words[0] += word;
            else this._iaddn(word);
        }
        this._strip();
    };
    BN.prototype.copy = function copy(dest) {
        dest.words = new Array(this.length);
        for(var i = 0; i < this.length; i++)dest.words[i] = this.words[i];
        dest.length = this.length;
        dest.negative = this.negative;
        dest.red = this.red;
    };
    function move(dest, src) {
        dest.words = src.words;
        dest.length = src.length;
        dest.negative = src.negative;
        dest.red = src.red;
    }
    BN.prototype._move = function _move(dest) {
        move(dest, this);
    };
    BN.prototype.clone = function clone() {
        var r = new BN(null);
        this.copy(r);
        return r;
    };
    BN.prototype._expand = function _expand(size) {
        while(this.length < size)this.words[this.length++] = 0;
        return this;
    };
    // Remove leading `0` from `this`
    BN.prototype._strip = function strip() {
        while(this.length > 1 && this.words[this.length - 1] === 0)this.length--;
        return this._normSign();
    };
    BN.prototype._normSign = function _normSign() {
        // -0 = 0
        if (this.length === 1 && this.words[0] === 0) this.negative = 0;
        return this;
    };
    // Check Symbol.for because not everywhere where Symbol defined
    // See https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Symbol#Browser_compatibility
    if (typeof Symbol !== 'undefined' && typeof Symbol.for === 'function') try {
        BN.prototype[Symbol.for('nodejs.util.inspect.custom')] = inspect;
    } catch (e) {
        BN.prototype.inspect = inspect;
    }
    else BN.prototype.inspect = inspect;
    function inspect() {
        return (this.red ? '<BN-R: ' : '<BN: ') + this.toString(16) + '>';
    }
    /*

  var zeros = [];
  var groupSizes = [];
  var groupBases = [];

  var s = '';
  var i = -1;
  while (++i < BN.wordSize) {
    zeros[i] = s;
    s += '0';
  }
  groupSizes[0] = 0;
  groupSizes[1] = 0;
  groupBases[0] = 0;
  groupBases[1] = 0;
  var base = 2 - 1;
  while (++base < 36 + 1) {
    var groupSize = 0;
    var groupBase = 1;
    while (groupBase < (1 << BN.wordSize) / base) {
      groupBase *= base;
      groupSize += 1;
    }
    groupSizes[base] = groupSize;
    groupBases[base] = groupBase;
  }

  */ var zeros = [
        '',
        '0',
        '00',
        '000',
        '0000',
        '00000',
        '000000',
        '0000000',
        '00000000',
        '000000000',
        '0000000000',
        '00000000000',
        '000000000000',
        '0000000000000',
        '00000000000000',
        '000000000000000',
        '0000000000000000',
        '00000000000000000',
        '000000000000000000',
        '0000000000000000000',
        '00000000000000000000',
        '000000000000000000000',
        '0000000000000000000000',
        '00000000000000000000000',
        '000000000000000000000000',
        '0000000000000000000000000'
    ];
    var groupSizes = [
        0,
        0,
        25,
        16,
        12,
        11,
        10,
        9,
        8,
        8,
        7,
        7,
        7,
        7,
        6,
        6,
        6,
        6,
        6,
        6,
        6,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5,
        5
    ];
    var groupBases = [
        0,
        0,
        33554432,
        43046721,
        16777216,
        48828125,
        60466176,
        40353607,
        16777216,
        43046721,
        10000000,
        19487171,
        35831808,
        62748517,
        7529536,
        11390625,
        16777216,
        24137569,
        34012224,
        47045881,
        64000000,
        4084101,
        5153632,
        6436343,
        7962624,
        9765625,
        11881376,
        14348907,
        17210368,
        20511149,
        24300000,
        28629151,
        33554432,
        39135393,
        45435424,
        52521875,
        60466176
    ];
    BN.prototype.toString = function toString(base, padding) {
        base = base || 10;
        padding = padding | 0 || 1;
        var out;
        if (base === 16 || base === 'hex') {
            out = '';
            var off = 0;
            var carry = 0;
            for(var i = 0; i < this.length; i++){
                var w = this.words[i];
                var word = ((w << off | carry) & 16777215).toString(16);
                carry = w >>> 24 - off & 16777215;
                if (carry !== 0 || i !== this.length - 1) out = zeros[6 - word.length] + word + out;
                else out = word + out;
                off += 2;
                if (off >= 26) {
                    off -= 26;
                    i--;
                }
            }
            if (carry !== 0) out = carry.toString(16) + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        if (base === (base | 0) && base >= 2 && base <= 36) {
            // var groupSize = Math.floor(BN.wordSize * Math.LN2 / Math.log(base));
            var groupSize = groupSizes[base];
            // var groupBase = Math.pow(base, groupSize);
            var groupBase = groupBases[base];
            out = '';
            var c = this.clone();
            c.negative = 0;
            while(!c.isZero()){
                var r = c.modrn(groupBase).toString(base);
                c = c.idivn(groupBase);
                if (!c.isZero()) out = zeros[groupSize - r.length] + r + out;
                else out = r + out;
            }
            if (this.isZero()) out = '0' + out;
            while(out.length % padding !== 0)out = '0' + out;
            if (this.negative !== 0) out = '-' + out;
            return out;
        }
        assert(false, 'Base should be between 2 and 36');
    };
    BN.prototype.toNumber = function toNumber() {
        var ret = this.words[0];
        if (this.length === 2) ret += this.words[1] * 67108864;
        else if (this.length === 3 && this.words[2] === 1) // NOTE: at this stage it is known that the top bit is set
        ret += 4503599627370496 + this.words[1] * 67108864;
        else if (this.length > 2) assert(false, 'Number can only safely store up to 53 bits');
        return this.negative !== 0 ? -ret : ret;
    };
    BN.prototype.toJSON = function toJSON() {
        return this.toString(16, 2);
    };
    if (Buffer) BN.prototype.toBuffer = function toBuffer(endian, length) {
        return this.toArrayLike(Buffer, endian, length);
    };
    BN.prototype.toArray = function toArray(endian, length) {
        return this.toArrayLike(Array, endian, length);
    };
    var allocate = function allocate1(ArrayType, size) {
        if (ArrayType.allocUnsafe) return ArrayType.allocUnsafe(size);
        return new ArrayType(size);
    };
    BN.prototype.toArrayLike = function toArrayLike(ArrayType, endian, length) {
        this._strip();
        var byteLength = this.byteLength();
        var reqLength = length || Math.max(1, byteLength);
        assert(byteLength <= reqLength, 'byte array longer than desired length');
        assert(reqLength > 0, 'Requested array length <= 0');
        var res = allocate(ArrayType, reqLength);
        var postfix = endian === 'le' ? 'LE' : 'BE';
        this['_toArrayLike' + postfix](res, byteLength);
        return res;
    };
    BN.prototype._toArrayLikeLE = function _toArrayLikeLE(res, byteLength) {
        var position = 0;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position++] = word & 255;
            if (position < res.length) res[position++] = word >> 8 & 255;
            if (position < res.length) res[position++] = word >> 16 & 255;
            if (shift === 6) {
                if (position < res.length) res[position++] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position < res.length) {
            res[position++] = carry;
            while(position < res.length)res[position++] = 0;
        }
    };
    BN.prototype._toArrayLikeBE = function _toArrayLikeBE(res, byteLength) {
        var position = res.length - 1;
        var carry = 0;
        for(var i = 0, shift = 0; i < this.length; i++){
            var word = this.words[i] << shift | carry;
            res[position--] = word & 255;
            if (position >= 0) res[position--] = word >> 8 & 255;
            if (position >= 0) res[position--] = word >> 16 & 255;
            if (shift === 6) {
                if (position >= 0) res[position--] = word >> 24 & 255;
                carry = 0;
                shift = 0;
            } else {
                carry = word >>> 24;
                shift += 2;
            }
        }
        if (position >= 0) {
            res[position--] = carry;
            while(position >= 0)res[position--] = 0;
        }
    };
    if (Math.clz32) BN.prototype._countBits = function _countBits(w) {
        return 32 - Math.clz32(w);
    };
    else BN.prototype._countBits = function _countBits1(w) {
        var t = w;
        var r = 0;
        if (t >= 4096) {
            r += 13;
            t >>>= 13;
        }
        if (t >= 64) {
            r += 7;
            t >>>= 7;
        }
        if (t >= 8) {
            r += 4;
            t >>>= 4;
        }
        if (t >= 2) {
            r += 2;
            t >>>= 2;
        }
        return r + t;
    };
    BN.prototype._zeroBits = function _zeroBits(w) {
        // Short-cut
        if (w === 0) return 26;
        var t = w;
        var r = 0;
        if ((t & 8191) === 0) {
            r += 13;
            t >>>= 13;
        }
        if ((t & 127) === 0) {
            r += 7;
            t >>>= 7;
        }
        if ((t & 15) === 0) {
            r += 4;
            t >>>= 4;
        }
        if ((t & 3) === 0) {
            r += 2;
            t >>>= 2;
        }
        if ((t & 1) === 0) r++;
        return r;
    };
    // Return number of used bits in a BN
    BN.prototype.bitLength = function bitLength() {
        var w = this.words[this.length - 1];
        var hi = this._countBits(w);
        return (this.length - 1) * 26 + hi;
    };
    function toBitArray(num) {
        var w = new Array(num.bitLength());
        for(var bit = 0; bit < w.length; bit++){
            var off = bit / 26 | 0;
            var wbit = bit % 26;
            w[bit] = num.words[off] >>> wbit & 1;
        }
        return w;
    }
    // Number of trailing zero bits
    BN.prototype.zeroBits = function zeroBits() {
        if (this.isZero()) return 0;
        var r = 0;
        for(var i = 0; i < this.length; i++){
            var b = this._zeroBits(this.words[i]);
            r += b;
            if (b !== 26) break;
        }
        return r;
    };
    BN.prototype.byteLength = function byteLength() {
        return Math.ceil(this.bitLength() / 8);
    };
    BN.prototype.toTwos = function toTwos(width) {
        if (this.negative !== 0) return this.abs().inotn(width).iaddn(1);
        return this.clone();
    };
    BN.prototype.fromTwos = function fromTwos(width) {
        if (this.testn(width - 1)) return this.notn(width).iaddn(1).ineg();
        return this.clone();
    };
    BN.prototype.isNeg = function isNeg() {
        return this.negative !== 0;
    };
    // Return negative clone of `this`
    BN.prototype.neg = function neg() {
        return this.clone().ineg();
    };
    BN.prototype.ineg = function ineg() {
        if (!this.isZero()) this.negative ^= 1;
        return this;
    };
    // Or `num` with `this` in-place
    BN.prototype.iuor = function iuor(num) {
        while(this.length < num.length)this.words[this.length++] = 0;
        for(var i = 0; i < num.length; i++)this.words[i] = this.words[i] | num.words[i];
        return this._strip();
    };
    BN.prototype.ior = function ior(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuor(num);
    };
    // Or `num` with `this`
    BN.prototype.or = function or(num) {
        if (this.length > num.length) return this.clone().ior(num);
        return num.clone().ior(this);
    };
    BN.prototype.uor = function uor(num) {
        if (this.length > num.length) return this.clone().iuor(num);
        return num.clone().iuor(this);
    };
    // And `num` with `this` in-place
    BN.prototype.iuand = function iuand(num) {
        // b = min-length(num, this)
        var b;
        if (this.length > num.length) b = num;
        else b = this;
        for(var i = 0; i < b.length; i++)this.words[i] = this.words[i] & num.words[i];
        this.length = b.length;
        return this._strip();
    };
    BN.prototype.iand = function iand(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuand(num);
    };
    // And `num` with `this`
    BN.prototype.and = function and(num) {
        if (this.length > num.length) return this.clone().iand(num);
        return num.clone().iand(this);
    };
    BN.prototype.uand = function uand(num) {
        if (this.length > num.length) return this.clone().iuand(num);
        return num.clone().iuand(this);
    };
    // Xor `num` with `this` in-place
    BN.prototype.iuxor = function iuxor(num) {
        // a.length > b.length
        var a;
        var b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        for(var i = 0; i < b.length; i++)this.words[i] = a.words[i] ^ b.words[i];
        if (this !== a) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = a.length;
        return this._strip();
    };
    BN.prototype.ixor = function ixor(num) {
        assert((this.negative | num.negative) === 0);
        return this.iuxor(num);
    };
    // Xor `num` with `this`
    BN.prototype.xor = function xor(num) {
        if (this.length > num.length) return this.clone().ixor(num);
        return num.clone().ixor(this);
    };
    BN.prototype.uxor = function uxor(num) {
        if (this.length > num.length) return this.clone().iuxor(num);
        return num.clone().iuxor(this);
    };
    // Not ``this`` with ``width`` bitwidth
    BN.prototype.inotn = function inotn(width) {
        assert(typeof width === 'number' && width >= 0);
        var bytesNeeded = Math.ceil(width / 26) | 0;
        var bitsLeft = width % 26;
        // Extend the buffer with leading zeroes
        this._expand(bytesNeeded);
        if (bitsLeft > 0) bytesNeeded--;
        // Handle complete words
        for(var i = 0; i < bytesNeeded; i++)this.words[i] = ~this.words[i] & 67108863;
        // Handle the residue
        if (bitsLeft > 0) this.words[i] = ~this.words[i] & 67108863 >> 26 - bitsLeft;
        // And remove leading zeroes
        return this._strip();
    };
    BN.prototype.notn = function notn(width) {
        return this.clone().inotn(width);
    };
    // Set `bit` of `this`
    BN.prototype.setn = function setn(bit, val) {
        assert(typeof bit === 'number' && bit >= 0);
        var off = bit / 26 | 0;
        var wbit = bit % 26;
        this._expand(off + 1);
        if (val) this.words[off] = this.words[off] | 1 << wbit;
        else this.words[off] = this.words[off] & ~(1 << wbit);
        return this._strip();
    };
    // Add `num` to `this` in-place
    BN.prototype.iadd = function iadd(num) {
        var r;
        // negative + positive
        if (this.negative !== 0 && num.negative === 0) {
            this.negative = 0;
            r = this.isub(num);
            this.negative ^= 1;
            return this._normSign();
        // positive + negative
        } else if (this.negative === 0 && num.negative !== 0) {
            num.negative = 0;
            r = this.isub(num);
            num.negative = 1;
            return r._normSign();
        }
        // a.length > b.length
        var a, b;
        if (this.length > num.length) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) + (b.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            this.words[i] = r & 67108863;
            carry = r >>> 26;
        }
        this.length = a.length;
        if (carry !== 0) {
            this.words[this.length] = carry;
            this.length++;
        // Copy the rest of the words
        } else if (a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        return this;
    };
    // Add `num` to `this`
    BN.prototype.add = function add(num) {
        var res;
        if (num.negative !== 0 && this.negative === 0) {
            num.negative = 0;
            res = this.sub(num);
            num.negative ^= 1;
            return res;
        } else if (num.negative === 0 && this.negative !== 0) {
            this.negative = 0;
            res = num.sub(this);
            this.negative = 1;
            return res;
        }
        if (this.length > num.length) return this.clone().iadd(num);
        return num.clone().iadd(this);
    };
    // Subtract `num` from `this` in-place
    BN.prototype.isub = function isub(num) {
        // this - (-num) = this + num
        if (num.negative !== 0) {
            num.negative = 0;
            var r = this.iadd(num);
            num.negative = 1;
            return r._normSign();
        // -this - num = -(this + num)
        } else if (this.negative !== 0) {
            this.negative = 0;
            this.iadd(num);
            this.negative = 1;
            return this._normSign();
        }
        // At this point both numbers are positive
        var cmp = this.cmp(num);
        // Optimization - zeroify
        if (cmp === 0) {
            this.negative = 0;
            this.length = 1;
            this.words[0] = 0;
            return this;
        }
        // a > b
        var a, b;
        if (cmp > 0) {
            a = this;
            b = num;
        } else {
            a = num;
            b = this;
        }
        var carry = 0;
        for(var i = 0; i < b.length; i++){
            r = (a.words[i] | 0) - (b.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        for(; carry !== 0 && i < a.length; i++){
            r = (a.words[i] | 0) + carry;
            carry = r >> 26;
            this.words[i] = r & 67108863;
        }
        // Copy rest of the words
        if (carry === 0 && i < a.length && a !== this) for(; i < a.length; i++)this.words[i] = a.words[i];
        this.length = Math.max(this.length, i);
        if (a !== this) this.negative = 1;
        return this._strip();
    };
    // Subtract `num` from `this`
    BN.prototype.sub = function sub(num) {
        return this.clone().isub(num);
    };
    function smallMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        var len = self.length + num.length | 0;
        out.length = len;
        len = len - 1 | 0;
        // Peel one iteration (compiler can't do it, because of code complexity)
        var a = self.words[0] | 0;
        var b = num.words[0] | 0;
        var r = a * b;
        var lo = r & 67108863;
        var carry = r / 67108864 | 0;
        out.words[0] = lo;
        for(var k = 1; k < len; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = carry >>> 26;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j | 0;
                a = self.words[i] | 0;
                b = num.words[j] | 0;
                r = a * b + rword;
                ncarry += r / 67108864 | 0;
                rword = r & 67108863;
            }
            out.words[k] = rword | 0;
            carry = ncarry | 0;
        }
        if (carry !== 0) out.words[k] = carry | 0;
        else out.length--;
        return out._strip();
    }
    // TODO(indutny): it may be reasonable to omit it for users who don't need
    // to work with 256-bit numbers, otherwise it gives 20% improvement for 256-bit
    // multiplication (like elliptic secp256k1).
    var comb10MulTo = function comb10MulTo1(self, num, out) {
        var a = self.words;
        var b = num.words;
        var o = out.words;
        var c = 0;
        var lo;
        var mid;
        var hi;
        var a0 = a[0] | 0;
        var al0 = a0 & 8191;
        var ah0 = a0 >>> 13;
        var a1 = a[1] | 0;
        var al1 = a1 & 8191;
        var ah1 = a1 >>> 13;
        var a2 = a[2] | 0;
        var al2 = a2 & 8191;
        var ah2 = a2 >>> 13;
        var a3 = a[3] | 0;
        var al3 = a3 & 8191;
        var ah3 = a3 >>> 13;
        var a4 = a[4] | 0;
        var al4 = a4 & 8191;
        var ah4 = a4 >>> 13;
        var a5 = a[5] | 0;
        var al5 = a5 & 8191;
        var ah5 = a5 >>> 13;
        var a6 = a[6] | 0;
        var al6 = a6 & 8191;
        var ah6 = a6 >>> 13;
        var a7 = a[7] | 0;
        var al7 = a7 & 8191;
        var ah7 = a7 >>> 13;
        var a8 = a[8] | 0;
        var al8 = a8 & 8191;
        var ah8 = a8 >>> 13;
        var a9 = a[9] | 0;
        var al9 = a9 & 8191;
        var ah9 = a9 >>> 13;
        var b0 = b[0] | 0;
        var bl0 = b0 & 8191;
        var bh0 = b0 >>> 13;
        var b1 = b[1] | 0;
        var bl1 = b1 & 8191;
        var bh1 = b1 >>> 13;
        var b2 = b[2] | 0;
        var bl2 = b2 & 8191;
        var bh2 = b2 >>> 13;
        var b3 = b[3] | 0;
        var bl3 = b3 & 8191;
        var bh3 = b3 >>> 13;
        var b4 = b[4] | 0;
        var bl4 = b4 & 8191;
        var bh4 = b4 >>> 13;
        var b5 = b[5] | 0;
        var bl5 = b5 & 8191;
        var bh5 = b5 >>> 13;
        var b6 = b[6] | 0;
        var bl6 = b6 & 8191;
        var bh6 = b6 >>> 13;
        var b7 = b[7] | 0;
        var bl7 = b7 & 8191;
        var bh7 = b7 >>> 13;
        var b8 = b[8] | 0;
        var bl8 = b8 & 8191;
        var bh8 = b8 >>> 13;
        var b9 = b[9] | 0;
        var bl9 = b9 & 8191;
        var bh9 = b9 >>> 13;
        out.negative = self.negative ^ num.negative;
        out.length = 19;
        /* k = 0 */ lo = Math.imul(al0, bl0);
        mid = Math.imul(al0, bh0);
        mid = mid + Math.imul(ah0, bl0) | 0;
        hi = Math.imul(ah0, bh0);
        var w0 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w0 >>> 26) | 0;
        w0 &= 67108863;
        /* k = 1 */ lo = Math.imul(al1, bl0);
        mid = Math.imul(al1, bh0);
        mid = mid + Math.imul(ah1, bl0) | 0;
        hi = Math.imul(ah1, bh0);
        lo = lo + Math.imul(al0, bl1) | 0;
        mid = mid + Math.imul(al0, bh1) | 0;
        mid = mid + Math.imul(ah0, bl1) | 0;
        hi = hi + Math.imul(ah0, bh1) | 0;
        var w1 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w1 >>> 26) | 0;
        w1 &= 67108863;
        /* k = 2 */ lo = Math.imul(al2, bl0);
        mid = Math.imul(al2, bh0);
        mid = mid + Math.imul(ah2, bl0) | 0;
        hi = Math.imul(ah2, bh0);
        lo = lo + Math.imul(al1, bl1) | 0;
        mid = mid + Math.imul(al1, bh1) | 0;
        mid = mid + Math.imul(ah1, bl1) | 0;
        hi = hi + Math.imul(ah1, bh1) | 0;
        lo = lo + Math.imul(al0, bl2) | 0;
        mid = mid + Math.imul(al0, bh2) | 0;
        mid = mid + Math.imul(ah0, bl2) | 0;
        hi = hi + Math.imul(ah0, bh2) | 0;
        var w2 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w2 >>> 26) | 0;
        w2 &= 67108863;
        /* k = 3 */ lo = Math.imul(al3, bl0);
        mid = Math.imul(al3, bh0);
        mid = mid + Math.imul(ah3, bl0) | 0;
        hi = Math.imul(ah3, bh0);
        lo = lo + Math.imul(al2, bl1) | 0;
        mid = mid + Math.imul(al2, bh1) | 0;
        mid = mid + Math.imul(ah2, bl1) | 0;
        hi = hi + Math.imul(ah2, bh1) | 0;
        lo = lo + Math.imul(al1, bl2) | 0;
        mid = mid + Math.imul(al1, bh2) | 0;
        mid = mid + Math.imul(ah1, bl2) | 0;
        hi = hi + Math.imul(ah1, bh2) | 0;
        lo = lo + Math.imul(al0, bl3) | 0;
        mid = mid + Math.imul(al0, bh3) | 0;
        mid = mid + Math.imul(ah0, bl3) | 0;
        hi = hi + Math.imul(ah0, bh3) | 0;
        var w3 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w3 >>> 26) | 0;
        w3 &= 67108863;
        /* k = 4 */ lo = Math.imul(al4, bl0);
        mid = Math.imul(al4, bh0);
        mid = mid + Math.imul(ah4, bl0) | 0;
        hi = Math.imul(ah4, bh0);
        lo = lo + Math.imul(al3, bl1) | 0;
        mid = mid + Math.imul(al3, bh1) | 0;
        mid = mid + Math.imul(ah3, bl1) | 0;
        hi = hi + Math.imul(ah3, bh1) | 0;
        lo = lo + Math.imul(al2, bl2) | 0;
        mid = mid + Math.imul(al2, bh2) | 0;
        mid = mid + Math.imul(ah2, bl2) | 0;
        hi = hi + Math.imul(ah2, bh2) | 0;
        lo = lo + Math.imul(al1, bl3) | 0;
        mid = mid + Math.imul(al1, bh3) | 0;
        mid = mid + Math.imul(ah1, bl3) | 0;
        hi = hi + Math.imul(ah1, bh3) | 0;
        lo = lo + Math.imul(al0, bl4) | 0;
        mid = mid + Math.imul(al0, bh4) | 0;
        mid = mid + Math.imul(ah0, bl4) | 0;
        hi = hi + Math.imul(ah0, bh4) | 0;
        var w4 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w4 >>> 26) | 0;
        w4 &= 67108863;
        /* k = 5 */ lo = Math.imul(al5, bl0);
        mid = Math.imul(al5, bh0);
        mid = mid + Math.imul(ah5, bl0) | 0;
        hi = Math.imul(ah5, bh0);
        lo = lo + Math.imul(al4, bl1) | 0;
        mid = mid + Math.imul(al4, bh1) | 0;
        mid = mid + Math.imul(ah4, bl1) | 0;
        hi = hi + Math.imul(ah4, bh1) | 0;
        lo = lo + Math.imul(al3, bl2) | 0;
        mid = mid + Math.imul(al3, bh2) | 0;
        mid = mid + Math.imul(ah3, bl2) | 0;
        hi = hi + Math.imul(ah3, bh2) | 0;
        lo = lo + Math.imul(al2, bl3) | 0;
        mid = mid + Math.imul(al2, bh3) | 0;
        mid = mid + Math.imul(ah2, bl3) | 0;
        hi = hi + Math.imul(ah2, bh3) | 0;
        lo = lo + Math.imul(al1, bl4) | 0;
        mid = mid + Math.imul(al1, bh4) | 0;
        mid = mid + Math.imul(ah1, bl4) | 0;
        hi = hi + Math.imul(ah1, bh4) | 0;
        lo = lo + Math.imul(al0, bl5) | 0;
        mid = mid + Math.imul(al0, bh5) | 0;
        mid = mid + Math.imul(ah0, bl5) | 0;
        hi = hi + Math.imul(ah0, bh5) | 0;
        var w5 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w5 >>> 26) | 0;
        w5 &= 67108863;
        /* k = 6 */ lo = Math.imul(al6, bl0);
        mid = Math.imul(al6, bh0);
        mid = mid + Math.imul(ah6, bl0) | 0;
        hi = Math.imul(ah6, bh0);
        lo = lo + Math.imul(al5, bl1) | 0;
        mid = mid + Math.imul(al5, bh1) | 0;
        mid = mid + Math.imul(ah5, bl1) | 0;
        hi = hi + Math.imul(ah5, bh1) | 0;
        lo = lo + Math.imul(al4, bl2) | 0;
        mid = mid + Math.imul(al4, bh2) | 0;
        mid = mid + Math.imul(ah4, bl2) | 0;
        hi = hi + Math.imul(ah4, bh2) | 0;
        lo = lo + Math.imul(al3, bl3) | 0;
        mid = mid + Math.imul(al3, bh3) | 0;
        mid = mid + Math.imul(ah3, bl3) | 0;
        hi = hi + Math.imul(ah3, bh3) | 0;
        lo = lo + Math.imul(al2, bl4) | 0;
        mid = mid + Math.imul(al2, bh4) | 0;
        mid = mid + Math.imul(ah2, bl4) | 0;
        hi = hi + Math.imul(ah2, bh4) | 0;
        lo = lo + Math.imul(al1, bl5) | 0;
        mid = mid + Math.imul(al1, bh5) | 0;
        mid = mid + Math.imul(ah1, bl5) | 0;
        hi = hi + Math.imul(ah1, bh5) | 0;
        lo = lo + Math.imul(al0, bl6) | 0;
        mid = mid + Math.imul(al0, bh6) | 0;
        mid = mid + Math.imul(ah0, bl6) | 0;
        hi = hi + Math.imul(ah0, bh6) | 0;
        var w6 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w6 >>> 26) | 0;
        w6 &= 67108863;
        /* k = 7 */ lo = Math.imul(al7, bl0);
        mid = Math.imul(al7, bh0);
        mid = mid + Math.imul(ah7, bl0) | 0;
        hi = Math.imul(ah7, bh0);
        lo = lo + Math.imul(al6, bl1) | 0;
        mid = mid + Math.imul(al6, bh1) | 0;
        mid = mid + Math.imul(ah6, bl1) | 0;
        hi = hi + Math.imul(ah6, bh1) | 0;
        lo = lo + Math.imul(al5, bl2) | 0;
        mid = mid + Math.imul(al5, bh2) | 0;
        mid = mid + Math.imul(ah5, bl2) | 0;
        hi = hi + Math.imul(ah5, bh2) | 0;
        lo = lo + Math.imul(al4, bl3) | 0;
        mid = mid + Math.imul(al4, bh3) | 0;
        mid = mid + Math.imul(ah4, bl3) | 0;
        hi = hi + Math.imul(ah4, bh3) | 0;
        lo = lo + Math.imul(al3, bl4) | 0;
        mid = mid + Math.imul(al3, bh4) | 0;
        mid = mid + Math.imul(ah3, bl4) | 0;
        hi = hi + Math.imul(ah3, bh4) | 0;
        lo = lo + Math.imul(al2, bl5) | 0;
        mid = mid + Math.imul(al2, bh5) | 0;
        mid = mid + Math.imul(ah2, bl5) | 0;
        hi = hi + Math.imul(ah2, bh5) | 0;
        lo = lo + Math.imul(al1, bl6) | 0;
        mid = mid + Math.imul(al1, bh6) | 0;
        mid = mid + Math.imul(ah1, bl6) | 0;
        hi = hi + Math.imul(ah1, bh6) | 0;
        lo = lo + Math.imul(al0, bl7) | 0;
        mid = mid + Math.imul(al0, bh7) | 0;
        mid = mid + Math.imul(ah0, bl7) | 0;
        hi = hi + Math.imul(ah0, bh7) | 0;
        var w7 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w7 >>> 26) | 0;
        w7 &= 67108863;
        /* k = 8 */ lo = Math.imul(al8, bl0);
        mid = Math.imul(al8, bh0);
        mid = mid + Math.imul(ah8, bl0) | 0;
        hi = Math.imul(ah8, bh0);
        lo = lo + Math.imul(al7, bl1) | 0;
        mid = mid + Math.imul(al7, bh1) | 0;
        mid = mid + Math.imul(ah7, bl1) | 0;
        hi = hi + Math.imul(ah7, bh1) | 0;
        lo = lo + Math.imul(al6, bl2) | 0;
        mid = mid + Math.imul(al6, bh2) | 0;
        mid = mid + Math.imul(ah6, bl2) | 0;
        hi = hi + Math.imul(ah6, bh2) | 0;
        lo = lo + Math.imul(al5, bl3) | 0;
        mid = mid + Math.imul(al5, bh3) | 0;
        mid = mid + Math.imul(ah5, bl3) | 0;
        hi = hi + Math.imul(ah5, bh3) | 0;
        lo = lo + Math.imul(al4, bl4) | 0;
        mid = mid + Math.imul(al4, bh4) | 0;
        mid = mid + Math.imul(ah4, bl4) | 0;
        hi = hi + Math.imul(ah4, bh4) | 0;
        lo = lo + Math.imul(al3, bl5) | 0;
        mid = mid + Math.imul(al3, bh5) | 0;
        mid = mid + Math.imul(ah3, bl5) | 0;
        hi = hi + Math.imul(ah3, bh5) | 0;
        lo = lo + Math.imul(al2, bl6) | 0;
        mid = mid + Math.imul(al2, bh6) | 0;
        mid = mid + Math.imul(ah2, bl6) | 0;
        hi = hi + Math.imul(ah2, bh6) | 0;
        lo = lo + Math.imul(al1, bl7) | 0;
        mid = mid + Math.imul(al1, bh7) | 0;
        mid = mid + Math.imul(ah1, bl7) | 0;
        hi = hi + Math.imul(ah1, bh7) | 0;
        lo = lo + Math.imul(al0, bl8) | 0;
        mid = mid + Math.imul(al0, bh8) | 0;
        mid = mid + Math.imul(ah0, bl8) | 0;
        hi = hi + Math.imul(ah0, bh8) | 0;
        var w8 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w8 >>> 26) | 0;
        w8 &= 67108863;
        /* k = 9 */ lo = Math.imul(al9, bl0);
        mid = Math.imul(al9, bh0);
        mid = mid + Math.imul(ah9, bl0) | 0;
        hi = Math.imul(ah9, bh0);
        lo = lo + Math.imul(al8, bl1) | 0;
        mid = mid + Math.imul(al8, bh1) | 0;
        mid = mid + Math.imul(ah8, bl1) | 0;
        hi = hi + Math.imul(ah8, bh1) | 0;
        lo = lo + Math.imul(al7, bl2) | 0;
        mid = mid + Math.imul(al7, bh2) | 0;
        mid = mid + Math.imul(ah7, bl2) | 0;
        hi = hi + Math.imul(ah7, bh2) | 0;
        lo = lo + Math.imul(al6, bl3) | 0;
        mid = mid + Math.imul(al6, bh3) | 0;
        mid = mid + Math.imul(ah6, bl3) | 0;
        hi = hi + Math.imul(ah6, bh3) | 0;
        lo = lo + Math.imul(al5, bl4) | 0;
        mid = mid + Math.imul(al5, bh4) | 0;
        mid = mid + Math.imul(ah5, bl4) | 0;
        hi = hi + Math.imul(ah5, bh4) | 0;
        lo = lo + Math.imul(al4, bl5) | 0;
        mid = mid + Math.imul(al4, bh5) | 0;
        mid = mid + Math.imul(ah4, bl5) | 0;
        hi = hi + Math.imul(ah4, bh5) | 0;
        lo = lo + Math.imul(al3, bl6) | 0;
        mid = mid + Math.imul(al3, bh6) | 0;
        mid = mid + Math.imul(ah3, bl6) | 0;
        hi = hi + Math.imul(ah3, bh6) | 0;
        lo = lo + Math.imul(al2, bl7) | 0;
        mid = mid + Math.imul(al2, bh7) | 0;
        mid = mid + Math.imul(ah2, bl7) | 0;
        hi = hi + Math.imul(ah2, bh7) | 0;
        lo = lo + Math.imul(al1, bl8) | 0;
        mid = mid + Math.imul(al1, bh8) | 0;
        mid = mid + Math.imul(ah1, bl8) | 0;
        hi = hi + Math.imul(ah1, bh8) | 0;
        lo = lo + Math.imul(al0, bl9) | 0;
        mid = mid + Math.imul(al0, bh9) | 0;
        mid = mid + Math.imul(ah0, bl9) | 0;
        hi = hi + Math.imul(ah0, bh9) | 0;
        var w9 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w9 >>> 26) | 0;
        w9 &= 67108863;
        /* k = 10 */ lo = Math.imul(al9, bl1);
        mid = Math.imul(al9, bh1);
        mid = mid + Math.imul(ah9, bl1) | 0;
        hi = Math.imul(ah9, bh1);
        lo = lo + Math.imul(al8, bl2) | 0;
        mid = mid + Math.imul(al8, bh2) | 0;
        mid = mid + Math.imul(ah8, bl2) | 0;
        hi = hi + Math.imul(ah8, bh2) | 0;
        lo = lo + Math.imul(al7, bl3) | 0;
        mid = mid + Math.imul(al7, bh3) | 0;
        mid = mid + Math.imul(ah7, bl3) | 0;
        hi = hi + Math.imul(ah7, bh3) | 0;
        lo = lo + Math.imul(al6, bl4) | 0;
        mid = mid + Math.imul(al6, bh4) | 0;
        mid = mid + Math.imul(ah6, bl4) | 0;
        hi = hi + Math.imul(ah6, bh4) | 0;
        lo = lo + Math.imul(al5, bl5) | 0;
        mid = mid + Math.imul(al5, bh5) | 0;
        mid = mid + Math.imul(ah5, bl5) | 0;
        hi = hi + Math.imul(ah5, bh5) | 0;
        lo = lo + Math.imul(al4, bl6) | 0;
        mid = mid + Math.imul(al4, bh6) | 0;
        mid = mid + Math.imul(ah4, bl6) | 0;
        hi = hi + Math.imul(ah4, bh6) | 0;
        lo = lo + Math.imul(al3, bl7) | 0;
        mid = mid + Math.imul(al3, bh7) | 0;
        mid = mid + Math.imul(ah3, bl7) | 0;
        hi = hi + Math.imul(ah3, bh7) | 0;
        lo = lo + Math.imul(al2, bl8) | 0;
        mid = mid + Math.imul(al2, bh8) | 0;
        mid = mid + Math.imul(ah2, bl8) | 0;
        hi = hi + Math.imul(ah2, bh8) | 0;
        lo = lo + Math.imul(al1, bl9) | 0;
        mid = mid + Math.imul(al1, bh9) | 0;
        mid = mid + Math.imul(ah1, bl9) | 0;
        hi = hi + Math.imul(ah1, bh9) | 0;
        var w10 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w10 >>> 26) | 0;
        w10 &= 67108863;
        /* k = 11 */ lo = Math.imul(al9, bl2);
        mid = Math.imul(al9, bh2);
        mid = mid + Math.imul(ah9, bl2) | 0;
        hi = Math.imul(ah9, bh2);
        lo = lo + Math.imul(al8, bl3) | 0;
        mid = mid + Math.imul(al8, bh3) | 0;
        mid = mid + Math.imul(ah8, bl3) | 0;
        hi = hi + Math.imul(ah8, bh3) | 0;
        lo = lo + Math.imul(al7, bl4) | 0;
        mid = mid + Math.imul(al7, bh4) | 0;
        mid = mid + Math.imul(ah7, bl4) | 0;
        hi = hi + Math.imul(ah7, bh4) | 0;
        lo = lo + Math.imul(al6, bl5) | 0;
        mid = mid + Math.imul(al6, bh5) | 0;
        mid = mid + Math.imul(ah6, bl5) | 0;
        hi = hi + Math.imul(ah6, bh5) | 0;
        lo = lo + Math.imul(al5, bl6) | 0;
        mid = mid + Math.imul(al5, bh6) | 0;
        mid = mid + Math.imul(ah5, bl6) | 0;
        hi = hi + Math.imul(ah5, bh6) | 0;
        lo = lo + Math.imul(al4, bl7) | 0;
        mid = mid + Math.imul(al4, bh7) | 0;
        mid = mid + Math.imul(ah4, bl7) | 0;
        hi = hi + Math.imul(ah4, bh7) | 0;
        lo = lo + Math.imul(al3, bl8) | 0;
        mid = mid + Math.imul(al3, bh8) | 0;
        mid = mid + Math.imul(ah3, bl8) | 0;
        hi = hi + Math.imul(ah3, bh8) | 0;
        lo = lo + Math.imul(al2, bl9) | 0;
        mid = mid + Math.imul(al2, bh9) | 0;
        mid = mid + Math.imul(ah2, bl9) | 0;
        hi = hi + Math.imul(ah2, bh9) | 0;
        var w11 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w11 >>> 26) | 0;
        w11 &= 67108863;
        /* k = 12 */ lo = Math.imul(al9, bl3);
        mid = Math.imul(al9, bh3);
        mid = mid + Math.imul(ah9, bl3) | 0;
        hi = Math.imul(ah9, bh3);
        lo = lo + Math.imul(al8, bl4) | 0;
        mid = mid + Math.imul(al8, bh4) | 0;
        mid = mid + Math.imul(ah8, bl4) | 0;
        hi = hi + Math.imul(ah8, bh4) | 0;
        lo = lo + Math.imul(al7, bl5) | 0;
        mid = mid + Math.imul(al7, bh5) | 0;
        mid = mid + Math.imul(ah7, bl5) | 0;
        hi = hi + Math.imul(ah7, bh5) | 0;
        lo = lo + Math.imul(al6, bl6) | 0;
        mid = mid + Math.imul(al6, bh6) | 0;
        mid = mid + Math.imul(ah6, bl6) | 0;
        hi = hi + Math.imul(ah6, bh6) | 0;
        lo = lo + Math.imul(al5, bl7) | 0;
        mid = mid + Math.imul(al5, bh7) | 0;
        mid = mid + Math.imul(ah5, bl7) | 0;
        hi = hi + Math.imul(ah5, bh7) | 0;
        lo = lo + Math.imul(al4, bl8) | 0;
        mid = mid + Math.imul(al4, bh8) | 0;
        mid = mid + Math.imul(ah4, bl8) | 0;
        hi = hi + Math.imul(ah4, bh8) | 0;
        lo = lo + Math.imul(al3, bl9) | 0;
        mid = mid + Math.imul(al3, bh9) | 0;
        mid = mid + Math.imul(ah3, bl9) | 0;
        hi = hi + Math.imul(ah3, bh9) | 0;
        var w12 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w12 >>> 26) | 0;
        w12 &= 67108863;
        /* k = 13 */ lo = Math.imul(al9, bl4);
        mid = Math.imul(al9, bh4);
        mid = mid + Math.imul(ah9, bl4) | 0;
        hi = Math.imul(ah9, bh4);
        lo = lo + Math.imul(al8, bl5) | 0;
        mid = mid + Math.imul(al8, bh5) | 0;
        mid = mid + Math.imul(ah8, bl5) | 0;
        hi = hi + Math.imul(ah8, bh5) | 0;
        lo = lo + Math.imul(al7, bl6) | 0;
        mid = mid + Math.imul(al7, bh6) | 0;
        mid = mid + Math.imul(ah7, bl6) | 0;
        hi = hi + Math.imul(ah7, bh6) | 0;
        lo = lo + Math.imul(al6, bl7) | 0;
        mid = mid + Math.imul(al6, bh7) | 0;
        mid = mid + Math.imul(ah6, bl7) | 0;
        hi = hi + Math.imul(ah6, bh7) | 0;
        lo = lo + Math.imul(al5, bl8) | 0;
        mid = mid + Math.imul(al5, bh8) | 0;
        mid = mid + Math.imul(ah5, bl8) | 0;
        hi = hi + Math.imul(ah5, bh8) | 0;
        lo = lo + Math.imul(al4, bl9) | 0;
        mid = mid + Math.imul(al4, bh9) | 0;
        mid = mid + Math.imul(ah4, bl9) | 0;
        hi = hi + Math.imul(ah4, bh9) | 0;
        var w13 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w13 >>> 26) | 0;
        w13 &= 67108863;
        /* k = 14 */ lo = Math.imul(al9, bl5);
        mid = Math.imul(al9, bh5);
        mid = mid + Math.imul(ah9, bl5) | 0;
        hi = Math.imul(ah9, bh5);
        lo = lo + Math.imul(al8, bl6) | 0;
        mid = mid + Math.imul(al8, bh6) | 0;
        mid = mid + Math.imul(ah8, bl6) | 0;
        hi = hi + Math.imul(ah8, bh6) | 0;
        lo = lo + Math.imul(al7, bl7) | 0;
        mid = mid + Math.imul(al7, bh7) | 0;
        mid = mid + Math.imul(ah7, bl7) | 0;
        hi = hi + Math.imul(ah7, bh7) | 0;
        lo = lo + Math.imul(al6, bl8) | 0;
        mid = mid + Math.imul(al6, bh8) | 0;
        mid = mid + Math.imul(ah6, bl8) | 0;
        hi = hi + Math.imul(ah6, bh8) | 0;
        lo = lo + Math.imul(al5, bl9) | 0;
        mid = mid + Math.imul(al5, bh9) | 0;
        mid = mid + Math.imul(ah5, bl9) | 0;
        hi = hi + Math.imul(ah5, bh9) | 0;
        var w14 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w14 >>> 26) | 0;
        w14 &= 67108863;
        /* k = 15 */ lo = Math.imul(al9, bl6);
        mid = Math.imul(al9, bh6);
        mid = mid + Math.imul(ah9, bl6) | 0;
        hi = Math.imul(ah9, bh6);
        lo = lo + Math.imul(al8, bl7) | 0;
        mid = mid + Math.imul(al8, bh7) | 0;
        mid = mid + Math.imul(ah8, bl7) | 0;
        hi = hi + Math.imul(ah8, bh7) | 0;
        lo = lo + Math.imul(al7, bl8) | 0;
        mid = mid + Math.imul(al7, bh8) | 0;
        mid = mid + Math.imul(ah7, bl8) | 0;
        hi = hi + Math.imul(ah7, bh8) | 0;
        lo = lo + Math.imul(al6, bl9) | 0;
        mid = mid + Math.imul(al6, bh9) | 0;
        mid = mid + Math.imul(ah6, bl9) | 0;
        hi = hi + Math.imul(ah6, bh9) | 0;
        var w15 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w15 >>> 26) | 0;
        w15 &= 67108863;
        /* k = 16 */ lo = Math.imul(al9, bl7);
        mid = Math.imul(al9, bh7);
        mid = mid + Math.imul(ah9, bl7) | 0;
        hi = Math.imul(ah9, bh7);
        lo = lo + Math.imul(al8, bl8) | 0;
        mid = mid + Math.imul(al8, bh8) | 0;
        mid = mid + Math.imul(ah8, bl8) | 0;
        hi = hi + Math.imul(ah8, bh8) | 0;
        lo = lo + Math.imul(al7, bl9) | 0;
        mid = mid + Math.imul(al7, bh9) | 0;
        mid = mid + Math.imul(ah7, bl9) | 0;
        hi = hi + Math.imul(ah7, bh9) | 0;
        var w16 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w16 >>> 26) | 0;
        w16 &= 67108863;
        /* k = 17 */ lo = Math.imul(al9, bl8);
        mid = Math.imul(al9, bh8);
        mid = mid + Math.imul(ah9, bl8) | 0;
        hi = Math.imul(ah9, bh8);
        lo = lo + Math.imul(al8, bl9) | 0;
        mid = mid + Math.imul(al8, bh9) | 0;
        mid = mid + Math.imul(ah8, bl9) | 0;
        hi = hi + Math.imul(ah8, bh9) | 0;
        var w17 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w17 >>> 26) | 0;
        w17 &= 67108863;
        /* k = 18 */ lo = Math.imul(al9, bl9);
        mid = Math.imul(al9, bh9);
        mid = mid + Math.imul(ah9, bl9) | 0;
        hi = Math.imul(ah9, bh9);
        var w18 = (c + lo | 0) + ((mid & 8191) << 13) | 0;
        c = (hi + (mid >>> 13) | 0) + (w18 >>> 26) | 0;
        w18 &= 67108863;
        o[0] = w0;
        o[1] = w1;
        o[2] = w2;
        o[3] = w3;
        o[4] = w4;
        o[5] = w5;
        o[6] = w6;
        o[7] = w7;
        o[8] = w8;
        o[9] = w9;
        o[10] = w10;
        o[11] = w11;
        o[12] = w12;
        o[13] = w13;
        o[14] = w14;
        o[15] = w15;
        o[16] = w16;
        o[17] = w17;
        o[18] = w18;
        if (c !== 0) {
            o[19] = c;
            out.length++;
        }
        return out;
    };
    // Polyfill comb
    if (!Math.imul) comb10MulTo = smallMulTo;
    function bigMulTo(self, num, out) {
        out.negative = num.negative ^ self.negative;
        out.length = self.length + num.length;
        var carry = 0;
        var hncarry = 0;
        for(var k = 0; k < out.length - 1; k++){
            // Sum all words with the same `i + j = k` and accumulate `ncarry`,
            // note that ncarry could be >= 0x3ffffff
            var ncarry = hncarry;
            hncarry = 0;
            var rword = carry & 67108863;
            var maxJ = Math.min(k, num.length - 1);
            for(var j = Math.max(0, k - self.length + 1); j <= maxJ; j++){
                var i = k - j;
                var a = self.words[i] | 0;
                var b = num.words[j] | 0;
                var r = a * b;
                var lo = r & 67108863;
                ncarry = ncarry + (r / 67108864 | 0) | 0;
                lo = lo + rword | 0;
                rword = lo & 67108863;
                ncarry = ncarry + (lo >>> 26) | 0;
                hncarry += ncarry >>> 26;
                ncarry &= 67108863;
            }
            out.words[k] = rword;
            carry = ncarry;
            ncarry = hncarry;
        }
        if (carry !== 0) out.words[k] = carry;
        else out.length--;
        return out._strip();
    }
    function jumboMulTo(self, num, out) {
        // Temporary disable, see https://github.com/indutny/bn.js/issues/211
        // var fftm = new FFTM();
        // return fftm.mulp(self, num, out);
        return bigMulTo(self, num, out);
    }
    BN.prototype.mulTo = function mulTo(num, out) {
        var res;
        var len = this.length + num.length;
        if (this.length === 10 && num.length === 10) res = comb10MulTo(this, num, out);
        else if (len < 63) res = smallMulTo(this, num, out);
        else if (len < 1024) res = bigMulTo(this, num, out);
        else res = jumboMulTo(this, num, out);
        return res;
    };
    // Cooley-Tukey algorithm for FFT
    // slightly revisited to rely on looping instead of recursion
    function FFTM(x, y) {
        this.x = x;
        this.y = y;
    }
    FFTM.prototype.makeRBT = function makeRBT(N) {
        var t = new Array(N);
        var l = BN.prototype._countBits(N) - 1;
        for(var i = 0; i < N; i++)t[i] = this.revBin(i, l, N);
        return t;
    };
    // Returns binary-reversed representation of `x`
    FFTM.prototype.revBin = function revBin(x, l, N) {
        if (x === 0 || x === N - 1) return x;
        var rb = 0;
        for(var i = 0; i < l; i++){
            rb |= (x & 1) << l - i - 1;
            x >>= 1;
        }
        return rb;
    };
    // Performs "tweedling" phase, therefore 'emulating'
    // behaviour of the recursive algorithm
    FFTM.prototype.permute = function permute(rbt, rws, iws, rtws, itws, N) {
        for(var i = 0; i < N; i++){
            rtws[i] = rws[rbt[i]];
            itws[i] = iws[rbt[i]];
        }
    };
    FFTM.prototype.transform = function transform(rws, iws, rtws, itws, N, rbt) {
        this.permute(rbt, rws, iws, rtws, itws, N);
        for(var s = 1; s < N; s <<= 1){
            var l = s << 1;
            var rtwdf = Math.cos(2 * Math.PI / l);
            var itwdf = Math.sin(2 * Math.PI / l);
            for(var p = 0; p < N; p += l){
                var rtwdf_ = rtwdf;
                var itwdf_ = itwdf;
                for(var j = 0; j < s; j++){
                    var re = rtws[p + j];
                    var ie = itws[p + j];
                    var ro = rtws[p + j + s];
                    var io = itws[p + j + s];
                    var rx = rtwdf_ * ro - itwdf_ * io;
                    io = rtwdf_ * io + itwdf_ * ro;
                    ro = rx;
                    rtws[p + j] = re + ro;
                    itws[p + j] = ie + io;
                    rtws[p + j + s] = re - ro;
                    itws[p + j + s] = ie - io;
                    /* jshint maxdepth : false */ if (j !== l) {
                        rx = rtwdf * rtwdf_ - itwdf * itwdf_;
                        itwdf_ = rtwdf * itwdf_ + itwdf * rtwdf_;
                        rtwdf_ = rx;
                    }
                }
            }
        }
    };
    FFTM.prototype.guessLen13b = function guessLen13b(n, m) {
        var N = Math.max(m, n) | 1;
        var odd = N & 1;
        var i = 0;
        for(N = N / 2 | 0; N; N = N >>> 1)i++;
        return 1 << i + 1 + odd;
    };
    FFTM.prototype.conjugate = function conjugate(rws, iws, N) {
        if (N <= 1) return;
        for(var i = 0; i < N / 2; i++){
            var t = rws[i];
            rws[i] = rws[N - i - 1];
            rws[N - i - 1] = t;
            t = iws[i];
            iws[i] = -iws[N - i - 1];
            iws[N - i - 1] = -t;
        }
    };
    FFTM.prototype.normalize13b = function normalize13b(ws, N) {
        var carry = 0;
        for(var i = 0; i < N / 2; i++){
            var w = Math.round(ws[2 * i + 1] / N) * 8192 + Math.round(ws[2 * i] / N) + carry;
            ws[i] = w & 67108863;
            if (w < 67108864) carry = 0;
            else carry = w / 67108864 | 0;
        }
        return ws;
    };
    FFTM.prototype.convert13b = function convert13b(ws, len, rws, N) {
        var carry = 0;
        for(var i = 0; i < len; i++){
            carry = carry + (ws[i] | 0);
            rws[2 * i] = carry & 8191;
            carry = carry >>> 13;
            rws[2 * i + 1] = carry & 8191;
            carry = carry >>> 13;
        }
        // Pad with zeroes
        for(i = 2 * len; i < N; ++i)rws[i] = 0;
        assert(carry === 0);
        assert((carry & -8192) === 0);
    };
    FFTM.prototype.stub = function stub(N) {
        var ph = new Array(N);
        for(var i = 0; i < N; i++)ph[i] = 0;
        return ph;
    };
    FFTM.prototype.mulp = function mulp(x, y, out) {
        var N = 2 * this.guessLen13b(x.length, y.length);
        var rbt = this.makeRBT(N);
        var _ = this.stub(N);
        var rws = new Array(N);
        var rwst = new Array(N);
        var iwst = new Array(N);
        var nrws = new Array(N);
        var nrwst = new Array(N);
        var niwst = new Array(N);
        var rmws = out.words;
        rmws.length = N;
        this.convert13b(x.words, x.length, rws, N);
        this.convert13b(y.words, y.length, nrws, N);
        this.transform(rws, _, rwst, iwst, N, rbt);
        this.transform(nrws, _, nrwst, niwst, N, rbt);
        for(var i = 0; i < N; i++){
            var rx = rwst[i] * nrwst[i] - iwst[i] * niwst[i];
            iwst[i] = rwst[i] * niwst[i] + iwst[i] * nrwst[i];
            rwst[i] = rx;
        }
        this.conjugate(rwst, iwst, N);
        this.transform(rwst, iwst, rmws, _, N, rbt);
        this.conjugate(rmws, _, N);
        this.normalize13b(rmws, N);
        out.negative = x.negative ^ y.negative;
        out.length = x.length + y.length;
        return out._strip();
    };
    // Multiply `this` by `num`
    BN.prototype.mul = function mul(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return this.mulTo(num, out);
    };
    // Multiply employing FFT
    BN.prototype.mulf = function mulf(num) {
        var out = new BN(null);
        out.words = new Array(this.length + num.length);
        return jumboMulTo(this, num, out);
    };
    // In-place Multiplication
    BN.prototype.imul = function imul(num) {
        return this.clone().mulTo(num, this);
    };
    BN.prototype.imuln = function imuln(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(typeof num === 'number');
        assert(num < 67108864);
        // Carry
        var carry = 0;
        for(var i = 0; i < this.length; i++){
            var w = (this.words[i] | 0) * num;
            var lo = (w & 67108863) + (carry & 67108863);
            carry >>= 26;
            carry += w / 67108864 | 0;
            // NOTE: lo is 27bit maximum
            carry += lo >>> 26;
            this.words[i] = lo & 67108863;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.muln = function muln(num) {
        return this.clone().imuln(num);
    };
    // `this` * `this`
    BN.prototype.sqr = function sqr() {
        return this.mul(this);
    };
    // `this` * `this` in-place
    BN.prototype.isqr = function isqr() {
        return this.imul(this.clone());
    };
    // Math.pow(`this`, `num`)
    BN.prototype.pow = function pow(num) {
        var w = toBitArray(num);
        if (w.length === 0) return new BN(1);
        // Skip leading zeroes
        var res = this;
        for(var i = 0; i < w.length; i++, res = res.sqr()){
            if (w[i] !== 0) break;
        }
        if ((++i) < w.length) for(var q = res.sqr(); i < w.length; i++, q = q.sqr()){
            if (w[i] === 0) continue;
            res = res.mul(q);
        }
        return res;
    };
    // Shift-left in-place
    BN.prototype.iushln = function iushln(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        var carryMask = 67108863 >>> 26 - r << 26 - r;
        var i;
        if (r !== 0) {
            var carry = 0;
            for(i = 0; i < this.length; i++){
                var newCarry = this.words[i] & carryMask;
                var c = (this.words[i] | 0) - newCarry << r;
                this.words[i] = c | carry;
                carry = newCarry >>> 26 - r;
            }
            if (carry) {
                this.words[i] = carry;
                this.length++;
            }
        }
        if (s !== 0) {
            for(i = this.length - 1; i >= 0; i--)this.words[i + s] = this.words[i];
            for(i = 0; i < s; i++)this.words[i] = 0;
            this.length += s;
        }
        return this._strip();
    };
    BN.prototype.ishln = function ishln(bits) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushln(bits);
    };
    // Shift-right in-place
    // NOTE: `hint` is a lowest bit before trailing zeroes
    // NOTE: if `extended` is present - it will be filled with destroyed bits
    BN.prototype.iushrn = function iushrn(bits, hint, extended) {
        assert(typeof bits === 'number' && bits >= 0);
        var h;
        if (hint) h = (hint - hint % 26) / 26;
        else h = 0;
        var r = bits % 26;
        var s = Math.min((bits - r) / 26, this.length);
        var mask = 67108863 ^ 67108863 >>> r << r;
        var maskedWords = extended;
        h -= s;
        h = Math.max(0, h);
        // Extended mode, copy masked part
        if (maskedWords) {
            for(var i = 0; i < s; i++)maskedWords.words[i] = this.words[i];
            maskedWords.length = s;
        }
        if (s === 0) ;
        else if (this.length > s) {
            this.length -= s;
            for(i = 0; i < this.length; i++)this.words[i] = this.words[i + s];
        } else {
            this.words[0] = 0;
            this.length = 1;
        }
        var carry = 0;
        for(i = this.length - 1; i >= 0 && (carry !== 0 || i >= h); i--){
            var word = this.words[i] | 0;
            this.words[i] = carry << 26 - r | word >>> r;
            carry = word & mask;
        }
        // Push carried bits as a mask
        if (maskedWords && carry !== 0) maskedWords.words[maskedWords.length++] = carry;
        if (this.length === 0) {
            this.words[0] = 0;
            this.length = 1;
        }
        return this._strip();
    };
    BN.prototype.ishrn = function ishrn(bits, hint, extended) {
        // TODO(indutny): implement me
        assert(this.negative === 0);
        return this.iushrn(bits, hint, extended);
    };
    // Shift-left
    BN.prototype.shln = function shln(bits) {
        return this.clone().ishln(bits);
    };
    BN.prototype.ushln = function ushln(bits) {
        return this.clone().iushln(bits);
    };
    // Shift-right
    BN.prototype.shrn = function shrn(bits) {
        return this.clone().ishrn(bits);
    };
    BN.prototype.ushrn = function ushrn(bits) {
        return this.clone().iushrn(bits);
    };
    // Test if n bit is set
    BN.prototype.testn = function testn(bit) {
        assert(typeof bit === 'number' && bit >= 0);
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) return false;
        // Check bit and return
        var w = this.words[s];
        return !!(w & q);
    };
    // Return only lowers bits of number (in-place)
    BN.prototype.imaskn = function imaskn(bits) {
        assert(typeof bits === 'number' && bits >= 0);
        var r = bits % 26;
        var s = (bits - r) / 26;
        assert(this.negative === 0, 'imaskn works only with positive numbers');
        if (this.length <= s) return this;
        if (r !== 0) s++;
        this.length = Math.min(s, this.length);
        if (r !== 0) {
            var mask = 67108863 ^ 67108863 >>> r << r;
            this.words[this.length - 1] &= mask;
        }
        return this._strip();
    };
    // Return only lowers bits of number
    BN.prototype.maskn = function maskn(bits) {
        return this.clone().imaskn(bits);
    };
    // Add plain number `num` to `this`
    BN.prototype.iaddn = function iaddn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.isubn(-num);
        // Possible sign change
        if (this.negative !== 0) {
            if (this.length === 1 && (this.words[0] | 0) <= num) {
                this.words[0] = num - (this.words[0] | 0);
                this.negative = 0;
                return this;
            }
            this.negative = 0;
            this.isubn(num);
            this.negative = 1;
            return this;
        }
        // Add without checks
        return this._iaddn(num);
    };
    BN.prototype._iaddn = function _iaddn(num) {
        this.words[0] += num;
        // Carry
        for(var i = 0; i < this.length && this.words[i] >= 67108864; i++){
            this.words[i] -= 67108864;
            if (i === this.length - 1) this.words[i + 1] = 1;
            else this.words[i + 1]++;
        }
        this.length = Math.max(this.length, i + 1);
        return this;
    };
    // Subtract plain number `num` from `this`
    BN.prototype.isubn = function isubn(num) {
        assert(typeof num === 'number');
        assert(num < 67108864);
        if (num < 0) return this.iaddn(-num);
        if (this.negative !== 0) {
            this.negative = 0;
            this.iaddn(num);
            this.negative = 1;
            return this;
        }
        this.words[0] -= num;
        if (this.length === 1 && this.words[0] < 0) {
            this.words[0] = -this.words[0];
            this.negative = 1;
        } else // Carry
        for(var i = 0; i < this.length && this.words[i] < 0; i++){
            this.words[i] += 67108864;
            this.words[i + 1] -= 1;
        }
        return this._strip();
    };
    BN.prototype.addn = function addn(num) {
        return this.clone().iaddn(num);
    };
    BN.prototype.subn = function subn(num) {
        return this.clone().isubn(num);
    };
    BN.prototype.iabs = function iabs() {
        this.negative = 0;
        return this;
    };
    BN.prototype.abs = function abs() {
        return this.clone().iabs();
    };
    BN.prototype._ishlnsubmul = function _ishlnsubmul(num, mul1, shift) {
        var len = num.length + shift;
        var i;
        this._expand(len);
        var w;
        var carry = 0;
        for(i = 0; i < num.length; i++){
            w = (this.words[i + shift] | 0) + carry;
            var right = (num.words[i] | 0) * mul1;
            w -= right & 67108863;
            carry = (w >> 26) - (right / 67108864 | 0);
            this.words[i + shift] = w & 67108863;
        }
        for(; i < this.length - shift; i++){
            w = (this.words[i + shift] | 0) + carry;
            carry = w >> 26;
            this.words[i + shift] = w & 67108863;
        }
        if (carry === 0) return this._strip();
        // Subtraction overflow
        assert(carry === -1);
        carry = 0;
        for(i = 0; i < this.length; i++){
            w = -(this.words[i] | 0) + carry;
            carry = w >> 26;
            this.words[i] = w & 67108863;
        }
        this.negative = 1;
        return this._strip();
    };
    BN.prototype._wordDiv = function _wordDiv(num, mode) {
        var shift = this.length - num.length;
        var a = this.clone();
        var b = num;
        // Normalize
        var bhi = b.words[b.length - 1] | 0;
        var bhiBits = this._countBits(bhi);
        shift = 26 - bhiBits;
        if (shift !== 0) {
            b = b.ushln(shift);
            a.iushln(shift);
            bhi = b.words[b.length - 1] | 0;
        }
        // Initialize quotient
        var m = a.length - b.length;
        var q;
        if (mode !== 'mod') {
            q = new BN(null);
            q.length = m + 1;
            q.words = new Array(q.length);
            for(var i = 0; i < q.length; i++)q.words[i] = 0;
        }
        var diff = a.clone()._ishlnsubmul(b, 1, m);
        if (diff.negative === 0) {
            a = diff;
            if (q) q.words[m] = 1;
        }
        for(var j = m - 1; j >= 0; j--){
            var qj = (a.words[b.length + j] | 0) * 67108864 + (a.words[b.length + j - 1] | 0);
            // NOTE: (qj / bhi) is (0x3ffffff * 0x4000000 + 0x3ffffff) / 0x2000000 max
            // (0x7ffffff)
            qj = Math.min(qj / bhi | 0, 67108863);
            a._ishlnsubmul(b, qj, j);
            while(a.negative !== 0){
                qj--;
                a.negative = 0;
                a._ishlnsubmul(b, 1, j);
                if (!a.isZero()) a.negative ^= 1;
            }
            if (q) q.words[j] = qj;
        }
        if (q) q._strip();
        a._strip();
        // Denormalize
        if (mode !== 'div' && shift !== 0) a.iushrn(shift);
        return {
            div: q || null,
            mod: a
        };
    };
    // NOTE: 1) `mode` can be set to `mod` to request mod only,
    //       to `div` to request div only, or be absent to
    //       request both div & mod
    //       2) `positive` is true if unsigned mod is requested
    BN.prototype.divmod = function divmod(num, mode, positive) {
        assert(!num.isZero());
        if (this.isZero()) return {
            div: new BN(0),
            mod: new BN(0)
        };
        var div, mod, res;
        if (this.negative !== 0 && num.negative === 0) {
            res = this.neg().divmod(num, mode);
            if (mode !== 'mod') div = res.div.neg();
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.iadd(num);
            }
            return {
                div: div,
                mod: mod
            };
        }
        if (this.negative === 0 && num.negative !== 0) {
            res = this.divmod(num.neg(), mode);
            if (mode !== 'mod') div = res.div.neg();
            return {
                div: div,
                mod: res.mod
            };
        }
        if ((this.negative & num.negative) !== 0) {
            res = this.neg().divmod(num.neg(), mode);
            if (mode !== 'div') {
                mod = res.mod.neg();
                if (positive && mod.negative !== 0) mod.isub(num);
            }
            return {
                div: res.div,
                mod: mod
            };
        }
        // Both numbers are positive at this point
        // Strip both numbers to approximate shift value
        if (num.length > this.length || this.cmp(num) < 0) return {
            div: new BN(0),
            mod: this
        };
        // Very short reduction
        if (num.length === 1) {
            if (mode === 'div') return {
                div: this.divn(num.words[0]),
                mod: null
            };
            if (mode === 'mod') return {
                div: null,
                mod: new BN(this.modrn(num.words[0]))
            };
            return {
                div: this.divn(num.words[0]),
                mod: new BN(this.modrn(num.words[0]))
            };
        }
        return this._wordDiv(num, mode);
    };
    // Find `this` / `num`
    BN.prototype.div = function div(num) {
        return this.divmod(num, 'div', false).div;
    };
    // Find `this` % `num`
    BN.prototype.mod = function mod(num) {
        return this.divmod(num, 'mod', false).mod;
    };
    BN.prototype.umod = function umod(num) {
        return this.divmod(num, 'mod', true).mod;
    };
    // Find Round(`this` / `num`)
    BN.prototype.divRound = function divRound(num) {
        var dm = this.divmod(num);
        // Fast case - exact division
        if (dm.mod.isZero()) return dm.div;
        var mod1 = dm.div.negative !== 0 ? dm.mod.isub(num) : dm.mod;
        var half = num.ushrn(1);
        var r2 = num.andln(1);
        var cmp = mod1.cmp(half);
        // Round down
        if (cmp < 0 || r2 === 1 && cmp === 0) return dm.div;
        // Round up
        return dm.div.negative !== 0 ? dm.div.isubn(1) : dm.div.iaddn(1);
    };
    BN.prototype.modrn = function modrn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var p = 67108864 % num;
        var acc = 0;
        for(var i = this.length - 1; i >= 0; i--)acc = (p * acc + (this.words[i] | 0)) % num;
        return isNegNum ? -acc : acc;
    };
    // WARNING: DEPRECATED
    BN.prototype.modn = function modn(num) {
        return this.modrn(num);
    };
    // In-place division by number
    BN.prototype.idivn = function idivn(num) {
        var isNegNum = num < 0;
        if (isNegNum) num = -num;
        assert(num <= 67108863);
        var carry = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var w = (this.words[i] | 0) + carry * 67108864;
            this.words[i] = w / num | 0;
            carry = w % num;
        }
        this._strip();
        return isNegNum ? this.ineg() : this;
    };
    BN.prototype.divn = function divn(num) {
        return this.clone().idivn(num);
    };
    BN.prototype.egcd = function egcd(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var x = this;
        var y = p.clone();
        if (x.negative !== 0) x = x.umod(p);
        else x = x.clone();
        // A * x + B * y = x
        var A = new BN(1);
        var B = new BN(0);
        // C * x + D * y = y
        var C = new BN(0);
        var D = new BN(1);
        var g = 0;
        while(x.isEven() && y.isEven()){
            x.iushrn(1);
            y.iushrn(1);
            ++g;
        }
        var yp = y.clone();
        var xp = x.clone();
        while(!x.isZero()){
            for(var i = 0, im = 1; (x.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                x.iushrn(i);
                while((i--) > 0){
                    if (A.isOdd() || B.isOdd()) {
                        A.iadd(yp);
                        B.isub(xp);
                    }
                    A.iushrn(1);
                    B.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (y.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                y.iushrn(j);
                while((j--) > 0){
                    if (C.isOdd() || D.isOdd()) {
                        C.iadd(yp);
                        D.isub(xp);
                    }
                    C.iushrn(1);
                    D.iushrn(1);
                }
            }
            if (x.cmp(y) >= 0) {
                x.isub(y);
                A.isub(C);
                B.isub(D);
            } else {
                y.isub(x);
                C.isub(A);
                D.isub(B);
            }
        }
        return {
            a: C,
            b: D,
            gcd: y.iushln(g)
        };
    };
    // This is reduced incarnation of the binary EEA
    // above, designated to invert members of the
    // _prime_ fields F(p) at a maximal speed
    BN.prototype._invmp = function _invmp(p) {
        assert(p.negative === 0);
        assert(!p.isZero());
        var a = this;
        var b = p.clone();
        if (a.negative !== 0) a = a.umod(p);
        else a = a.clone();
        var x1 = new BN(1);
        var x2 = new BN(0);
        var delta = b.clone();
        while(a.cmpn(1) > 0 && b.cmpn(1) > 0){
            for(var i = 0, im = 1; (a.words[0] & im) === 0 && i < 26; ++i, im <<= 1);
            if (i > 0) {
                a.iushrn(i);
                while((i--) > 0){
                    if (x1.isOdd()) x1.iadd(delta);
                    x1.iushrn(1);
                }
            }
            for(var j = 0, jm = 1; (b.words[0] & jm) === 0 && j < 26; ++j, jm <<= 1);
            if (j > 0) {
                b.iushrn(j);
                while((j--) > 0){
                    if (x2.isOdd()) x2.iadd(delta);
                    x2.iushrn(1);
                }
            }
            if (a.cmp(b) >= 0) {
                a.isub(b);
                x1.isub(x2);
            } else {
                b.isub(a);
                x2.isub(x1);
            }
        }
        var res;
        if (a.cmpn(1) === 0) res = x1;
        else res = x2;
        if (res.cmpn(0) < 0) res.iadd(p);
        return res;
    };
    BN.prototype.gcd = function gcd(num) {
        if (this.isZero()) return num.abs();
        if (num.isZero()) return this.abs();
        var a = this.clone();
        var b = num.clone();
        a.negative = 0;
        b.negative = 0;
        // Remove common factor of two
        for(var shift = 0; a.isEven() && b.isEven(); shift++){
            a.iushrn(1);
            b.iushrn(1);
        }
        do {
            while(a.isEven())a.iushrn(1);
            while(b.isEven())b.iushrn(1);
            var r = a.cmp(b);
            if (r < 0) {
                // Swap `a` and `b` to make `a` always bigger than `b`
                var t = a;
                a = b;
                b = t;
            } else if (r === 0 || b.cmpn(1) === 0) break;
            a.isub(b);
        }while (true)
        return b.iushln(shift);
    };
    // Invert number in the field F(num)
    BN.prototype.invm = function invm(num) {
        return this.egcd(num).a.umod(num);
    };
    BN.prototype.isEven = function isEven() {
        return (this.words[0] & 1) === 0;
    };
    BN.prototype.isOdd = function isOdd() {
        return (this.words[0] & 1) === 1;
    };
    // And first word and num
    BN.prototype.andln = function andln(num) {
        return this.words[0] & num;
    };
    // Increment at the bit position in-line
    BN.prototype.bincn = function bincn(bit) {
        assert(typeof bit === 'number');
        var r = bit % 26;
        var s = (bit - r) / 26;
        var q = 1 << r;
        // Fast case: bit is much higher than all existing words
        if (this.length <= s) {
            this._expand(s + 1);
            this.words[s] |= q;
            return this;
        }
        // Add bit and propagate, if needed
        var carry = q;
        for(var i = s; carry !== 0 && i < this.length; i++){
            var w = this.words[i] | 0;
            w += carry;
            carry = w >>> 26;
            w &= 67108863;
            this.words[i] = w;
        }
        if (carry !== 0) {
            this.words[i] = carry;
            this.length++;
        }
        return this;
    };
    BN.prototype.isZero = function isZero() {
        return this.length === 1 && this.words[0] === 0;
    };
    BN.prototype.cmpn = function cmpn(num) {
        var negative = num < 0;
        if (this.negative !== 0 && !negative) return -1;
        if (this.negative === 0 && negative) return 1;
        this._strip();
        var res;
        if (this.length > 1) res = 1;
        else {
            if (negative) num = -num;
            assert(num <= 67108863, 'Number is too big');
            var w = this.words[0] | 0;
            res = w === num ? 0 : w < num ? -1 : 1;
        }
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Compare two numbers and return:
    // 1 - if `this` > `num`
    // 0 - if `this` == `num`
    // -1 - if `this` < `num`
    BN.prototype.cmp = function cmp(num) {
        if (this.negative !== 0 && num.negative === 0) return -1;
        if (this.negative === 0 && num.negative !== 0) return 1;
        var res = this.ucmp(num);
        if (this.negative !== 0) return -res | 0;
        return res;
    };
    // Unsigned comparison
    BN.prototype.ucmp = function ucmp(num) {
        // At this point both numbers have the same sign
        if (this.length > num.length) return 1;
        if (this.length < num.length) return -1;
        var res = 0;
        for(var i = this.length - 1; i >= 0; i--){
            var a = this.words[i] | 0;
            var b = num.words[i] | 0;
            if (a === b) continue;
            if (a < b) res = -1;
            else if (a > b) res = 1;
            break;
        }
        return res;
    };
    BN.prototype.gtn = function gtn(num) {
        return this.cmpn(num) === 1;
    };
    BN.prototype.gt = function gt(num) {
        return this.cmp(num) === 1;
    };
    BN.prototype.gten = function gten(num) {
        return this.cmpn(num) >= 0;
    };
    BN.prototype.gte = function gte(num) {
        return this.cmp(num) >= 0;
    };
    BN.prototype.ltn = function ltn(num) {
        return this.cmpn(num) === -1;
    };
    BN.prototype.lt = function lt(num) {
        return this.cmp(num) === -1;
    };
    BN.prototype.lten = function lten(num) {
        return this.cmpn(num) <= 0;
    };
    BN.prototype.lte = function lte(num) {
        return this.cmp(num) <= 0;
    };
    BN.prototype.eqn = function eqn(num) {
        return this.cmpn(num) === 0;
    };
    BN.prototype.eq = function eq(num) {
        return this.cmp(num) === 0;
    };
    //
    // A reduce context, could be using montgomery or something better, depending
    // on the `m` itself.
    //
    BN.red = function red(num) {
        return new Red(num);
    };
    BN.prototype.toRed = function toRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        assert(this.negative === 0, 'red works only with positives');
        return ctx.convertTo(this)._forceRed(ctx);
    };
    BN.prototype.fromRed = function fromRed() {
        assert(this.red, 'fromRed works only with numbers in reduction context');
        return this.red.convertFrom(this);
    };
    BN.prototype._forceRed = function _forceRed(ctx) {
        this.red = ctx;
        return this;
    };
    BN.prototype.forceRed = function forceRed(ctx) {
        assert(!this.red, 'Already a number in reduction context');
        return this._forceRed(ctx);
    };
    BN.prototype.redAdd = function redAdd(num) {
        assert(this.red, 'redAdd works only with red numbers');
        return this.red.add(this, num);
    };
    BN.prototype.redIAdd = function redIAdd(num) {
        assert(this.red, 'redIAdd works only with red numbers');
        return this.red.iadd(this, num);
    };
    BN.prototype.redSub = function redSub(num) {
        assert(this.red, 'redSub works only with red numbers');
        return this.red.sub(this, num);
    };
    BN.prototype.redISub = function redISub(num) {
        assert(this.red, 'redISub works only with red numbers');
        return this.red.isub(this, num);
    };
    BN.prototype.redShl = function redShl(num) {
        assert(this.red, 'redShl works only with red numbers');
        return this.red.shl(this, num);
    };
    BN.prototype.redMul = function redMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.mul(this, num);
    };
    BN.prototype.redIMul = function redIMul(num) {
        assert(this.red, 'redMul works only with red numbers');
        this.red._verify2(this, num);
        return this.red.imul(this, num);
    };
    BN.prototype.redSqr = function redSqr() {
        assert(this.red, 'redSqr works only with red numbers');
        this.red._verify1(this);
        return this.red.sqr(this);
    };
    BN.prototype.redISqr = function redISqr() {
        assert(this.red, 'redISqr works only with red numbers');
        this.red._verify1(this);
        return this.red.isqr(this);
    };
    // Square root over p
    BN.prototype.redSqrt = function redSqrt() {
        assert(this.red, 'redSqrt works only with red numbers');
        this.red._verify1(this);
        return this.red.sqrt(this);
    };
    BN.prototype.redInvm = function redInvm() {
        assert(this.red, 'redInvm works only with red numbers');
        this.red._verify1(this);
        return this.red.invm(this);
    };
    // Return negative clone of `this` % `red modulo`
    BN.prototype.redNeg = function redNeg() {
        assert(this.red, 'redNeg works only with red numbers');
        this.red._verify1(this);
        return this.red.neg(this);
    };
    BN.prototype.redPow = function redPow(num) {
        assert(this.red && !num.red, 'redPow(normalNum)');
        this.red._verify1(this);
        return this.red.pow(this, num);
    };
    // Prime numbers with efficient reduction
    var primes = {
        k256: null,
        p224: null,
        p192: null,
        p25519: null
    };
    // Pseudo-Mersenne prime
    function MPrime(name, p) {
        // P = 2 ^ N - K
        this.name = name;
        this.p = new BN(p, 16);
        this.n = this.p.bitLength();
        this.k = new BN(1).iushln(this.n).isub(this.p);
        this.tmp = this._tmp();
    }
    MPrime.prototype._tmp = function _tmp() {
        var tmp = new BN(null);
        tmp.words = new Array(Math.ceil(this.n / 13));
        return tmp;
    };
    MPrime.prototype.ireduce = function ireduce(num) {
        // Assumes that `num` is less than `P^2`
        // num = HI * (2 ^ N - K) + HI * K + LO = HI * K + LO (mod P)
        var r = num;
        var rlen;
        do {
            this.split(r, this.tmp);
            r = this.imulK(r);
            r = r.iadd(this.tmp);
            rlen = r.bitLength();
        }while (rlen > this.n)
        var cmp1 = rlen < this.n ? -1 : r.ucmp(this.p);
        if (cmp1 === 0) {
            r.words[0] = 0;
            r.length = 1;
        } else if (cmp1 > 0) r.isub(this.p);
        else if (r.strip !== undefined) // r is a BN v4 instance
        r.strip();
        else // r is a BN v5 instance
        r._strip();
        return r;
    };
    MPrime.prototype.split = function split(input, out) {
        input.iushrn(this.n, 0, out);
    };
    MPrime.prototype.imulK = function imulK(num) {
        return num.imul(this.k);
    };
    function K256() {
        MPrime.call(this, 'k256', 'ffffffff ffffffff ffffffff ffffffff ffffffff ffffffff fffffffe fffffc2f');
    }
    inherits(K256, MPrime);
    K256.prototype.split = function split1(input, output) {
        // 256 = 9 * 26 + 22
        var mask = 4194303;
        var outLen = Math.min(input.length, 9);
        for(var i = 0; i < outLen; i++)output.words[i] = input.words[i];
        output.length = outLen;
        if (input.length <= 9) {
            input.words[0] = 0;
            input.length = 1;
            return;
        }
        // Shift by 9 limbs
        var prev = input.words[9];
        output.words[output.length++] = prev & mask;
        for(i = 10; i < input.length; i++){
            var next = input.words[i] | 0;
            input.words[i - 10] = (next & mask) << 4 | prev >>> 22;
            prev = next;
        }
        prev >>>= 22;
        input.words[i - 10] = prev;
        if (prev === 0 && input.length > 10) input.length -= 10;
        else input.length -= 9;
    };
    K256.prototype.imulK = function imulK1(num) {
        // K = 0x1000003d1 = [ 0x40, 0x3d1 ]
        num.words[num.length] = 0;
        num.words[num.length + 1] = 0;
        num.length += 2;
        // bounded at: 0x40 * 0x3ffffff + 0x3d0 = 0x100000390
        var lo = 0;
        for(var i = 0; i < num.length; i++){
            var w = num.words[i] | 0;
            lo += w * 977;
            num.words[i] = lo & 67108863;
            lo = w * 64 + (lo / 67108864 | 0);
        }
        // Fast length reduction
        if (num.words[num.length - 1] === 0) {
            num.length--;
            if (num.words[num.length - 1] === 0) num.length--;
        }
        return num;
    };
    function P224() {
        MPrime.call(this, 'p224', 'ffffffff ffffffff ffffffff ffffffff 00000000 00000000 00000001');
    }
    inherits(P224, MPrime);
    function P192() {
        MPrime.call(this, 'p192', 'ffffffff ffffffff ffffffff fffffffe ffffffff ffffffff');
    }
    inherits(P192, MPrime);
    function P25519() {
        // 2 ^ 255 - 19
        MPrime.call(this, '25519', '7fffffffffffffff ffffffffffffffff ffffffffffffffff ffffffffffffffed');
    }
    inherits(P25519, MPrime);
    P25519.prototype.imulK = function imulK2(num) {
        // K = 0x13
        var carry = 0;
        for(var i = 0; i < num.length; i++){
            var hi = (num.words[i] | 0) * 19 + carry;
            var lo = hi & 67108863;
            hi >>>= 26;
            num.words[i] = lo;
            carry = hi;
        }
        if (carry !== 0) num.words[num.length++] = carry;
        return num;
    };
    // Exported mostly for testing purposes, use plain name instead
    BN._prime = function prime(name) {
        // Cached version of prime
        if (primes[name]) return primes[name];
        var prime;
        if (name === 'k256') prime = new K256();
        else if (name === 'p224') prime = new P224();
        else if (name === 'p192') prime = new P192();
        else if (name === 'p25519') prime = new P25519();
        else throw new Error('Unknown prime ' + name);
        primes[name] = prime;
        return prime;
    };
    //
    // Base reduction engine
    //
    function Red(m) {
        if (typeof m === 'string') {
            var prime1 = BN._prime(m);
            this.m = prime1.p;
            this.prime = prime1;
        } else {
            assert(m.gtn(1), 'modulus must be greater than 1');
            this.m = m;
            this.prime = null;
        }
    }
    Red.prototype._verify1 = function _verify1(a) {
        assert(a.negative === 0, 'red works only with positives');
        assert(a.red, 'red works only with red numbers');
    };
    Red.prototype._verify2 = function _verify2(a, b) {
        assert((a.negative | b.negative) === 0, 'red works only with positives');
        assert(a.red && a.red === b.red, 'red works only with red numbers');
    };
    Red.prototype.imod = function imod(a) {
        if (this.prime) return this.prime.ireduce(a)._forceRed(this);
        move(a, a.umod(this.m)._forceRed(this));
        return a;
    };
    Red.prototype.neg = function neg1(a) {
        if (a.isZero()) return a.clone();
        return this.m.sub(a)._forceRed(this);
    };
    Red.prototype.add = function add1(a, b) {
        this._verify2(a, b);
        var res = a.add(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res._forceRed(this);
    };
    Red.prototype.iadd = function iadd1(a, b) {
        this._verify2(a, b);
        var res = a.iadd(b);
        if (res.cmp(this.m) >= 0) res.isub(this.m);
        return res;
    };
    Red.prototype.sub = function sub1(a, b) {
        this._verify2(a, b);
        var res = a.sub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res._forceRed(this);
    };
    Red.prototype.isub = function isub1(a, b) {
        this._verify2(a, b);
        var res = a.isub(b);
        if (res.cmpn(0) < 0) res.iadd(this.m);
        return res;
    };
    Red.prototype.shl = function shl(a, num) {
        this._verify1(a);
        return this.imod(a.ushln(num));
    };
    Red.prototype.imul = function imul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.imul(b));
    };
    Red.prototype.mul = function mul1(a, b) {
        this._verify2(a, b);
        return this.imod(a.mul(b));
    };
    Red.prototype.isqr = function isqr1(a) {
        return this.imul(a, a.clone());
    };
    Red.prototype.sqr = function sqr1(a) {
        return this.mul(a, a);
    };
    Red.prototype.sqrt = function sqrt(a) {
        if (a.isZero()) return a.clone();
        var mod3 = this.m.andln(3);
        assert(mod3 % 2 === 1);
        // Fast case
        if (mod3 === 3) {
            var pow1 = this.m.add(new BN(1)).iushrn(2);
            return this.pow(a, pow1);
        }
        // Tonelli-Shanks algorithm (Totally unoptimized and slow)
        //
        // Find Q and S, that Q * 2 ^ S = (P - 1)
        var q = this.m.subn(1);
        var s = 0;
        while(!q.isZero() && q.andln(1) === 0){
            s++;
            q.iushrn(1);
        }
        assert(!q.isZero());
        var one = new BN(1).toRed(this);
        var nOne = one.redNeg();
        // Find quadratic non-residue
        // NOTE: Max is such because of generalized Riemann hypothesis.
        var lpow = this.m.subn(1).iushrn(1);
        var z = this.m.bitLength();
        z = new BN(2 * z * z).toRed(this);
        while(this.pow(z, lpow).cmp(nOne) !== 0)z.redIAdd(nOne);
        var c = this.pow(z, q);
        var r = this.pow(a, q.addn(1).iushrn(1));
        var t = this.pow(a, q);
        var m = s;
        while(t.cmp(one) !== 0){
            var tmp = t;
            for(var i = 0; tmp.cmp(one) !== 0; i++)tmp = tmp.redSqr();
            assert(i < m);
            var b = this.pow(c, new BN(1).iushln(m - i - 1));
            r = r.redMul(b);
            c = b.redSqr();
            t = t.redMul(c);
            m = i;
        }
        return r;
    };
    Red.prototype.invm = function invm1(a) {
        var inv = a._invmp(this.m);
        if (inv.negative !== 0) {
            inv.negative = 0;
            return this.imod(inv).redNeg();
        } else return this.imod(inv);
    };
    Red.prototype.pow = function pow2(a, num) {
        if (num.isZero()) return new BN(1).toRed(this);
        if (num.cmpn(1) === 0) return a.clone();
        var windowSize = 4;
        var wnd = new Array(1 << windowSize);
        wnd[0] = new BN(1).toRed(this);
        wnd[1] = a;
        for(var i = 2; i < wnd.length; i++)wnd[i] = this.mul(wnd[i - 1], a);
        var res = wnd[0];
        var current = 0;
        var currentLen = 0;
        var start = num.bitLength() % 26;
        if (start === 0) start = 26;
        for(i = num.length - 1; i >= 0; i--){
            var word = num.words[i];
            for(var j = start - 1; j >= 0; j--){
                var bit = word >> j & 1;
                if (res !== wnd[0]) res = this.sqr(res);
                if (bit === 0 && current === 0) {
                    currentLen = 0;
                    continue;
                }
                current <<= 1;
                current |= bit;
                currentLen++;
                if (currentLen !== windowSize && (i !== 0 || j !== 0)) continue;
                res = this.mul(res, wnd[current]);
                currentLen = 0;
                current = 0;
            }
            start = 26;
        }
        return res;
    };
    Red.prototype.convertTo = function convertTo(num) {
        var r = num.umod(this.m);
        return r === num ? r.clone() : r;
    };
    Red.prototype.convertFrom = function convertFrom(num) {
        var res = num.clone();
        res.red = null;
        return res;
    };
    //
    // Montgomery method engine
    //
    BN.mont = function mont(num) {
        return new Mont(num);
    };
    function Mont(m) {
        Red.call(this, m);
        this.shift = this.m.bitLength();
        if (this.shift % 26 !== 0) this.shift += 26 - this.shift % 26;
        this.r = new BN(1).iushln(this.shift);
        this.r2 = this.imod(this.r.sqr());
        this.rinv = this.r._invmp(this.m);
        this.minv = this.rinv.mul(this.r).isubn(1).div(this.m);
        this.minv = this.minv.umod(this.r);
        this.minv = this.r.sub(this.minv);
    }
    inherits(Mont, Red);
    Mont.prototype.convertTo = function convertTo1(num) {
        return this.imod(num.ushln(this.shift));
    };
    Mont.prototype.convertFrom = function convertFrom1(num) {
        var r = this.imod(num.mul(this.rinv));
        r.red = null;
        return r;
    };
    Mont.prototype.imul = function imul2(a, b) {
        if (a.isZero() || b.isZero()) {
            a.words[0] = 0;
            a.length = 1;
            return a;
        }
        var t = a.imul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.mul = function mul2(a, b) {
        if (a.isZero() || b.isZero()) return new BN(0)._forceRed(this);
        var t = a.mul(b);
        var c = t.maskn(this.shift).mul(this.minv).imaskn(this.shift).mul(this.m);
        var u = t.isub(c).iushrn(this.shift);
        var res = u;
        if (u.cmp(this.m) >= 0) res = u.isub(this.m);
        else if (u.cmpn(0) < 0) res = u.iadd(this.m);
        return res._forceRed(this);
    };
    Mont.prototype.invm = function invm2(a) {
        // (AR)^-1 * R^2 = (A^-1 * R^-1) * R^2 = A^-1 * R
        var res = this.imod(a._invmp(this.m).mul(this.r2));
        return res._forceRed(this);
    };
})(typeof module === 'undefined' || module, this);

},{"buffer":"lnuW3"}],"gZwyO":[function(require,module,exports) {
var asn1 = require('./asn1');
var aesid = require('./aesid.json');
var fixProc = require('./fixProc');
var ciphers = require('browserify-aes');
var compat = require('pbkdf2');
var Buffer = require('safe-buffer').Buffer;
module.exports = parseKeys;
function parseKeys(buffer) {
    var password;
    if (typeof buffer === 'object' && !Buffer.isBuffer(buffer)) {
        password = buffer.passphrase;
        buffer = buffer.key;
    }
    if (typeof buffer === 'string') buffer = Buffer.from(buffer);
    var stripped = fixProc(buffer, password);
    var type = stripped.tag;
    var data = stripped.data;
    var subtype, ndata;
    switch(type){
        case 'CERTIFICATE':
            ndata = asn1.certificate.decode(data, 'der').tbsCertificate.subjectPublicKeyInfo;
        // falls through
        case 'PUBLIC KEY':
            if (!ndata) ndata = asn1.PublicKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPublicKey.decode(ndata.subjectPublicKey.data, 'der');
                case '1.2.840.10045.2.1':
                    ndata.subjectPrivateKey = ndata.subjectPublicKey;
                    return {
                        type: 'ec',
                        data: ndata
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.pub_key = asn1.DSAparam.decode(ndata.subjectPublicKey.data, 'der');
                    return {
                        type: 'dsa',
                        data: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'ENCRYPTED PRIVATE KEY':
            data = asn1.EncryptedPrivateKey.decode(data, 'der');
            data = decrypt(data, password);
        // falls through
        case 'PRIVATE KEY':
            ndata = asn1.PrivateKey.decode(data, 'der');
            subtype = ndata.algorithm.algorithm.join('.');
            switch(subtype){
                case '1.2.840.113549.1.1.1':
                    return asn1.RSAPrivateKey.decode(ndata.subjectPrivateKey, 'der');
                case '1.2.840.10045.2.1':
                    return {
                        curve: ndata.algorithm.curve,
                        privateKey: asn1.ECPrivateKey.decode(ndata.subjectPrivateKey, 'der').privateKey
                    };
                case '1.2.840.10040.4.1':
                    ndata.algorithm.params.priv_key = asn1.DSAparam.decode(ndata.subjectPrivateKey, 'der');
                    return {
                        type: 'dsa',
                        params: ndata.algorithm.params
                    };
                default:
                    throw new Error('unknown key id ' + subtype);
            }
        // throw new Error('unknown key type ' + type)
        case 'RSA PUBLIC KEY':
            return asn1.RSAPublicKey.decode(data, 'der');
        case 'RSA PRIVATE KEY':
            return asn1.RSAPrivateKey.decode(data, 'der');
        case 'DSA PRIVATE KEY':
            return {
                type: 'dsa',
                params: asn1.DSAPrivateKey.decode(data, 'der')
            };
        case 'EC PRIVATE KEY':
            data = asn1.ECPrivateKey.decode(data, 'der');
            return {
                curve: data.parameters.value,
                privateKey: data.privateKey
            };
        default:
            throw new Error('unknown key type ' + type);
    }
}
parseKeys.signature = asn1.signature;
function decrypt(data, password) {
    var salt = data.algorithm.decrypt.kde.kdeparams.salt;
    var iters = parseInt(data.algorithm.decrypt.kde.kdeparams.iters.toString(), 10);
    var algo = aesid[data.algorithm.decrypt.cipher.algo.join('.')];
    var iv = data.algorithm.decrypt.cipher.iv;
    var cipherText = data.subjectPrivateKey;
    var keylen = parseInt(algo.split('-')[1], 10) / 8;
    var key = compat.pbkdf2Sync(password, salt, iters, keylen, 'sha1');
    var cipher = ciphers.createDecipheriv(algo, key, iv);
    var out = [];
    out.push(cipher.update(cipherText));
    out.push(cipher.final());
    return Buffer.concat(out);
}

},{"./asn1":"j7a9O","./aesid.json":"khJyf","./fixProc":"ams9x","browserify-aes":"VjFDn","pbkdf2":"S22GI","safe-buffer":"7V1Cd"}],"j7a9O":[function(require,module,exports) {
// from https://github.com/indutny/self-signed/blob/gh-pages/lib/asn1.js
// Fedor, you are amazing.
'use strict';
var asn1 = require('asn1.js');
exports.certificate = require('./certificate');
var RSAPrivateKey = asn1.define('RSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('modulus').int(), this.key('publicExponent').int(), this.key('privateExponent').int(), this.key('prime1').int(), this.key('prime2').int(), this.key('exponent1').int(), this.key('exponent2').int(), this.key('coefficient').int());
});
exports.RSAPrivateKey = RSAPrivateKey;
var RSAPublicKey = asn1.define('RSAPublicKey', function() {
    this.seq().obj(this.key('modulus').int(), this.key('publicExponent').int());
});
exports.RSAPublicKey = RSAPublicKey;
var PublicKey = asn1.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
exports.PublicKey = PublicKey;
var AlgorithmIdentifier = asn1.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('none').null_().optional(), this.key('curve').objid().optional(), this.key('params').seq().obj(this.key('p').int(), this.key('q').int(), this.key('g').int()).optional());
});
var PrivateKeyInfo = asn1.define('PrivateKeyInfo', function() {
    this.seq().obj(this.key('version').int(), this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPrivateKey').octstr());
});
exports.PrivateKey = PrivateKeyInfo;
var EncryptedPrivateKeyInfo = asn1.define('EncryptedPrivateKeyInfo', function() {
    this.seq().obj(this.key('algorithm').seq().obj(this.key('id').objid(), this.key('decrypt').seq().obj(this.key('kde').seq().obj(this.key('id').objid(), this.key('kdeparams').seq().obj(this.key('salt').octstr(), this.key('iters').int())), this.key('cipher').seq().obj(this.key('algo').objid(), this.key('iv').octstr()))), this.key('subjectPrivateKey').octstr());
});
exports.EncryptedPrivateKey = EncryptedPrivateKeyInfo;
var DSAPrivateKey = asn1.define('DSAPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('p').int(), this.key('q').int(), this.key('g').int(), this.key('pub_key').int(), this.key('priv_key').int());
});
exports.DSAPrivateKey = DSAPrivateKey;
exports.DSAparam = asn1.define('DSAparam', function() {
    this.int();
});
var ECPrivateKey = asn1.define('ECPrivateKey', function() {
    this.seq().obj(this.key('version').int(), this.key('privateKey').octstr(), this.key('parameters').optional().explicit(0).use(ECParameters), this.key('publicKey').optional().explicit(1).bitstr());
});
exports.ECPrivateKey = ECPrivateKey;
var ECParameters = asn1.define('ECParameters', function() {
    this.choice({
        namedCurve: this.objid()
    });
});
exports.signature = asn1.define('signature', function() {
    this.seq().obj(this.key('r').int(), this.key('s').int());
});

},{"asn1.js":"fMZ2s","./certificate":"60vqc"}],"fMZ2s":[function(require,module,exports) {
'use strict';
const asn1 = exports;
asn1.bignum = require('bn.js');
asn1.define = require('./asn1/api').define;
asn1.base = require('./asn1/base');
asn1.constants = require('./asn1/constants');
asn1.decoders = require('./asn1/decoders');
asn1.encoders = require('./asn1/encoders');

},{"bn.js":"3VXSG","./asn1/api":"9d6HA","./asn1/base":"1bx45","./asn1/constants":"fLSko","./asn1/decoders":"bQrHk","./asn1/encoders":"jZpwN"}],"9d6HA":[function(require,module,exports) {
'use strict';
const encoders = require('./encoders');
const decoders = require('./decoders');
const inherits = require('inherits');
const api = exports;
api.define = function define(name, body) {
    return new Entity(name, body);
};
function Entity(name, body) {
    this.name = name;
    this.body = body;
    this.decoders = {
    };
    this.encoders = {
    };
}
Entity.prototype._createNamed = function createNamed(Base) {
    const name = this.name;
    function Generated(entity) {
        this._initNamed(entity, name);
    }
    inherits(Generated, Base);
    Generated.prototype._initNamed = function _initNamed(entity, name1) {
        Base.call(this, entity, name1);
    };
    return new Generated(this);
};
Entity.prototype._getDecoder = function _getDecoder(enc) {
    enc = enc || 'der';
    // Lazily create decoder
    if (!this.decoders.hasOwnProperty(enc)) this.decoders[enc] = this._createNamed(decoders[enc]);
    return this.decoders[enc];
};
Entity.prototype.decode = function decode(data, enc, options) {
    return this._getDecoder(enc).decode(data, options);
};
Entity.prototype._getEncoder = function _getEncoder(enc) {
    enc = enc || 'der';
    // Lazily create encoder
    if (!this.encoders.hasOwnProperty(enc)) this.encoders[enc] = this._createNamed(encoders[enc]);
    return this.encoders[enc];
};
Entity.prototype.encode = function encode(data, enc, /* internal */ reporter) {
    return this._getEncoder(enc).encode(data, reporter);
};

},{"./encoders":"jZpwN","./decoders":"bQrHk","inherits":"gmJTw"}],"jZpwN":[function(require,module,exports) {
'use strict';
const encoders = exports;
encoders.der = require('./der');
encoders.pem = require('./pem');

},{"./der":"kWOC5","./pem":"bbvQR"}],"kWOC5":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const Node1 = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DEREncoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DEREncoder;
DEREncoder.prototype.encode = function encode(data, reporter) {
    return this.tree._encode(data, reporter).join();
};
// Tree methods
function DERNode(parent) {
    Node1.call(this, 'der', parent);
}
inherits(DERNode, Node1);
DERNode.prototype._encodeComposite = function encodeComposite(tag, primitive, cls, content) {
    const encodedTag = encodeTag(tag, primitive, cls, this.reporter);
    // Short form
    if (content.length < 128) {
        const header = Buffer.alloc(2);
        header[0] = encodedTag;
        header[1] = content.length;
        return this._createEncoderBuffer([
            header,
            content
        ]);
    }
    // Long form
    // Count octets required to store length
    let lenOctets = 1;
    for(let i = content.length; i >= 256; i >>= 8)lenOctets++;
    const header = Buffer.alloc(2 + lenOctets);
    header[0] = encodedTag;
    header[1] = 128 | lenOctets;
    for(let i1 = 1 + lenOctets, j = content.length; j > 0; i1--, j >>= 8)header[i1] = j & 255;
    return this._createEncoderBuffer([
        header,
        content
    ]);
};
DERNode.prototype._encodeStr = function encodeStr(str, tag) {
    if (tag === 'bitstr') return this._createEncoderBuffer([
        str.unused | 0,
        str.data
    ]);
    else if (tag === 'bmpstr') {
        const buf = Buffer.alloc(str.length * 2);
        for(let i = 0; i < str.length; i++)buf.writeUInt16BE(str.charCodeAt(i), i * 2);
        return this._createEncoderBuffer(buf);
    } else if (tag === 'numstr') {
        if (!this._isNumstr(str)) return this.reporter.error("Encoding of string type: numstr supports only digits and space");
        return this._createEncoderBuffer(str);
    } else if (tag === 'printstr') {
        if (!this._isPrintstr(str)) return this.reporter.error("Encoding of string type: printstr supports only latin upper and lower case letters, digits, space, apostrophe, left and rigth parenthesis, plus sign, comma, hyphen, dot, slash, colon, equal sign, question mark");
        return this._createEncoderBuffer(str);
    } else if (/str$/.test(tag)) return this._createEncoderBuffer(str);
    else if (tag === 'objDesc') return this._createEncoderBuffer(str);
    else return this.reporter.error('Encoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._encodeObjid = function encodeObjid(id, values, relative) {
    if (typeof id === 'string') {
        if (!values) return this.reporter.error('string objid given, but no values map found');
        if (!values.hasOwnProperty(id)) return this.reporter.error('objid not found in values map');
        id = values[id].split(/[\s.]+/g);
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    } else if (Array.isArray(id)) {
        id = id.slice();
        for(let i = 0; i < id.length; i++)id[i] |= 0;
    }
    if (!Array.isArray(id)) return this.reporter.error("objid() should be either array or string, got: " + JSON.stringify(id));
    if (!relative) {
        if (id[1] >= 40) return this.reporter.error('Second objid identifier OOB');
        id.splice(0, 2, id[0] * 40 + id[1]);
    }
    // Count number of octets
    let size = 0;
    for(let i = 0; i < id.length; i++){
        let ident = id[i];
        for(size++; ident >= 128; ident >>= 7)size++;
    }
    const objid = Buffer.alloc(size);
    let offset = objid.length - 1;
    for(let i1 = id.length - 1; i1 >= 0; i1--){
        let ident = id[i1];
        objid[offset--] = ident & 127;
        while((ident >>= 7) > 0)objid[offset--] = 128 | ident & 127;
    }
    return this._createEncoderBuffer(objid);
};
function two(num) {
    if (num < 10) return '0' + num;
    else return num;
}
DERNode.prototype._encodeTime = function encodeTime(time, tag) {
    let str;
    const date = new Date(time);
    if (tag === 'gentime') str = [
        two(date.getUTCFullYear()),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else if (tag === 'utctime') str = [
        two(date.getUTCFullYear() % 100),
        two(date.getUTCMonth() + 1),
        two(date.getUTCDate()),
        two(date.getUTCHours()),
        two(date.getUTCMinutes()),
        two(date.getUTCSeconds()),
        'Z'
    ].join('');
    else this.reporter.error('Encoding ' + tag + ' time is not supported yet');
    return this._encodeStr(str, 'octstr');
};
DERNode.prototype._encodeNull = function encodeNull() {
    return this._createEncoderBuffer('');
};
DERNode.prototype._encodeInt = function encodeInt(num, values) {
    if (typeof num === 'string') {
        if (!values) return this.reporter.error('String int or enum given, but no values map');
        if (!values.hasOwnProperty(num)) return this.reporter.error('Values map doesn\'t contain: ' + JSON.stringify(num));
        num = values[num];
    }
    // Bignum, assume big endian
    if (typeof num !== 'number' && !Buffer.isBuffer(num)) {
        const numArray = num.toArray();
        if (!num.sign && numArray[0] & 128) numArray.unshift(0);
        num = Buffer.from(numArray);
    }
    if (Buffer.isBuffer(num)) {
        let size = num.length;
        if (num.length === 0) size++;
        const out = Buffer.alloc(size);
        num.copy(out);
        if (num.length === 0) out[0] = 0;
        return this._createEncoderBuffer(out);
    }
    if (num < 128) return this._createEncoderBuffer(num);
    if (num < 256) return this._createEncoderBuffer([
        0,
        num
    ]);
    let size = 1;
    for(let i = num; i >= 256; i >>= 8)size++;
    const out = new Array(size);
    for(let i1 = out.length - 1; i1 >= 0; i1--){
        out[i1] = num & 255;
        num >>= 8;
    }
    if (out[0] & 128) out.unshift(0);
    return this._createEncoderBuffer(Buffer.from(out));
};
DERNode.prototype._encodeBool = function encodeBool(value) {
    return this._createEncoderBuffer(value ? 255 : 0);
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getEncoder('der').tree;
};
DERNode.prototype._skipDefault = function skipDefault(dataBuffer, reporter, parent) {
    const state = this._baseState;
    let i;
    if (state['default'] === null) return false;
    const data = dataBuffer.join();
    if (state.defaultBuffer === undefined) state.defaultBuffer = this._encodeValue(state['default'], reporter, parent).join();
    if (data.length !== state.defaultBuffer.length) return false;
    for(i = 0; i < data.length; i++)if (data[i] !== state.defaultBuffer[i]) return false;
    return true;
};
// Utility methods
function encodeTag(tag, primitive, cls, reporter) {
    let res;
    if (tag === 'seqof') tag = 'seq';
    else if (tag === 'setof') tag = 'set';
    if (der.tagByName.hasOwnProperty(tag)) res = der.tagByName[tag];
    else if (typeof tag === 'number' && (tag | 0) === tag) res = tag;
    else return reporter.error('Unknown tag: ' + tag);
    if (res >= 31) return reporter.error('Multi-octet tag encoding unsupported');
    if (!primitive) res |= 32;
    res |= der.tagClassByName[cls || 'universal'] << 6;
    return res;
}

},{"inherits":"gmJTw","safer-buffer":"8lSUN","../base/node":"9OtZE","../constants/der":"4XTb6"}],"8lSUN":[function(require,module,exports) {
var process = require("process");
/* eslint-disable node/no-deprecated-api */ 'use strict';
var buffer = require('buffer');
var Buffer = buffer.Buffer;
var safer = {
};
var key;
for(key in buffer){
    if (!buffer.hasOwnProperty(key)) continue;
    if (key === 'SlowBuffer' || key === 'Buffer') continue;
    safer[key] = buffer[key];
}
var Safer = safer.Buffer = {
};
for(key in Buffer){
    if (!Buffer.hasOwnProperty(key)) continue;
    if (key === 'allocUnsafe' || key === 'allocUnsafeSlow') continue;
    Safer[key] = Buffer[key];
}
safer.Buffer.prototype = Buffer.prototype;
if (!Safer.from || Safer.from === Uint8Array.from) Safer.from = function(value, encodingOrOffset, length) {
    if (typeof value === 'number') throw new TypeError('The "value" argument must not be of type number. Received type ' + typeof value);
    if (value && typeof value.length === 'undefined') throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, or Array-like Object. Received type ' + typeof value);
    return Buffer(value, encodingOrOffset, length);
};
if (!Safer.alloc) Safer.alloc = function(size, fill, encoding) {
    if (typeof size !== 'number') throw new TypeError('The "size" argument must be of type number. Received type ' + typeof size);
    if (size < 0 || size >= 2147483648) throw new RangeError('The value "' + size + '" is invalid for option "size"');
    var buf = Buffer(size);
    if (!fill || fill.length === 0) buf.fill(0);
    else if (typeof encoding === 'string') buf.fill(fill, encoding);
    else buf.fill(fill);
    return buf;
};
if (!safer.kStringMaxLength) try {
    safer.kStringMaxLength = process.binding('buffer').kStringMaxLength;
} catch (e) {
// we can't determine kStringMaxLength in environments where process.binding
// is unsupported, so let's not set it
}
if (!safer.constants) {
    safer.constants = {
        MAX_LENGTH: safer.kMaxLength
    };
    if (safer.kStringMaxLength) safer.constants.MAX_STRING_LENGTH = safer.kStringMaxLength;
}
module.exports = safer;

},{"process":"glFWE","buffer":"kPwYH"}],"9OtZE":[function(require,module,exports) {
'use strict';
const Reporter = require('../base/reporter').Reporter;
const EncoderBuffer = require('../base/buffer').EncoderBuffer;
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const assert = require('minimalistic-assert');
// Supported tags
const tags = [
    'seq',
    'seqof',
    'set',
    'setof',
    'objid',
    'bool',
    'gentime',
    'utctime',
    'null_',
    'enum',
    'int',
    'objDesc',
    'bitstr',
    'bmpstr',
    'charstr',
    'genstr',
    'graphstr',
    'ia5str',
    'iso646str',
    'numstr',
    'octstr',
    'printstr',
    't61str',
    'unistr',
    'utf8str',
    'videostr'
];
// Public methods list
const methods = [
    'key',
    'obj',
    'use',
    'optional',
    'explicit',
    'implicit',
    'def',
    'choice',
    'any',
    'contains'
].concat(tags);
// Overrided methods list
const overrided = [
    '_peekTag',
    '_decodeTag',
    '_use',
    '_decodeStr',
    '_decodeObjid',
    '_decodeTime',
    '_decodeNull',
    '_decodeInt',
    '_decodeBool',
    '_decodeList',
    '_encodeComposite',
    '_encodeStr',
    '_encodeObjid',
    '_encodeTime',
    '_encodeNull',
    '_encodeInt',
    '_encodeBool'
];
function Node1(enc, parent, name) {
    const state = {
    };
    this._baseState = state;
    state.name = name;
    state.enc = enc;
    state.parent = parent || null;
    state.children = null;
    // State
    state.tag = null;
    state.args = null;
    state.reverseArgs = null;
    state.choice = null;
    state.optional = false;
    state.any = false;
    state.obj = false;
    state.use = null;
    state.useDecoder = null;
    state.key = null;
    state['default'] = null;
    state.explicit = null;
    state.implicit = null;
    state.contains = null;
    // Should create new instance on each method
    if (!state.parent) {
        state.children = [];
        this._wrap();
    }
}
module.exports = Node1;
const stateProps = [
    'enc',
    'parent',
    'children',
    'tag',
    'args',
    'reverseArgs',
    'choice',
    'optional',
    'any',
    'obj',
    'use',
    'alteredUse',
    'key',
    'default',
    'explicit',
    'implicit',
    'contains'
];
Node1.prototype.clone = function clone() {
    const state = this._baseState;
    const cstate = {
    };
    stateProps.forEach(function(prop) {
        cstate[prop] = state[prop];
    });
    const res = new this.constructor(cstate.parent);
    res._baseState = cstate;
    return res;
};
Node1.prototype._wrap = function wrap() {
    const state = this._baseState;
    methods.forEach(function(method) {
        this[method] = function _wrappedMethod() {
            const clone1 = new this.constructor(this);
            state.children.push(clone1);
            return clone1[method].apply(clone1, arguments);
        };
    }, this);
};
Node1.prototype._init = function init(body) {
    const state = this._baseState;
    assert(state.parent === null);
    body.call(this);
    // Filter children
    state.children = state.children.filter(function(child) {
        return child._baseState.parent === this;
    }, this);
    assert.equal(state.children.length, 1, 'Root node can have only one child');
};
Node1.prototype._useArgs = function useArgs(args) {
    const state = this._baseState;
    // Filter children and args
    const children = args.filter(function(arg) {
        return arg instanceof this.constructor;
    }, this);
    args = args.filter(function(arg) {
        return !(arg instanceof this.constructor);
    }, this);
    if (children.length !== 0) {
        assert(state.children === null);
        state.children = children;
        // Replace parent to maintain backward link
        children.forEach(function(child) {
            child._baseState.parent = this;
        }, this);
    }
    if (args.length !== 0) {
        assert(state.args === null);
        state.args = args;
        state.reverseArgs = args.map(function(arg) {
            if (typeof arg !== 'object' || arg.constructor !== Object) return arg;
            const res = {
            };
            Object.keys(arg).forEach(function(key) {
                if (key == (key | 0)) key |= 0;
                const value = arg[key];
                res[value] = key;
            });
            return res;
        });
    }
};
//
// Overrided methods
//
overrided.forEach(function(method) {
    Node1.prototype[method] = function _overrided() {
        const state = this._baseState;
        throw new Error(method + ' not implemented for encoding: ' + state.enc);
    };
});
//
// Public methods
//
tags.forEach(function(tag) {
    Node1.prototype[tag] = function _tagMethod() {
        const state = this._baseState;
        const args = Array.prototype.slice.call(arguments);
        assert(state.tag === null);
        state.tag = tag;
        this._useArgs(args);
        return this;
    };
});
Node1.prototype.use = function use(item) {
    assert(item);
    const state = this._baseState;
    assert(state.use === null);
    state.use = item;
    return this;
};
Node1.prototype.optional = function optional() {
    const state = this._baseState;
    state.optional = true;
    return this;
};
Node1.prototype.def = function def(val) {
    const state = this._baseState;
    assert(state['default'] === null);
    state['default'] = val;
    state.optional = true;
    return this;
};
Node1.prototype.explicit = function explicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.explicit = num;
    return this;
};
Node1.prototype.implicit = function implicit(num) {
    const state = this._baseState;
    assert(state.explicit === null && state.implicit === null);
    state.implicit = num;
    return this;
};
Node1.prototype.obj = function obj() {
    const state = this._baseState;
    const args = Array.prototype.slice.call(arguments);
    state.obj = true;
    if (args.length !== 0) this._useArgs(args);
    return this;
};
Node1.prototype.key = function key(newKey) {
    const state = this._baseState;
    assert(state.key === null);
    state.key = newKey;
    return this;
};
Node1.prototype.any = function any() {
    const state = this._baseState;
    state.any = true;
    return this;
};
Node1.prototype.choice = function choice(obj1) {
    const state = this._baseState;
    assert(state.choice === null);
    state.choice = obj1;
    this._useArgs(Object.keys(obj1).map(function(key1) {
        return obj1[key1];
    }));
    return this;
};
Node1.prototype.contains = function contains(item) {
    const state = this._baseState;
    assert(state.use === null);
    state.contains = item;
    return this;
};
//
// Decoding
//
Node1.prototype._decode = function decode(input, options) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return input.wrapResult(state.children[0]._decode(input, options));
    let result = state['default'];
    let present = true;
    let prevKey = null;
    if (state.key !== null) prevKey = input.enterKey(state.key);
    // Check if tag is there
    if (state.optional) {
        let tag = null;
        if (state.explicit !== null) tag = state.explicit;
        else if (state.implicit !== null) tag = state.implicit;
        else if (state.tag !== null) tag = state.tag;
        if (tag === null && !state.any) {
            // Trial and Error
            const save = input.save();
            try {
                if (state.choice === null) this._decodeGeneric(state.tag, input, options);
                else this._decodeChoice(input, options);
                present = true;
            } catch (e) {
                present = false;
            }
            input.restore(save);
        } else {
            present = this._peekTag(input, tag, state.any);
            if (input.isError(present)) return present;
        }
    }
    // Push object on stack
    let prevObj;
    if (state.obj && present) prevObj = input.enterObject();
    if (present) {
        // Unwrap explicit values
        if (state.explicit !== null) {
            const explicit1 = this._decodeTag(input, state.explicit);
            if (input.isError(explicit1)) return explicit1;
            input = explicit1;
        }
        const start = input.offset;
        // Unwrap implicit and normal values
        if (state.use === null && state.choice === null) {
            let save;
            if (state.any) save = input.save();
            const body = this._decodeTag(input, state.implicit !== null ? state.implicit : state.tag, state.any);
            if (input.isError(body)) return body;
            if (state.any) result = input.raw(save);
            else input = body;
        }
        if (options && options.track && state.tag !== null) options.track(input.path(), start, input.length, 'tagged');
        if (options && options.track && state.tag !== null) options.track(input.path(), input.offset, input.length, 'content');
        // Select proper method for tag
        if (state.any) ;
        else if (state.choice === null) result = this._decodeGeneric(state.tag, input, options);
        else result = this._decodeChoice(input, options);
        if (input.isError(result)) return result;
        // Decode children
        if (!state.any && state.choice === null && state.children !== null) state.children.forEach(function decodeChildren(child) {
            // NOTE: We are ignoring errors here, to let parser continue with other
            // parts of encoded data
            child._decode(input, options);
        });
        // Decode contained/encoded by schema, only in bit or octet strings
        if (state.contains && (state.tag === 'octstr' || state.tag === 'bitstr')) {
            const data = new DecoderBuffer(result);
            result = this._getUse(state.contains, input._reporterState.obj)._decode(data, options);
        }
    }
    // Pop object
    if (state.obj && present) result = input.leaveObject(prevObj);
    // Set key
    if (state.key !== null && (result !== null || present === true)) input.leaveKey(prevKey, state.key, result);
    else if (prevKey !== null) input.exitKey(prevKey);
    return result;
};
Node1.prototype._decodeGeneric = function decodeGeneric(tag, input, options) {
    const state = this._baseState;
    if (tag === 'seq' || tag === 'set') return null;
    if (tag === 'seqof' || tag === 'setof') return this._decodeList(input, tag, state.args[0], options);
    else if (/str$/.test(tag)) return this._decodeStr(input, tag, options);
    else if (tag === 'objid' && state.args) return this._decodeObjid(input, state.args[0], state.args[1], options);
    else if (tag === 'objid') return this._decodeObjid(input, null, null, options);
    else if (tag === 'gentime' || tag === 'utctime') return this._decodeTime(input, tag, options);
    else if (tag === 'null_') return this._decodeNull(input, options);
    else if (tag === 'bool') return this._decodeBool(input, options);
    else if (tag === 'objDesc') return this._decodeStr(input, tag, options);
    else if (tag === 'int' || tag === 'enum') return this._decodeInt(input, state.args && state.args[0], options);
    if (state.use !== null) return this._getUse(state.use, input._reporterState.obj)._decode(input, options);
    else return input.error('unknown tag: ' + tag);
};
Node1.prototype._getUse = function _getUse(entity, obj1) {
    const state = this._baseState;
    // Create altered use decoder if implicit is set
    state.useDecoder = this._use(entity, obj1);
    assert(state.useDecoder._baseState.parent === null);
    state.useDecoder = state.useDecoder._baseState.children[0];
    if (state.implicit !== state.useDecoder._baseState.implicit) {
        state.useDecoder = state.useDecoder.clone();
        state.useDecoder._baseState.implicit = state.implicit;
    }
    return state.useDecoder;
};
Node1.prototype._decodeChoice = function decodeChoice(input, options) {
    const state = this._baseState;
    let result = null;
    let match = false;
    Object.keys(state.choice).some(function(key1) {
        const save = input.save();
        const node = state.choice[key1];
        try {
            const value = node._decode(input, options);
            if (input.isError(value)) return false;
            result = {
                type: key1,
                value: value
            };
            match = true;
        } catch (e) {
            input.restore(save);
            return false;
        }
        return true;
    }, this);
    if (!match) return input.error('Choice not matched');
    return result;
};
//
// Encoding
//
Node1.prototype._createEncoderBuffer = function createEncoderBuffer(data) {
    return new EncoderBuffer(data, this.reporter);
};
Node1.prototype._encode = function encode(data, reporter, parent) {
    const state = this._baseState;
    if (state['default'] !== null && state['default'] === data) return;
    const result = this._encodeValue(data, reporter, parent);
    if (result === undefined) return;
    if (this._skipDefault(result, reporter, parent)) return;
    return result;
};
Node1.prototype._encodeValue = function encode1(data, reporter, parent) {
    const state = this._baseState;
    // Decode root node
    if (state.parent === null) return state.children[0]._encode(data, reporter || new Reporter());
    let result = null;
    // Set reporter to share it with a child class
    this.reporter = reporter;
    // Check if data is there
    if (state.optional && data === undefined) {
        if (state['default'] !== null) data = state['default'];
        else return;
    }
    // Encode children first
    let content = null;
    let primitive = false;
    if (state.any) // Anything that was given is translated to buffer
    result = this._createEncoderBuffer(data);
    else if (state.choice) result = this._encodeChoice(data, reporter);
    else if (state.contains) {
        content = this._getUse(state.contains, parent)._encode(data, reporter);
        primitive = true;
    } else if (state.children) {
        content = state.children.map(function(child) {
            if (child._baseState.tag === 'null_') return child._encode(null, reporter, data);
            if (child._baseState.key === null) return reporter.error('Child should have a key');
            const prevKey = reporter.enterKey(child._baseState.key);
            if (typeof data !== 'object') return reporter.error('Child expected, but input is not object');
            const res = child._encode(data[child._baseState.key], reporter, data);
            reporter.leaveKey(prevKey);
            return res;
        }, this).filter(function(child) {
            return child;
        });
        content = this._createEncoderBuffer(content);
    } else {
        if (state.tag === 'seqof' || state.tag === 'setof') {
            // TODO(indutny): this should be thrown on DSL level
            if (!(state.args && state.args.length === 1)) return reporter.error('Too many args for : ' + state.tag);
            if (!Array.isArray(data)) return reporter.error('seqof/setof, but data is not Array');
            const child = this.clone();
            child._baseState.implicit = null;
            content = this._createEncoderBuffer(data.map(function(item) {
                const state1 = this._baseState;
                return this._getUse(state1.args[0], data)._encode(item, reporter);
            }, child));
        } else if (state.use !== null) result = this._getUse(state.use, parent)._encode(data, reporter);
        else {
            content = this._encodePrimitive(state.tag, data);
            primitive = true;
        }
    }
    // Encode data itself
    if (!state.any && state.choice === null) {
        const tag = state.implicit !== null ? state.implicit : state.tag;
        const cls = state.implicit === null ? 'universal' : 'context';
        if (tag === null) {
            if (state.use === null) reporter.error('Tag could be omitted only for .use()');
        } else if (state.use === null) result = this._encodeComposite(tag, primitive, cls, content);
    }
    // Wrap in explicit
    if (state.explicit !== null) result = this._encodeComposite(state.explicit, false, 'context', result);
    return result;
};
Node1.prototype._encodeChoice = function encodeChoice(data, reporter) {
    const state = this._baseState;
    const node = state.choice[data.type];
    if (!node) assert(false, data.type + ' not found in ' + JSON.stringify(Object.keys(state.choice)));
    return node._encode(data.value, reporter);
};
Node1.prototype._encodePrimitive = function encodePrimitive(tag, data) {
    const state = this._baseState;
    if (/str$/.test(tag)) return this._encodeStr(data, tag);
    else if (tag === 'objid' && state.args) return this._encodeObjid(data, state.reverseArgs[0], state.args[1]);
    else if (tag === 'objid') return this._encodeObjid(data, null, null);
    else if (tag === 'gentime' || tag === 'utctime') return this._encodeTime(data, tag);
    else if (tag === 'null_') return this._encodeNull();
    else if (tag === 'int' || tag === 'enum') return this._encodeInt(data, state.args && state.reverseArgs[0]);
    else if (tag === 'bool') return this._encodeBool(data);
    else if (tag === 'objDesc') return this._encodeStr(data, tag);
    else throw new Error('Unsupported tag: ' + tag);
};
Node1.prototype._isNumstr = function isNumstr(str) {
    return /^[0-9 ]*$/.test(str);
};
Node1.prototype._isPrintstr = function isPrintstr(str) {
    return /^[A-Za-z0-9 '()+,-./:=?]*$/.test(str);
};

},{"../base/reporter":"4FiSS","../base/buffer":"6n5RZ","minimalistic-assert":"af22k"}],"4FiSS":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
function Reporter(options) {
    this._reporterState = {
        obj: null,
        path: [],
        options: options || {
        },
        errors: []
    };
}
exports.Reporter = Reporter;
Reporter.prototype.isError = function isError(obj) {
    return obj instanceof ReporterError;
};
Reporter.prototype.save = function save() {
    const state = this._reporterState;
    return {
        obj: state.obj,
        pathLen: state.path.length
    };
};
Reporter.prototype.restore = function restore(data) {
    const state = this._reporterState;
    state.obj = data.obj;
    state.path = state.path.slice(0, data.pathLen);
};
Reporter.prototype.enterKey = function enterKey(key) {
    return this._reporterState.path.push(key);
};
Reporter.prototype.exitKey = function exitKey(index) {
    const state = this._reporterState;
    state.path = state.path.slice(0, index - 1);
};
Reporter.prototype.leaveKey = function leaveKey(index, key, value) {
    const state = this._reporterState;
    this.exitKey(index);
    if (state.obj !== null) state.obj[key] = value;
};
Reporter.prototype.path = function path() {
    return this._reporterState.path.join('/');
};
Reporter.prototype.enterObject = function enterObject() {
    const state = this._reporterState;
    const prev = state.obj;
    state.obj = {
    };
    return prev;
};
Reporter.prototype.leaveObject = function leaveObject(prev) {
    const state = this._reporterState;
    const now = state.obj;
    state.obj = prev;
    return now;
};
Reporter.prototype.error = function error(msg) {
    let err;
    const state = this._reporterState;
    const inherited = msg instanceof ReporterError;
    if (inherited) err = msg;
    else err = new ReporterError(state.path.map(function(elem) {
        return '[' + JSON.stringify(elem) + ']';
    }).join(''), msg.message || msg, msg.stack);
    if (!state.options.partial) throw err;
    if (!inherited) state.errors.push(err);
    return err;
};
Reporter.prototype.wrapResult = function wrapResult(result) {
    const state = this._reporterState;
    if (!state.options.partial) return result;
    return {
        result: this.isError(result) ? null : result,
        errors: state.errors
    };
};
function ReporterError(path1, msg) {
    this.path = path1;
    this.rethrow(msg);
}
inherits(ReporterError, Error);
ReporterError.prototype.rethrow = function rethrow(msg) {
    this.message = msg + ' at: ' + (this.path || '(shallow)');
    if (Error.captureStackTrace) Error.captureStackTrace(this, ReporterError);
    if (!this.stack) try {
        // IE only adds stack when thrown
        throw new Error(this.message);
    } catch (e) {
        this.stack = e.stack;
    }
    return this;
};

},{"inherits":"gmJTw"}],"6n5RZ":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Reporter = require('../base/reporter').Reporter;
const Buffer = require('safer-buffer').Buffer;
function DecoderBuffer(base, options) {
    Reporter.call(this, options);
    if (!Buffer.isBuffer(base)) {
        this.error('Input not Buffer');
        return;
    }
    this.base = base;
    this.offset = 0;
    this.length = base.length;
}
inherits(DecoderBuffer, Reporter);
exports.DecoderBuffer = DecoderBuffer;
DecoderBuffer.isDecoderBuffer = function isDecoderBuffer(data) {
    if (data instanceof DecoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && Buffer.isBuffer(data.base) && data.constructor.name === 'DecoderBuffer' && typeof data.offset === 'number' && typeof data.length === 'number' && typeof data.save === 'function' && typeof data.restore === 'function' && typeof data.isEmpty === 'function' && typeof data.readUInt8 === 'function' && typeof data.skip === 'function' && typeof data.raw === 'function';
    return isCompatible;
};
DecoderBuffer.prototype.save = function save() {
    return {
        offset: this.offset,
        reporter: Reporter.prototype.save.call(this)
    };
};
DecoderBuffer.prototype.restore = function restore(save1) {
    // Return skipped data
    const res = new DecoderBuffer(this.base);
    res.offset = save1.offset;
    res.length = this.offset;
    this.offset = save1.offset;
    Reporter.prototype.restore.call(this, save1.reporter);
    return res;
};
DecoderBuffer.prototype.isEmpty = function isEmpty() {
    return this.offset === this.length;
};
DecoderBuffer.prototype.readUInt8 = function readUInt8(fail) {
    if (this.offset + 1 <= this.length) return this.base.readUInt8(this.offset++, true);
    else return this.error(fail || 'DecoderBuffer overrun');
};
DecoderBuffer.prototype.skip = function skip(bytes, fail) {
    if (!(this.offset + bytes <= this.length)) return this.error(fail || 'DecoderBuffer overrun');
    const res = new DecoderBuffer(this.base);
    // Share reporter state
    res._reporterState = this._reporterState;
    res.offset = this.offset;
    res.length = this.offset + bytes;
    this.offset += bytes;
    return res;
};
DecoderBuffer.prototype.raw = function raw(save1) {
    return this.base.slice(save1 ? save1.offset : this.offset, this.length);
};
function EncoderBuffer(value, reporter) {
    if (Array.isArray(value)) {
        this.length = 0;
        this.value = value.map(function(item) {
            if (!EncoderBuffer.isEncoderBuffer(item)) item = new EncoderBuffer(item, reporter);
            this.length += item.length;
            return item;
        }, this);
    } else if (typeof value === 'number') {
        if (!(0 <= value && value <= 255)) return reporter.error('non-byte EncoderBuffer value');
        this.value = value;
        this.length = 1;
    } else if (typeof value === 'string') {
        this.value = value;
        this.length = Buffer.byteLength(value);
    } else if (Buffer.isBuffer(value)) {
        this.value = value;
        this.length = value.length;
    } else return reporter.error('Unsupported type: ' + typeof value);
}
exports.EncoderBuffer = EncoderBuffer;
EncoderBuffer.isEncoderBuffer = function isEncoderBuffer(data) {
    if (data instanceof EncoderBuffer) return true;
    // Or accept compatible API
    const isCompatible = typeof data === 'object' && data.constructor.name === 'EncoderBuffer' && typeof data.length === 'number' && typeof data.join === 'function';
    return isCompatible;
};
EncoderBuffer.prototype.join = function join(out, offset) {
    if (!out) out = Buffer.alloc(this.length);
    if (!offset) offset = 0;
    if (this.length === 0) return out;
    if (Array.isArray(this.value)) this.value.forEach(function(item) {
        item.join(out, offset);
        offset += item.length;
    });
    else {
        if (typeof this.value === 'number') out[offset] = this.value;
        else if (typeof this.value === 'string') out.write(this.value, offset);
        else if (Buffer.isBuffer(this.value)) this.value.copy(out, offset);
        offset += this.length;
    }
    return out;
};

},{"inherits":"gmJTw","../base/reporter":"4FiSS","safer-buffer":"8lSUN"}],"4XTb6":[function(require,module,exports) {
'use strict';
// Helper
function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
}
exports.tagClass = {
    0: 'universal',
    1: 'application',
    2: 'context',
    3: 'private'
};
exports.tagClassByName = reverse(exports.tagClass);
exports.tag = {
    0: 'end',
    1: 'bool',
    2: 'int',
    3: 'bitstr',
    4: 'octstr',
    5: 'null_',
    6: 'objid',
    7: 'objDesc',
    8: 'external',
    9: 'real',
    10: 'enum',
    11: 'embed',
    12: 'utf8str',
    13: 'relativeOid',
    16: 'seq',
    17: 'set',
    18: 'numstr',
    19: 'printstr',
    20: 't61str',
    21: 'videostr',
    22: 'ia5str',
    23: 'utctime',
    24: 'gentime',
    25: 'graphstr',
    26: 'iso646str',
    27: 'genstr',
    28: 'unistr',
    29: 'charstr',
    30: 'bmpstr'
};
exports.tagByName = reverse(exports.tag);

},{}],"bbvQR":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const DEREncoder = require('./der');
function PEMEncoder(entity) {
    DEREncoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMEncoder, DEREncoder);
module.exports = PEMEncoder;
PEMEncoder.prototype.encode = function encode(data, options) {
    const buf = DEREncoder.prototype.encode.call(this, data);
    const p = buf.toString('base64');
    const out = [
        '-----BEGIN ' + options.label + '-----'
    ];
    for(let i = 0; i < p.length; i += 64)out.push(p.slice(i, i + 64));
    out.push('-----END ' + options.label + '-----');
    return out.join('\n');
};

},{"inherits":"gmJTw","./der":"kWOC5"}],"bQrHk":[function(require,module,exports) {
'use strict';
const decoders = exports;
decoders.der = require('./der');
decoders.pem = require('./pem');

},{"./der":"lTiyy","./pem":"qpAhd"}],"lTiyy":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const bignum = require('bn.js');
const DecoderBuffer = require('../base/buffer').DecoderBuffer;
const Node1 = require('../base/node');
// Import DER constants
const der = require('../constants/der');
function DERDecoder(entity) {
    this.enc = 'der';
    this.name = entity.name;
    this.entity = entity;
    // Construct base tree
    this.tree = new DERNode();
    this.tree._init(entity.body);
}
module.exports = DERDecoder;
DERDecoder.prototype.decode = function decode(data, options) {
    if (!DecoderBuffer.isDecoderBuffer(data)) data = new DecoderBuffer(data, options);
    return this.tree._decode(data, options);
};
// Tree methods
function DERNode(parent) {
    Node1.call(this, 'der', parent);
}
inherits(DERNode, Node1);
DERNode.prototype._peekTag = function peekTag(buffer, tag, any) {
    if (buffer.isEmpty()) return false;
    const state = buffer.save();
    const decodedTag = derDecodeTag(buffer, 'Failed to peek tag: "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    buffer.restore(state);
    return decodedTag.tag === tag || decodedTag.tagStr === tag || decodedTag.tagStr + 'of' === tag || any;
};
DERNode.prototype._decodeTag = function decodeTag(buffer, tag, any) {
    const decodedTag = derDecodeTag(buffer, 'Failed to decode tag of "' + tag + '"');
    if (buffer.isError(decodedTag)) return decodedTag;
    let len = derDecodeLen(buffer, decodedTag.primitive, 'Failed to get length of "' + tag + '"');
    // Failure
    if (buffer.isError(len)) return len;
    if (!any && decodedTag.tag !== tag && decodedTag.tagStr !== tag && decodedTag.tagStr + 'of' !== tag) return buffer.error('Failed to match tag: "' + tag + '"');
    if (decodedTag.primitive || len !== null) return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
    // Indefinite length... find END tag
    const state = buffer.save();
    const res = this._skipUntilEnd(buffer, 'Failed to skip indefinite length body: "' + this.tag + '"');
    if (buffer.isError(res)) return res;
    len = buffer.offset - state.offset;
    buffer.restore(state);
    return buffer.skip(len, 'Failed to match body of: "' + tag + '"');
};
DERNode.prototype._skipUntilEnd = function skipUntilEnd(buffer, fail) {
    for(;;){
        const tag = derDecodeTag(buffer, fail);
        if (buffer.isError(tag)) return tag;
        const len = derDecodeLen(buffer, tag.primitive, fail);
        if (buffer.isError(len)) return len;
        let res;
        if (tag.primitive || len !== null) res = buffer.skip(len);
        else res = this._skipUntilEnd(buffer, fail);
        // Failure
        if (buffer.isError(res)) return res;
        if (tag.tagStr === 'end') break;
    }
};
DERNode.prototype._decodeList = function decodeList(buffer, tag, decoder, options) {
    const result = [];
    while(!buffer.isEmpty()){
        const possibleEnd = this._peekTag(buffer, 'end');
        if (buffer.isError(possibleEnd)) return possibleEnd;
        const res = decoder.decode(buffer, 'der', options);
        if (buffer.isError(res) && possibleEnd) break;
        result.push(res);
    }
    return result;
};
DERNode.prototype._decodeStr = function decodeStr(buffer, tag) {
    if (tag === 'bitstr') {
        const unused = buffer.readUInt8();
        if (buffer.isError(unused)) return unused;
        return {
            unused: unused,
            data: buffer.raw()
        };
    } else if (tag === 'bmpstr') {
        const raw = buffer.raw();
        if (raw.length % 2 === 1) return buffer.error('Decoding of string type: bmpstr length mismatch');
        let str = '';
        for(let i = 0; i < raw.length / 2; i++)str += String.fromCharCode(raw.readUInt16BE(i * 2));
        return str;
    } else if (tag === 'numstr') {
        const numstr = buffer.raw().toString('ascii');
        if (!this._isNumstr(numstr)) return buffer.error("Decoding of string type: numstr unsupported characters");
        return numstr;
    } else if (tag === 'octstr') return buffer.raw();
    else if (tag === 'objDesc') return buffer.raw();
    else if (tag === 'printstr') {
        const printstr = buffer.raw().toString('ascii');
        if (!this._isPrintstr(printstr)) return buffer.error("Decoding of string type: printstr unsupported characters");
        return printstr;
    } else if (/str$/.test(tag)) return buffer.raw().toString();
    else return buffer.error('Decoding of string type: ' + tag + ' unsupported');
};
DERNode.prototype._decodeObjid = function decodeObjid(buffer, values, relative) {
    let result;
    const identifiers = [];
    let ident = 0;
    let subident = 0;
    while(!buffer.isEmpty()){
        subident = buffer.readUInt8();
        ident <<= 7;
        ident |= subident & 127;
        if ((subident & 128) === 0) {
            identifiers.push(ident);
            ident = 0;
        }
    }
    if (subident & 128) identifiers.push(ident);
    const first = identifiers[0] / 40 | 0;
    const second = identifiers[0] % 40;
    if (relative) result = identifiers;
    else result = [
        first,
        second
    ].concat(identifiers.slice(1));
    if (values) {
        let tmp = values[result.join(' ')];
        if (tmp === undefined) tmp = values[result.join('.')];
        if (tmp !== undefined) result = tmp;
    }
    return result;
};
DERNode.prototype._decodeTime = function decodeTime(buffer, tag) {
    const str = buffer.raw().toString();
    let year;
    let mon;
    let day;
    let hour;
    let min;
    let sec;
    if (tag === 'gentime') {
        year = str.slice(0, 4) | 0;
        mon = str.slice(4, 6) | 0;
        day = str.slice(6, 8) | 0;
        hour = str.slice(8, 10) | 0;
        min = str.slice(10, 12) | 0;
        sec = str.slice(12, 14) | 0;
    } else if (tag === 'utctime') {
        year = str.slice(0, 2) | 0;
        mon = str.slice(2, 4) | 0;
        day = str.slice(4, 6) | 0;
        hour = str.slice(6, 8) | 0;
        min = str.slice(8, 10) | 0;
        sec = str.slice(10, 12) | 0;
        if (year < 70) year = 2000 + year;
        else year = 1900 + year;
    } else return buffer.error('Decoding ' + tag + ' time is not supported yet');
    return Date.UTC(year, mon - 1, day, hour, min, sec, 0);
};
DERNode.prototype._decodeNull = function decodeNull() {
    return null;
};
DERNode.prototype._decodeBool = function decodeBool(buffer) {
    const res = buffer.readUInt8();
    if (buffer.isError(res)) return res;
    else return res !== 0;
};
DERNode.prototype._decodeInt = function decodeInt(buffer, values) {
    // Bigint, return as it is (assume big endian)
    const raw = buffer.raw();
    let res = new bignum(raw);
    if (values) res = values[res.toString(10)] || res;
    return res;
};
DERNode.prototype._use = function use(entity, obj) {
    if (typeof entity === 'function') entity = entity(obj);
    return entity._getDecoder('der').tree;
};
// Utility methods
function derDecodeTag(buf, fail) {
    let tag = buf.readUInt8(fail);
    if (buf.isError(tag)) return tag;
    const cls = der.tagClass[tag >> 6];
    const primitive = (tag & 32) === 0;
    // Multi-octet tag - load
    if ((tag & 31) === 31) {
        let oct = tag;
        tag = 0;
        while((oct & 128) === 128){
            oct = buf.readUInt8(fail);
            if (buf.isError(oct)) return oct;
            tag <<= 7;
            tag |= oct & 127;
        }
    } else tag &= 31;
    const tagStr = der.tag[tag];
    return {
        cls: cls,
        primitive: primitive,
        tag: tag,
        tagStr: tagStr
    };
}
function derDecodeLen(buf, primitive, fail) {
    let len = buf.readUInt8(fail);
    if (buf.isError(len)) return len;
    // Indefinite form
    if (!primitive && len === 128) return null;
    // Definite form
    if ((len & 128) === 0) // Short form
    return len;
    // Long form
    const num = len & 127;
    if (num > 4) return buf.error('length octect is too long');
    len = 0;
    for(let i = 0; i < num; i++){
        len <<= 8;
        const j = buf.readUInt8(fail);
        if (buf.isError(j)) return j;
        len |= j;
    }
    return len;
}

},{"inherits":"gmJTw","bn.js":"3VXSG","../base/buffer":"6n5RZ","../base/node":"9OtZE","../constants/der":"4XTb6"}],"qpAhd":[function(require,module,exports) {
'use strict';
const inherits = require('inherits');
const Buffer = require('safer-buffer').Buffer;
const DERDecoder = require('./der');
function PEMDecoder(entity) {
    DERDecoder.call(this, entity);
    this.enc = 'pem';
}
inherits(PEMDecoder, DERDecoder);
module.exports = PEMDecoder;
PEMDecoder.prototype.decode = function decode(data, options) {
    const lines = data.toString().split(/[\r\n]+/g);
    const label = options.label.toUpperCase();
    const re = /^-----(BEGIN|END) ([^-]+)-----$/;
    let start = -1;
    let end = -1;
    for(let i = 0; i < lines.length; i++){
        const match = lines[i].match(re);
        if (match === null) continue;
        if (match[2] !== label) continue;
        if (start === -1) {
            if (match[1] !== 'BEGIN') break;
            start = i;
        } else {
            if (match[1] !== 'END') break;
            end = i;
            break;
        }
    }
    if (start === -1 || end === -1) throw new Error('PEM section not found for: ' + label);
    const base64 = lines.slice(start + 1, end).join('');
    // Remove excessive symbols
    base64.replace(/[^a-z0-9+/=]+/gi, '');
    const input = Buffer.from(base64, 'base64');
    return DERDecoder.prototype.decode.call(this, input, options);
};

},{"inherits":"gmJTw","safer-buffer":"8lSUN","./der":"lTiyy"}],"1bx45":[function(require,module,exports) {
'use strict';
const base = exports;
base.Reporter = require('./reporter').Reporter;
base.DecoderBuffer = require('./buffer').DecoderBuffer;
base.EncoderBuffer = require('./buffer').EncoderBuffer;
base.Node = require('./node');

},{"./reporter":"4FiSS","./buffer":"6n5RZ","./node":"9OtZE"}],"fLSko":[function(require,module,exports) {
'use strict';
const constants = exports;
// Helper
constants._reverse = function reverse(map) {
    const res = {
    };
    Object.keys(map).forEach(function(key) {
        // Convert key to integer if it is stringified
        if ((key | 0) == key) key = key | 0;
        const value = map[key];
        res[value] = key;
    });
    return res;
};
constants.der = require('./der');

},{"./der":"4XTb6"}],"60vqc":[function(require,module,exports) {
// from https://github.com/Rantanen/node-dtls/blob/25a7dc861bda38cfeac93a723500eea4f0ac2e86/Certificate.js
// thanks to @Rantanen
'use strict';
var asn = require('asn1.js');
var Time = asn.define('Time', function() {
    this.choice({
        utcTime: this.utctime(),
        generalTime: this.gentime()
    });
});
var AttributeTypeValue = asn.define('AttributeTypeValue', function() {
    this.seq().obj(this.key('type').objid(), this.key('value').any());
});
var AlgorithmIdentifier = asn.define('AlgorithmIdentifier', function() {
    this.seq().obj(this.key('algorithm').objid(), this.key('parameters').optional(), this.key('curve').objid().optional());
});
var SubjectPublicKeyInfo = asn.define('SubjectPublicKeyInfo', function() {
    this.seq().obj(this.key('algorithm').use(AlgorithmIdentifier), this.key('subjectPublicKey').bitstr());
});
var RelativeDistinguishedName = asn.define('RelativeDistinguishedName', function() {
    this.setof(AttributeTypeValue);
});
var RDNSequence = asn.define('RDNSequence', function() {
    this.seqof(RelativeDistinguishedName);
});
var Name = asn.define('Name', function() {
    this.choice({
        rdnSequence: this.use(RDNSequence)
    });
});
var Validity = asn.define('Validity', function() {
    this.seq().obj(this.key('notBefore').use(Time), this.key('notAfter').use(Time));
});
var Extension = asn.define('Extension', function() {
    this.seq().obj(this.key('extnID').objid(), this.key('critical').bool().def(false), this.key('extnValue').octstr());
});
var TBSCertificate = asn.define('TBSCertificate', function() {
    this.seq().obj(this.key('version').explicit(0).int().optional(), this.key('serialNumber').int(), this.key('signature').use(AlgorithmIdentifier), this.key('issuer').use(Name), this.key('validity').use(Validity), this.key('subject').use(Name), this.key('subjectPublicKeyInfo').use(SubjectPublicKeyInfo), this.key('issuerUniqueID').implicit(1).bitstr().optional(), this.key('subjectUniqueID').implicit(2).bitstr().optional(), this.key('extensions').explicit(3).seqof(Extension).optional());
});
var X509Certificate = asn.define('X509Certificate', function() {
    this.seq().obj(this.key('tbsCertificate').use(TBSCertificate), this.key('signatureAlgorithm').use(AlgorithmIdentifier), this.key('signatureValue').bitstr());
});
module.exports = X509Certificate;

},{"asn1.js":"fMZ2s"}],"khJyf":[function(require,module,exports) {
module.exports = JSON.parse("{\"2.16.840.1.101.3.4.1.1\":\"aes-128-ecb\",\"2.16.840.1.101.3.4.1.2\":\"aes-128-cbc\",\"2.16.840.1.101.3.4.1.3\":\"aes-128-ofb\",\"2.16.840.1.101.3.4.1.4\":\"aes-128-cfb\",\"2.16.840.1.101.3.4.1.21\":\"aes-192-ecb\",\"2.16.840.1.101.3.4.1.22\":\"aes-192-cbc\",\"2.16.840.1.101.3.4.1.23\":\"aes-192-ofb\",\"2.16.840.1.101.3.4.1.24\":\"aes-192-cfb\",\"2.16.840.1.101.3.4.1.41\":\"aes-256-ecb\",\"2.16.840.1.101.3.4.1.42\":\"aes-256-cbc\",\"2.16.840.1.101.3.4.1.43\":\"aes-256-ofb\",\"2.16.840.1.101.3.4.1.44\":\"aes-256-cfb\"}");

},{}],"ams9x":[function(require,module,exports) {
// adapted from https://github.com/apatil/pemstrip
var findProc = /Proc-Type: 4,ENCRYPTED[\n\r]+DEK-Info: AES-((?:128)|(?:192)|(?:256))-CBC,([0-9A-H]+)[\n\r]+([0-9A-z\n\r+/=]+)[\n\r]+/m;
var startRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----/m;
var fullRegex = /^-----BEGIN ((?:.*? KEY)|CERTIFICATE)-----([0-9A-z\n\r+/=]+)-----END \1-----$/m;
var evp = require('evp_bytestokey');
var ciphers = require('browserify-aes');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(okey, password) {
    var key = okey.toString();
    var match = key.match(findProc);
    var decrypted;
    if (!match) {
        var match2 = key.match(fullRegex);
        decrypted = Buffer.from(match2[2].replace(/[\r\n]/g, ''), 'base64');
    } else {
        var suite = 'aes' + match[1];
        var iv = Buffer.from(match[2], 'hex');
        var cipherText = Buffer.from(match[3].replace(/[\r\n]/g, ''), 'base64');
        var cipherKey = evp(password, iv.slice(0, 8), parseInt(match[1], 10)).key;
        var out = [];
        var cipher = ciphers.createDecipheriv(suite, cipherKey, iv);
        out.push(cipher.update(cipherText));
        out.push(cipher.final());
        decrypted = Buffer.concat(out);
    }
    var tag = key.match(startRegex)[1];
    return {
        tag: tag,
        data: decrypted
    };
};

},{"evp_bytestokey":"aoK0Y","browserify-aes":"VjFDn","safe-buffer":"7V1Cd"}],"9Etwf":[function(require,module,exports) {
module.exports = JSON.parse("{\"1.3.132.0.10\":\"secp256k1\",\"1.3.132.0.33\":\"p224\",\"1.2.840.10045.3.1.1\":\"p192\",\"1.2.840.10045.3.1.7\":\"p256\",\"1.3.132.0.34\":\"p384\",\"1.3.132.0.35\":\"p521\"}");

},{}],"eeh0g":[function(require,module,exports) {
// much of this based on https://github.com/indutny/self-signed/blob/gh-pages/lib/rsa.js
var Buffer = require('safe-buffer').Buffer;
var BN = require('bn.js');
var EC = require('elliptic').ec;
var parseKeys = require('parse-asn1');
var curves = require('./curves.json');
function verify(sig, hash, key, signType, tag) {
    var pub = parseKeys(key);
    if (pub.type === 'ec') {
        // rsa keys can be interpreted as ecdsa ones in openssl
        if (signType !== 'ecdsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
        return ecVerify(sig, hash, pub);
    } else if (pub.type === 'dsa') {
        if (signType !== 'dsa') throw new Error('wrong public key type');
        return dsaVerify(sig, hash, pub);
    } else {
        if (signType !== 'rsa' && signType !== 'ecdsa/rsa') throw new Error('wrong public key type');
    }
    hash = Buffer.concat([
        tag,
        hash
    ]);
    var len = pub.modulus.byteLength();
    var pad = [
        1
    ];
    var padNum = 0;
    while(hash.length + pad.length + 2 < len){
        pad.push(255);
        padNum++;
    }
    pad.push(0);
    var i = -1;
    while((++i) < hash.length)pad.push(hash[i]);
    pad = Buffer.from(pad);
    var red = BN.mont(pub.modulus);
    sig = new BN(sig).toRed(red);
    sig = sig.redPow(new BN(pub.publicExponent));
    sig = Buffer.from(sig.fromRed().toArray());
    var out = padNum < 8 ? 1 : 0;
    len = Math.min(sig.length, pad.length);
    if (sig.length !== pad.length) out = 1;
    i = -1;
    while((++i) < len)out |= sig[i] ^ pad[i];
    return out === 0;
}
function ecVerify(sig, hash, pub) {
    var curveId = curves[pub.data.algorithm.curve.join('.')];
    if (!curveId) throw new Error('unknown curve ' + pub.data.algorithm.curve.join('.'));
    var curve = new EC(curveId);
    var pubkey = pub.data.subjectPrivateKey.data;
    return curve.verify(hash, sig, pubkey);
}
function dsaVerify(sig, hash, pub) {
    var p = pub.data.p;
    var q = pub.data.q;
    var g = pub.data.g;
    var y = pub.data.pub_key;
    var unpacked = parseKeys.signature.decode(sig, 'der');
    var s = unpacked.s;
    var r = unpacked.r;
    checkValue(s, q);
    checkValue(r, q);
    var montp = BN.mont(p);
    var w = s.invm(q);
    var v = g.toRed(montp).redPow(new BN(hash).mul(w).mod(q)).fromRed().mul(y.toRed(montp).redPow(r.mul(w).mod(q)).fromRed()).mod(p).mod(q);
    return v.cmp(r) === 0;
}
function checkValue(b, q) {
    if (b.cmpn(0) <= 0) throw new Error('invalid sig');
    if (b.cmp(q) >= q) throw new Error('invalid sig');
}
module.exports = verify;

},{"safe-buffer":"7V1Cd","bn.js":"5l3JP","elliptic":"7VNVr","parse-asn1":"gZwyO","./curves.json":"9Etwf"}],"i1g30":[function(require,module,exports) {
var Buffer = require("buffer").Buffer;
var elliptic = require('elliptic');
var BN = require('bn.js');
module.exports = function createECDH(curve) {
    return new ECDH(curve);
};
var aliases = {
    secp256k1: {
        name: 'secp256k1',
        byteLength: 32
    },
    secp224r1: {
        name: 'p224',
        byteLength: 28
    },
    prime256v1: {
        name: 'p256',
        byteLength: 32
    },
    prime192v1: {
        name: 'p192',
        byteLength: 24
    },
    ed25519: {
        name: 'ed25519',
        byteLength: 32
    },
    secp384r1: {
        name: 'p384',
        byteLength: 48
    },
    secp521r1: {
        name: 'p521',
        byteLength: 66
    }
};
aliases.p224 = aliases.secp224r1;
aliases.p256 = aliases.secp256r1 = aliases.prime256v1;
aliases.p192 = aliases.secp192r1 = aliases.prime192v1;
aliases.p384 = aliases.secp384r1;
aliases.p521 = aliases.secp521r1;
function ECDH(curve) {
    this.curveType = aliases[curve];
    if (!this.curveType) this.curveType = {
        name: curve
    };
    this.curve = new elliptic.ec(this.curveType.name) // eslint-disable-line new-cap
    ;
    this.keys = void 0;
}
ECDH.prototype.generateKeys = function(enc, format) {
    this.keys = this.curve.genKeyPair();
    return this.getPublicKey(enc, format);
};
ECDH.prototype.computeSecret = function(other, inenc, enc) {
    inenc = inenc || 'utf8';
    if (!Buffer.isBuffer(other)) other = new Buffer(other, inenc);
    var otherPub = this.curve.keyFromPublic(other).getPublic();
    var out = otherPub.mul(this.keys.getPrivate()).getX();
    return formatReturnValue(out, enc, this.curveType.byteLength);
};
ECDH.prototype.getPublicKey = function(enc, format) {
    var key = this.keys.getPublic(format === 'compressed', true);
    if (format === 'hybrid') {
        if (key[key.length - 1] % 2) key[0] = 7;
        else key[0] = 6;
    }
    return formatReturnValue(key, enc);
};
ECDH.prototype.getPrivateKey = function(enc) {
    return formatReturnValue(this.keys.getPrivate(), enc);
};
ECDH.prototype.setPublicKey = function(pub, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(pub)) pub = new Buffer(pub, enc);
    this.keys._importPublic(pub);
    return this;
};
ECDH.prototype.setPrivateKey = function(priv, enc) {
    enc = enc || 'utf8';
    if (!Buffer.isBuffer(priv)) priv = new Buffer(priv, enc);
    var _priv = new BN(priv);
    _priv = _priv.toString(16);
    this.keys = this.curve.genKeyPair();
    this.keys._importPrivate(_priv);
    return this;
};
function formatReturnValue(bn, enc, len) {
    if (!Array.isArray(bn)) bn = bn.toArray();
    var buf = new Buffer(bn);
    if (len && buf.length < len) {
        var zeros = new Buffer(len - buf.length);
        zeros.fill(0);
        buf = Buffer.concat([
            zeros,
            buf
        ]);
    }
    if (!enc) return buf;
    else return buf.toString(enc);
}

},{"buffer":"kPwYH","elliptic":"7VNVr","bn.js":"3VXSG"}],"bAqmF":[function(require,module,exports) {
exports.publicEncrypt = require('./publicEncrypt');
exports.privateDecrypt = require('./privateDecrypt');
exports.privateEncrypt = function privateEncrypt(key, buf) {
    return exports.publicEncrypt(key, buf, true);
};
exports.publicDecrypt = function publicDecrypt(key, buf) {
    return exports.privateDecrypt(key, buf, true);
};

},{"./publicEncrypt":"jI3gZ","./privateDecrypt":"5qhOt"}],"jI3gZ":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var randomBytes = require('randombytes');
var createHash = require('create-hash');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var withPublic = require('./withPublic');
var crt = require('browserify-rsa');
var Buffer = require('safe-buffer').Buffer;
module.exports = function publicEncrypt(publicKey, msg, reverse) {
    var padding;
    if (publicKey.padding) padding = publicKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(publicKey);
    var paddedMsg;
    if (padding === 4) paddedMsg = oaep(key, msg);
    else if (padding === 1) paddedMsg = pkcs1(key, msg, reverse);
    else if (padding === 3) {
        paddedMsg = new BN(msg);
        if (paddedMsg.cmp(key.modulus) >= 0) throw new Error('data too long for modulus');
    } else throw new Error('unknown padding');
    if (reverse) return crt(paddedMsg, key);
    else return withPublic(paddedMsg, key);
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var mLen = msg.length;
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    var hLen2 = 2 * hLen;
    if (mLen > k - hLen2 - 2) throw new Error('message too long');
    var ps = Buffer.alloc(k - mLen - hLen2 - 2);
    var dblen = k - hLen - 1;
    var seed = randomBytes(hLen);
    var maskedDb = xor(Buffer.concat([
        iHash,
        ps,
        Buffer.alloc(1, 1),
        msg
    ], dblen), mgf(seed, dblen));
    var maskedSeed = xor(seed, mgf(maskedDb, hLen));
    return new BN(Buffer.concat([
        Buffer.alloc(1),
        maskedSeed,
        maskedDb
    ], k));
}
function pkcs1(key, msg, reverse) {
    var mLen = msg.length;
    var k = key.modulus.byteLength();
    if (mLen > k - 11) throw new Error('message too long');
    var ps;
    if (reverse) ps = Buffer.alloc(k - mLen - 3, 255);
    else ps = nonZero(k - mLen - 3);
    return new BN(Buffer.concat([
        Buffer.from([
            0,
            reverse ? 1 : 2
        ]),
        ps,
        Buffer.alloc(1),
        msg
    ], k));
}
function nonZero(len) {
    var out = Buffer.allocUnsafe(len);
    var i = 0;
    var cache = randomBytes(len * 2);
    var cur = 0;
    var num;
    while(i < len){
        if (cur === cache.length) {
            cache = randomBytes(len * 2);
            cur = 0;
        }
        num = cache[cur++];
        if (num) out[i++] = num;
    }
    return out;
}

},{"parse-asn1":"gZwyO","randombytes":"8w7G4","create-hash":"hel5c","./mgf":"bCqz2","./xor":"2JwYX","bn.js":"3VXSG","./withPublic":"2np1o","browserify-rsa":"ioAfx","safe-buffer":"7V1Cd"}],"bCqz2":[function(require,module,exports) {
var createHash = require('create-hash');
var Buffer = require('safe-buffer').Buffer;
module.exports = function(seed, len) {
    var t = Buffer.alloc(0);
    var i = 0;
    var c;
    while(t.length < len){
        c = i2ops(i++);
        t = Buffer.concat([
            t,
            createHash('sha1').update(seed).update(c).digest()
        ]);
    }
    return t.slice(0, len);
};
function i2ops(c) {
    var out = Buffer.allocUnsafe(4);
    out.writeUInt32BE(c, 0);
    return out;
}

},{"create-hash":"hel5c","safe-buffer":"7V1Cd"}],"2JwYX":[function(require,module,exports) {
module.exports = function xor(a, b) {
    var len = a.length;
    var i = -1;
    while((++i) < len)a[i] ^= b[i];
    return a;
};

},{}],"2np1o":[function(require,module,exports) {
var BN = require('bn.js');
var Buffer = require('safe-buffer').Buffer;
function withPublic(paddedMsg, key) {
    return Buffer.from(paddedMsg.toRed(BN.mont(key.modulus)).redPow(new BN(key.publicExponent)).fromRed().toArray());
}
module.exports = withPublic;

},{"bn.js":"3VXSG","safe-buffer":"7V1Cd"}],"5qhOt":[function(require,module,exports) {
var parseKeys = require('parse-asn1');
var mgf = require('./mgf');
var xor = require('./xor');
var BN = require('bn.js');
var crt = require('browserify-rsa');
var createHash = require('create-hash');
var withPublic = require('./withPublic');
var Buffer = require('safe-buffer').Buffer;
module.exports = function privateDecrypt(privateKey, enc, reverse) {
    var padding;
    if (privateKey.padding) padding = privateKey.padding;
    else if (reverse) padding = 1;
    else padding = 4;
    var key = parseKeys(privateKey);
    var k = key.modulus.byteLength();
    if (enc.length > k || new BN(enc).cmp(key.modulus) >= 0) throw new Error('decryption error');
    var msg;
    if (reverse) msg = withPublic(new BN(enc), key);
    else msg = crt(enc, key);
    var zBuffer = Buffer.alloc(k - msg.length);
    msg = Buffer.concat([
        zBuffer,
        msg
    ], k);
    if (padding === 4) return oaep(key, msg);
    else if (padding === 1) return pkcs1(key, msg, reverse);
    else if (padding === 3) return msg;
    else throw new Error('unknown padding');
};
function oaep(key, msg) {
    var k = key.modulus.byteLength();
    var iHash = createHash('sha1').update(Buffer.alloc(0)).digest();
    var hLen = iHash.length;
    if (msg[0] !== 0) throw new Error('decryption error');
    var maskedSeed = msg.slice(1, hLen + 1);
    var maskedDb = msg.slice(hLen + 1);
    var seed = xor(maskedSeed, mgf(maskedDb, hLen));
    var db = xor(maskedDb, mgf(seed, k - hLen - 1));
    if (compare(iHash, db.slice(0, hLen))) throw new Error('decryption error');
    var i = hLen;
    while(db[i] === 0)i++;
    if (db[i++] !== 1) throw new Error('decryption error');
    return db.slice(i);
}
function pkcs1(key, msg, reverse) {
    var p1 = msg.slice(0, 2);
    var i = 2;
    var status = 0;
    while(msg[i++] !== 0)if (i >= msg.length) {
        status++;
        break;
    }
    var ps = msg.slice(2, i - 1);
    if (p1.toString('hex') !== '0002' && !reverse || p1.toString('hex') !== '0001' && reverse) status++;
    if (ps.length < 8) status++;
    if (status) throw new Error('decryption error');
    return msg.slice(i);
}
function compare(a, b) {
    a = Buffer.from(a);
    b = Buffer.from(b);
    var dif = 0;
    var len = a.length;
    if (a.length !== b.length) {
        dif++;
        len = Math.min(a.length, b.length);
    }
    var i = -1;
    while((++i) < len)dif += a[i] ^ b[i];
    return dif;
}

},{"parse-asn1":"gZwyO","./mgf":"bCqz2","./xor":"2JwYX","bn.js":"3VXSG","browserify-rsa":"ioAfx","create-hash":"hel5c","./withPublic":"2np1o","safe-buffer":"7V1Cd"}],"7ol2h":[function(require,module,exports) {
var process = require("process");
var global = arguments[3];
'use strict';
function oldBrowser() {
    throw new Error('secure random number generation not supported by this browser\nuse chrome, FireFox or Internet Explorer 11');
}
var safeBuffer = require('safe-buffer');
var randombytes = require('randombytes');
var Buffer = safeBuffer.Buffer;
var kBufferMaxLength = safeBuffer.kMaxLength;
var crypto = global.crypto || global.msCrypto;
var kMaxUint32 = Math.pow(2, 32) - 1;
function assertOffset(offset, length) {
    if (typeof offset !== 'number' || offset !== offset) throw new TypeError('offset must be a number');
    if (offset > kMaxUint32 || offset < 0) throw new TypeError('offset must be a uint32');
    if (offset > kBufferMaxLength || offset > length) throw new RangeError('offset out of range');
}
function assertSize(size, offset, length) {
    if (typeof size !== 'number' || size !== size) throw new TypeError('size must be a number');
    if (size > kMaxUint32 || size < 0) throw new TypeError('size must be a uint32');
    if (size + offset > length || size > kBufferMaxLength) throw new RangeError('buffer too small');
}
if (crypto && crypto.getRandomValues || false) {
    exports.randomFill = randomFill;
    exports.randomFillSync = randomFillSync;
} else {
    exports.randomFill = oldBrowser;
    exports.randomFillSync = oldBrowser;
}
function randomFill(buf, offset, size, cb) {
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    if (typeof offset === 'function') {
        cb = offset;
        offset = 0;
        size = buf.length;
    } else if (typeof size === 'function') {
        cb = size;
        size = buf.length - offset;
    } else if (typeof cb !== 'function') throw new TypeError('"cb" argument must be a function');
    assertOffset(offset, buf.length);
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size, cb);
}
function actualFill(buf, offset, size, cb) {
    var ourBuf = buf.buffer;
    var uint = new Uint8Array(ourBuf, offset, size);
    crypto.getRandomValues(uint);
    if (cb) {
        process.nextTick(function() {
            cb(null, buf);
        });
        return;
    }
    return buf;
    if (cb) {
        randombytes(size, function(err, bytes) {
            if (err) return cb(err);
            bytes.copy(buf, offset);
            cb(null, buf);
        });
        return;
    }
    var bytes = randombytes(size);
    bytes.copy(buf, offset);
    return buf;
}
function randomFillSync(buf, offset, size) {
    if (typeof offset === 'undefined') offset = 0;
    if (!Buffer.isBuffer(buf) && !(buf instanceof global.Uint8Array)) throw new TypeError('"buf" argument must be a Buffer or Uint8Array');
    assertOffset(offset, buf.length);
    if (size === undefined) size = buf.length - offset;
    assertSize(size, offset, buf.length);
    return actualFill(buf, offset, size);
}

},{"process":"glFWE","safe-buffer":"7V1Cd","randombytes":"8w7G4"}],"dKQH3":[function(require,module,exports) {
exports.interopDefault = function(a) {
    return a && a.__esModule ? a : {
        default: a
    };
};
exports.defineInteropFlag = function(a) {
    Object.defineProperty(a, '__esModule', {
        value: true
    });
};
exports.exportAll = function(source, dest) {
    Object.keys(source).forEach(function(key) {
        if (key === 'default' || key === '__esModule') return;
        // Skip duplicate re-exports when they have the same value.
        if (key in dest && dest[key] === source[key]) return;
        Object.defineProperty(dest, key, {
            enumerable: true,
            get: function() {
                return source[key];
            }
        });
    });
    return dest;
};
exports.export = function(dest, destName, get) {
    Object.defineProperty(dest, destName, {
        enumerable: true,
        get: get
    });
};

},{}],"5uMjN":[function(require,module,exports) {
var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
exports.default = [
    0,
    97,
    115,
    109,
    1,
    0,
    0,
    0,
    1,
    97,
    15,
    96,
    1,
    127,
    0,
    96,
    1,
    127,
    1,
    127,
    96,
    5,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    6,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    4,
    127,
    127,
    127,
    127,
    0,
    96,
    2,
    127,
    127,
    0,
    96,
    3,
    127,
    127,
    127,
    1,
    127,
    96,
    0,
    1,
    127,
    96,
    3,
    127,
    127,
    127,
    0,
    96,
    0,
    0,
    96,
    2,
    127,
    127,
    1,
    127,
    96,
    7,
    127,
    127,
    127,
    127,
    127,
    127,
    127,
    0,
    96,
    3,
    127,
    126,
    127,
    1,
    126,
    96,
    4,
    127,
    127,
    127,
    127,
    1,
    127,
    96,
    4,
    127,
    127,
    126,
    126,
    0,
    2,
    209,
    2,
    11,
    3,
    101,
    110,
    118,
    21,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    118,
    111,
    105,
    100,
    0,
    5,
    3,
    101,
    110,
    118,
    21,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    98,
    111,
    111,
    108,
    0,
    2,
    3,
    101,
    110,
    118,
    27,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    115,
    116,
    100,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    5,
    3,
    101,
    110,
    118,
    28,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    115,
    116,
    100,
    95,
    119,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    8,
    3,
    101,
    110,
    118,
    22,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    101,
    109,
    118,
    97,
    108,
    0,
    5,
    3,
    101,
    110,
    118,
    24,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    105,
    110,
    116,
    101,
    103,
    101,
    114,
    0,
    2,
    3,
    101,
    110,
    118,
    22,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    102,
    108,
    111,
    97,
    116,
    0,
    8,
    3,
    101,
    110,
    118,
    28,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    0,
    8,
    3,
    101,
    110,
    118,
    22,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    114,
    101,
    115,
    105,
    122,
    101,
    95,
    104,
    101,
    97,
    112,
    0,
    1,
    3,
    101,
    110,
    118,
    21,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    109,
    101,
    109,
    99,
    112,
    121,
    95,
    98,
    105,
    103,
    0,
    6,
    3,
    101,
    110,
    118,
    23,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    98,
    105,
    103,
    105,
    110,
    116,
    0,
    11,
    3,
    62,
    61,
    9,
    10,
    1,
    1,
    9,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    1,
    0,
    0,
    6,
    6,
    6,
    8,
    4,
    4,
    4,
    10,
    4,
    4,
    8,
    2,
    3,
    2,
    2,
    2,
    3,
    3,
    3,
    7,
    1,
    0,
    1,
    5,
    7,
    0,
    1,
    9,
    5,
    7,
    7,
    7,
    1,
    1,
    10,
    5,
    13,
    11,
    3,
    2,
    14,
    0,
    9,
    0,
    9,
    7,
    4,
    5,
    1,
    112,
    1,
    20,
    20,
    5,
    7,
    1,
    1,
    128,
    2,
    255,
    255,
    3,
    6,
    29,
    5,
    127,
    1,
    65,
    176,
    158,
    192,
    2,
    11,
    127,
    1,
    65,
    0,
    11,
    127,
    1,
    65,
    0,
    11,
    127,
    1,
    65,
    0,
    11,
    127,
    1,
    65,
    0,
    11,
    7,
    170,
    4,
    29,
    6,
    109,
    101,
    109,
    111,
    114,
    121,
    2,
    0,
    17,
    95,
    95,
    119,
    97,
    115,
    109,
    95,
    99,
    97,
    108,
    108,
    95,
    99,
    116,
    111,
    114,
    115,
    0,
    11,
    4,
    109,
    97,
    105,
    110,
    0,
    12,
    13,
    95,
    95,
    103,
    101,
    116,
    84,
    121,
    112,
    101,
    78,
    97,
    109,
    101,
    0,
    13,
    42,
    95,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    110,
    97,
    116,
    105,
    118,
    101,
    95,
    97,
    110,
    100,
    95,
    98,
    117,
    105,
    108,
    116,
    105,
    110,
    95,
    116,
    121,
    112,
    101,
    115,
    0,
    15,
    25,
    95,
    95,
    105,
    110,
    100,
    105,
    114,
    101,
    99,
    116,
    95,
    102,
    117,
    110,
    99,
    116,
    105,
    111,
    110,
    95,
    116,
    97,
    98,
    108,
    101,
    1,
    0,
    6,
    102,
    102,
    108,
    117,
    115,
    104,
    0,
    58,
    6,
    109,
    97,
    108,
    108,
    111,
    99,
    0,
    46,
    16,
    95,
    95,
    101,
    114,
    114,
    110,
    111,
    95,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    0,
    45,
    9,
    115,
    116,
    97,
    99,
    107,
    83,
    97,
    118,
    101,
    0,
    50,
    12,
    115,
    116,
    97,
    99,
    107,
    82,
    101,
    115,
    116,
    111,
    114,
    101,
    0,
    51,
    10,
    115,
    116,
    97,
    99,
    107,
    65,
    108,
    108,
    111,
    99,
    0,
    52,
    21,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    105,
    110,
    105,
    116,
    0,
    53,
    27,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    115,
    101,
    116,
    95,
    108,
    105,
    109,
    105,
    116,
    115,
    0,
    54,
    25,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    102,
    114,
    101,
    101,
    0,
    55,
    25,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    98,
    97,
    115,
    101,
    0,
    56,
    24,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    101,
    110,
    100,
    0,
    57,
    4,
    102,
    114,
    101,
    101,
    0,
    47,
    10,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    105,
    105,
    0,
    60,
    10,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    0,
    61,
    12,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    105,
    105,
    105,
    105,
    0,
    62,
    15,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    105,
    105,
    0,
    63,
    14,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    105,
    0,
    64,
    13,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    0,
    65,
    21,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    97,
    114,
    116,
    95,
    117,
    110,
    119,
    105,
    110,
    100,
    0,
    67,
    20,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    111,
    112,
    95,
    117,
    110,
    119,
    105,
    110,
    100,
    0,
    68,
    21,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    97,
    114,
    116,
    95,
    114,
    101,
    119,
    105,
    110,
    100,
    0,
    69,
    20,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    111,
    112,
    95,
    114,
    101,
    119,
    105,
    110,
    100,
    0,
    70,
    18,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    103,
    101,
    116,
    95,
    115,
    116,
    97,
    116,
    101,
    0,
    71,
    9,
    25,
    1,
    0,
    65,
    1,
    11,
    19,
    22,
    23,
    25,
    24,
    24,
    26,
    25,
    28,
    44,
    41,
    30,
    25,
    43,
    40,
    31,
    25,
    42,
    37,
    34,
    10,
    227,
    145,
    1,
    61,
    102,
    1,
    1,
    127,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    0,
    11,
    35,
    3,
    69,
    4,
    64,
    16,
    53,
    11,
    32,
    0,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    65,
    160,
    26,
    65,
    1,
    17,
    1,
    0,
    26,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    0,
    35,
    4,
    40,
    2,
    0,
    32,
    0,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    11,
    4,
    0,
    65,
    0,
    11,
    225,
    5,
    1,
    7,
    127,
    35,
    3,
    33,
    6,
    35,
    0,
    65,
    16,
    107,
    34,
    7,
    36,
    0,
    32,
    7,
    32,
    0,
    54,
    2,
    12,
    32,
    7,
    40,
    2,
    12,
    16,
    14,
    33,
    0,
    35,
    3,
    32,
    6,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    34,
    2,
    33,
    5,
    2,
    127,
    2,
    127,
    2,
    64,
    32,
    2,
    34,
    1,
    65,
    3,
    113,
    4,
    64,
    3,
    64,
    32,
    1,
    45,
    0,
    0,
    69,
    13,
    2,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    65,
    3,
    113,
    13,
    0,
    11,
    11,
    3,
    64,
    32,
    1,
    33,
    0,
    32,
    1,
    65,
    4,
    106,
    33,
    1,
    32,
    0,
    40,
    2,
    0,
    34,
    3,
    65,
    127,
    115,
    33,
    4,
    32,
    4,
    32,
    3,
    65,
    129,
    130,
    132,
    8,
    107,
    113,
    65,
    128,
    129,
    130,
    132,
    120,
    113,
    69,
    13,
    0,
    11,
    32,
    0,
    32,
    5,
    107,
    32,
    3,
    65,
    255,
    1,
    113,
    69,
    13,
    1,
    26,
    3,
    64,
    32,
    0,
    45,
    0,
    1,
    33,
    3,
    32,
    0,
    65,
    1,
    106,
    34,
    1,
    33,
    0,
    32,
    3,
    13,
    0,
    11,
    11,
    32,
    1,
    32,
    5,
    107,
    11,
    65,
    1,
    106,
    34,
    1,
    16,
    46,
    33,
    0,
    35,
    3,
    32,
    6,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    11,
    4,
    64,
    2,
    64,
    32,
    1,
    65,
    128,
    4,
    79,
    4,
    64,
    32,
    0,
    32,
    2,
    32,
    1,
    16,
    9,
    26,
    35,
    3,
    32,
    6,
    71,
    4,
    64,
    0,
    11,
    12,
    1,
    11,
    32,
    0,
    32,
    1,
    106,
    33,
    4,
    2,
    64,
    32,
    0,
    32,
    2,
    115,
    65,
    3,
    113,
    69,
    4,
    64,
    2,
    64,
    32,
    0,
    65,
    3,
    113,
    69,
    4,
    64,
    32,
    0,
    33,
    1,
    12,
    1,
    11,
    32,
    1,
    65,
    1,
    72,
    4,
    64,
    32,
    0,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    2,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    33,
    2,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    65,
    3,
    113,
    69,
    13,
    1,
    32,
    1,
    32,
    4,
    73,
    13,
    0,
    11,
    11,
    2,
    64,
    32,
    4,
    65,
    124,
    113,
    34,
    5,
    65,
    192,
    0,
    73,
    13,
    0,
    32,
    5,
    65,
    64,
    106,
    34,
    3,
    32,
    1,
    73,
    13,
    0,
    3,
    64,
    32,
    1,
    32,
    2,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    40,
    2,
    4,
    54,
    2,
    4,
    32,
    1,
    32,
    2,
    40,
    2,
    8,
    54,
    2,
    8,
    32,
    1,
    32,
    2,
    40,
    2,
    12,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    40,
    2,
    16,
    54,
    2,
    16,
    32,
    1,
    32,
    2,
    40,
    2,
    20,
    54,
    2,
    20,
    32,
    1,
    32,
    2,
    40,
    2,
    24,
    54,
    2,
    24,
    32,
    1,
    32,
    2,
    40,
    2,
    28,
    54,
    2,
    28,
    32,
    1,
    32,
    2,
    40,
    2,
    32,
    54,
    2,
    32,
    32,
    1,
    32,
    2,
    40,
    2,
    36,
    54,
    2,
    36,
    32,
    1,
    32,
    2,
    40,
    2,
    40,
    54,
    2,
    40,
    32,
    1,
    32,
    2,
    40,
    2,
    44,
    54,
    2,
    44,
    32,
    1,
    32,
    2,
    40,
    2,
    48,
    54,
    2,
    48,
    32,
    1,
    32,
    2,
    40,
    2,
    52,
    54,
    2,
    52,
    32,
    1,
    32,
    2,
    40,
    2,
    56,
    54,
    2,
    56,
    32,
    1,
    32,
    2,
    40,
    2,
    60,
    54,
    2,
    60,
    32,
    2,
    65,
    64,
    107,
    33,
    2,
    32,
    3,
    32,
    1,
    65,
    64,
    107,
    34,
    1,
    79,
    13,
    0,
    11,
    11,
    32,
    1,
    32,
    5,
    79,
    13,
    1,
    3,
    64,
    32,
    1,
    32,
    2,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    4,
    106,
    33,
    2,
    32,
    5,
    32,
    1,
    65,
    4,
    106,
    34,
    1,
    75,
    13,
    0,
    11,
    12,
    1,
    11,
    32,
    4,
    65,
    4,
    73,
    4,
    64,
    32,
    0,
    33,
    1,
    12,
    1,
    11,
    32,
    4,
    65,
    4,
    107,
    34,
    3,
    32,
    0,
    73,
    4,
    64,
    32,
    0,
    33,
    1,
    12,
    1,
    11,
    32,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    32,
    2,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    1,
    32,
    2,
    45,
    0,
    1,
    58,
    0,
    1,
    32,
    1,
    32,
    2,
    45,
    0,
    2,
    58,
    0,
    2,
    32,
    1,
    32,
    2,
    45,
    0,
    3,
    58,
    0,
    3,
    32,
    2,
    65,
    4,
    106,
    33,
    2,
    32,
    3,
    32,
    1,
    65,
    4,
    106,
    34,
    1,
    79,
    13,
    0,
    11,
    11,
    32,
    1,
    32,
    4,
    73,
    4,
    64,
    3,
    64,
    32,
    1,
    32,
    2,
    45,
    0,
    0,
    58,
    0,
    0,
    32,
    2,
    65,
    1,
    106,
    33,
    2,
    32,
    4,
    32,
    1,
    65,
    1,
    106,
    34,
    1,
    71,
    13,
    0,
    11,
    11,
    11,
    5,
    65,
    0,
    33,
    0,
    11,
    32,
    7,
    65,
    16,
    106,
    36,
    0,
    32,
    0,
    11,
    34,
    1,
    1,
    127,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    32,
    0,
    54,
    2,
    8,
    32,
    1,
    32,
    1,
    40,
    2,
    8,
    40,
    2,
    4,
    54,
    2,
    12,
    32,
    1,
    40,
    2,
    12,
    11,
    195,
    9,
    1,
    2,
    127,
    35,
    3,
    33,
    1,
    65,
    140,
    23,
    65,
    154,
    9,
    16,
    0,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    152,
    23,
    65,
    185,
    8,
    65,
    1,
    65,
    1,
    65,
    0,
    16,
    1,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    180,
    8,
    54,
    2,
    12,
    65,
    164,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    1,
    65,
    128,
    127,
    65,
    255,
    0,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    173,
    8,
    54,
    2,
    12,
    65,
    188,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    1,
    65,
    128,
    127,
    65,
    255,
    0,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    171,
    8,
    54,
    2,
    12,
    65,
    176,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    1,
    65,
    0,
    65,
    255,
    1,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    137,
    8,
    54,
    2,
    12,
    65,
    200,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    2,
    65,
    128,
    128,
    126,
    65,
    255,
    255,
    1,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    128,
    8,
    54,
    2,
    12,
    65,
    212,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    2,
    65,
    0,
    65,
    255,
    255,
    3,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    152,
    8,
    54,
    2,
    12,
    65,
    224,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    4,
    65,
    128,
    128,
    128,
    128,
    120,
    65,
    255,
    255,
    255,
    255,
    7,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    143,
    8,
    54,
    2,
    12,
    65,
    236,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    4,
    65,
    0,
    65,
    127,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    215,
    8,
    54,
    2,
    12,
    65,
    248,
    23,
    32,
    0,
    40,
    2,
    12,
    65,
    4,
    65,
    128,
    128,
    128,
    128,
    120,
    65,
    255,
    255,
    255,
    255,
    7,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    206,
    8,
    54,
    2,
    12,
    65,
    132,
    24,
    32,
    0,
    40,
    2,
    12,
    65,
    4,
    65,
    0,
    65,
    127,
    16,
    5,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    163,
    8,
    54,
    2,
    12,
    65,
    144,
    24,
    32,
    0,
    40,
    2,
    12,
    66,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    128,
    127,
    66,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    255,
    0,
    16,
    66,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    162,
    8,
    54,
    2,
    12,
    65,
    156,
    24,
    32,
    0,
    40,
    2,
    12,
    66,
    0,
    66,
    127,
    16,
    66,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    156,
    8,
    54,
    2,
    12,
    65,
    168,
    24,
    32,
    0,
    40,
    2,
    12,
    65,
    4,
    16,
    6,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    147,
    9,
    54,
    2,
    12,
    65,
    180,
    24,
    32,
    0,
    40,
    2,
    12,
    65,
    8,
    16,
    6,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    65,
    236,
    14,
    65,
    233,
    8,
    16,
    2,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    196,
    15,
    65,
    212,
    12,
    16,
    2,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    156,
    16,
    65,
    4,
    65,
    220,
    8,
    16,
    3,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    248,
    16,
    65,
    2,
    65,
    245,
    8,
    16,
    3,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    212,
    17,
    65,
    4,
    65,
    132,
    9,
    16,
    3,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    128,
    18,
    65,
    190,
    8,
    16,
    4,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    143,
    12,
    54,
    2,
    12,
    65,
    168,
    18,
    65,
    0,
    32,
    0,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    65,
    245,
    12,
    16,
    16,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    173,
    12,
    16,
    17,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    159,
    9,
    16,
    18,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    190,
    9,
    16,
    19,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    230,
    9,
    16,
    20,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    131,
    10,
    16,
    21,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    154,
    13,
    54,
    2,
    12,
    65,
    192,
    20,
    65,
    4,
    32,
    0,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    184,
    13,
    54,
    2,
    12,
    65,
    232,
    20,
    65,
    5,
    32,
    0,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    65,
    233,
    10,
    16,
    16,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    200,
    10,
    16,
    17,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    171,
    11,
    16,
    18,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    137,
    11,
    16,
    19,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    238,
    11,
    16,
    20,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    65,
    204,
    11,
    16,
    21,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    169,
    10,
    54,
    2,
    12,
    65,
    144,
    21,
    65,
    6,
    32,
    0,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    35,
    0,
    65,
    16,
    107,
    34,
    0,
    36,
    0,
    32,
    0,
    65,
    223,
    13,
    54,
    2,
    12,
    65,
    184,
    21,
    65,
    7,
    32,
    0,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    208,
    18,
    65,
    0,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    248,
    18,
    65,
    1,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    160,
    19,
    65,
    2,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    200,
    19,
    65,
    3,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    240,
    19,
    65,
    4,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    52,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    65,
    152,
    20,
    65,
    5,
    32,
    1,
    40,
    2,
    12,
    16,
    7,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    11,
    51,
    1,
    2,
    127,
    35,
    3,
    33,
    2,
    35,
    0,
    65,
    16,
    107,
    34,
    1,
    36,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    32,
    1,
    40,
    2,
    12,
    33,
    0,
    16,
    15,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    65,
    16,
    106,
    36,
    0,
    32,
    0,
    11,
    4,
    0,
    32,
    0,
    11,
    3,
    0,
    1,
    11,
    21,
    1,
    1,
    127,
    35,
    3,
    33,
    1,
    32,
    0,
    16,
    47,
    35,
    3,
    32,
    1,
    71,
    4,
    64,
    0,
    11,
    11,
    27,
    0,
    35,
    3,
    33,
    2,
    32,
    0,
    32,
    1,
    65,
    0,
    16,
    27,
    33,
    0,
    35,
    3,
    32,
    2,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    11,
    137,
    1,
    1,
    1,
    127,
    35,
    3,
    33,
    3,
    32,
    2,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    32,
    1,
    40,
    2,
    4,
    70,
    15,
    11,
    32,
    0,
    32,
    1,
    70,
    4,
    64,
    65,
    1,
    15,
    11,
    32,
    0,
    16,
    14,
    33,
    0,
    35,
    3,
    32,
    3,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    16,
    14,
    33,
    1,
    35,
    3,
    32,
    3,
    71,
    4,
    64,
    0,
    11,
    2,
    64,
    32,
    0,
    45,
    0,
    0,
    34,
    2,
    69,
    32,
    1,
    45,
    0,
    0,
    34,
    3,
    32,
    2,
    71,
    114,
    13,
    0,
    3,
    64,
    32,
    1,
    45,
    0,
    1,
    33,
    3,
    32,
    0,
    45,
    0,
    1,
    34,
    2,
    69,
    13,
    1,
    32,
    1,
    65,
    1,
    106,
    33,
    1,
    32,
    0,
    65,
    1,
    106,
    33,
    0,
    32,
    2,
    32,
    3,
    70,
    13,
    0,
    11,
    11,
    32,
    2,
    32,
    3,
    70,
    11,
    217,
    6,
    1,
    8,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    40,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    40,
    2,
    0,
    33,
    0,
    32,
    5,
    40,
    2,
    4,
    33,
    1,
    32,
    5,
    40,
    2,
    8,
    33,
    2,
    32,
    5,
    40,
    2,
    12,
    33,
    3,
    32,
    5,
    40,
    2,
    16,
    33,
    4,
    32,
    5,
    40,
    2,
    20,
    33,
    7,
    32,
    5,
    40,
    2,
    24,
    33,
    8,
    32,
    5,
    40,
    2,
    28,
    33,
    9,
    32,
    5,
    40,
    2,
    32,
    33,
    10,
    32,
    5,
    40,
    2,
    36,
    33,
    5,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    6,
    11,
    35,
    3,
    69,
    4,
    64,
    35,
    0,
    65,
    64,
    106,
    34,
    7,
    36,
    0,
    65,
    1,
    33,
    10,
    32,
    0,
    32,
    1,
    65,
    0,
    16,
    27,
    33,
    4,
    11,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    4,
    13,
    1,
    65,
    0,
    33,
    10,
    32,
    1,
    69,
    13,
    1,
    35,
    0,
    65,
    64,
    106,
    34,
    3,
    36,
    0,
    32,
    1,
    40,
    2,
    0,
    34,
    4,
    65,
    4,
    107,
    40,
    2,
    0,
    33,
    9,
    32,
    4,
    65,
    8,
    107,
    40,
    2,
    0,
    33,
    8,
    32,
    3,
    65,
    0,
    54,
    2,
    20,
    32,
    3,
    65,
    252,
    21,
    54,
    2,
    16,
    32,
    3,
    32,
    1,
    54,
    2,
    12,
    32,
    3,
    65,
    172,
    22,
    54,
    2,
    8,
    32,
    3,
    65,
    24,
    106,
    34,
    5,
    65,
    39,
    16,
    49,
    32,
    1,
    32,
    8,
    106,
    33,
    1,
    32,
    9,
    65,
    172,
    22,
    65,
    0,
    16,
    27,
    33,
    8,
    65,
    0,
    33,
    4,
    11,
    2,
    64,
    32,
    8,
    35,
    3,
    65,
    2,
    70,
    114,
    4,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    3,
    65,
    1,
    54,
    2,
    56,
    32,
    9,
    40,
    2,
    0,
    40,
    2,
    20,
    33,
    8,
    32,
    3,
    65,
    8,
    106,
    33,
    4,
    11,
    32,
    6,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    9,
    32,
    4,
    32,
    1,
    32,
    1,
    65,
    1,
    65,
    0,
    32,
    8,
    17,
    3,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    4,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    65,
    0,
    32,
    3,
    40,
    2,
    32,
    65,
    1,
    70,
    27,
    33,
    4,
    12,
    2,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    3,
    65,
    8,
    106,
    33,
    8,
    32,
    9,
    40,
    2,
    0,
    40,
    2,
    24,
    33,
    5,
    11,
    32,
    6,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    9,
    32,
    8,
    32,
    1,
    65,
    1,
    65,
    0,
    32,
    5,
    17,
    2,
    0,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    3,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    2,
    64,
    2,
    64,
    32,
    3,
    40,
    2,
    44,
    34,
    1,
    14,
    2,
    0,
    1,
    3,
    11,
    32,
    3,
    40,
    2,
    28,
    65,
    0,
    32,
    3,
    40,
    2,
    40,
    65,
    1,
    70,
    27,
    65,
    0,
    32,
    3,
    40,
    2,
    36,
    65,
    1,
    70,
    27,
    34,
    1,
    65,
    0,
    32,
    3,
    40,
    2,
    48,
    65,
    1,
    70,
    27,
    33,
    4,
    12,
    2,
    11,
    32,
    3,
    40,
    2,
    32,
    65,
    1,
    71,
    34,
    1,
    4,
    64,
    32,
    3,
    40,
    2,
    48,
    34,
    1,
    13,
    2,
    32,
    3,
    40,
    2,
    36,
    65,
    1,
    71,
    34,
    1,
    13,
    2,
    32,
    3,
    40,
    2,
    40,
    65,
    1,
    71,
    34,
    1,
    13,
    2,
    11,
    32,
    3,
    40,
    2,
    24,
    33,
    4,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    3,
    65,
    64,
    107,
    36,
    0,
    32,
    4,
    34,
    1,
    69,
    13,
    1,
    32,
    7,
    65,
    8,
    106,
    65,
    4,
    114,
    65,
    52,
    16,
    49,
    32,
    7,
    65,
    1,
    54,
    2,
    56,
    32,
    7,
    65,
    127,
    54,
    2,
    20,
    32,
    7,
    32,
    0,
    54,
    2,
    16,
    32,
    7,
    32,
    1,
    54,
    2,
    8,
    32,
    2,
    40,
    2,
    0,
    33,
    4,
    32,
    1,
    40,
    2,
    0,
    40,
    2,
    28,
    33,
    3,
    32,
    7,
    65,
    8,
    106,
    33,
    0,
    11,
    32,
    6,
    65,
    2,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    1,
    32,
    0,
    32,
    4,
    65,
    1,
    32,
    3,
    17,
    4,
    0,
    65,
    2,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    7,
    40,
    2,
    32,
    34,
    0,
    65,
    1,
    70,
    4,
    64,
    32,
    2,
    32,
    7,
    40,
    2,
    24,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    1,
    70,
    33,
    10,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    7,
    65,
    64,
    107,
    36,
    0,
    32,
    10,
    15,
    11,
    0,
    11,
    33,
    6,
    35,
    4,
    40,
    2,
    0,
    32,
    6,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    1,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    54,
    2,
    8,
    32,
    6,
    32,
    3,
    54,
    2,
    12,
    32,
    6,
    32,
    4,
    54,
    2,
    16,
    32,
    6,
    32,
    7,
    54,
    2,
    20,
    32,
    6,
    32,
    8,
    54,
    2,
    24,
    32,
    6,
    32,
    9,
    54,
    2,
    28,
    32,
    6,
    32,
    10,
    54,
    2,
    32,
    32,
    6,
    32,
    5,
    54,
    2,
    36,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    40,
    106,
    54,
    2,
    0,
    65,
    0,
    11,
    93,
    1,
    1,
    127,
    32,
    0,
    40,
    2,
    16,
    34,
    3,
    69,
    4,
    64,
    32,
    0,
    65,
    1,
    54,
    2,
    36,
    32,
    0,
    32,
    2,
    54,
    2,
    24,
    32,
    0,
    32,
    1,
    54,
    2,
    16,
    15,
    11,
    2,
    64,
    32,
    1,
    32,
    3,
    70,
    4,
    64,
    32,
    0,
    40,
    2,
    24,
    65,
    2,
    71,
    13,
    1,
    32,
    0,
    32,
    2,
    54,
    2,
    24,
    15,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    54,
    32,
    0,
    65,
    2,
    54,
    2,
    24,
    32,
    0,
    32,
    0,
    40,
    2,
    36,
    65,
    1,
    106,
    54,
    2,
    36,
    11,
    11,
    55,
    1,
    1,
    127,
    35,
    3,
    33,
    4,
    2,
    127,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    65,
    0,
    16,
    27,
    33,
    0,
    35,
    3,
    32,
    4,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    11,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    29,
    35,
    3,
    32,
    4,
    71,
    4,
    64,
    0,
    11,
    11,
    11,
    128,
    2,
    1,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    4,
    40,
    2,
    0,
    33,
    0,
    32,
    4,
    40,
    2,
    4,
    33,
    1,
    32,
    4,
    40,
    2,
    8,
    33,
    2,
    32,
    4,
    40,
    2,
    12,
    33,
    3,
    32,
    4,
    40,
    2,
    16,
    33,
    4,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    5,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    65,
    0,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    29,
    15,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    28,
    33,
    4,
    11,
    32,
    5,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    17,
    4,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    5,
    35,
    4,
    40,
    2,
    0,
    32,
    5,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    4,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    4,
    54,
    2,
    16,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    106,
    54,
    2,
    0,
    11,
    165,
    2,
    1,
    3,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    4,
    40,
    2,
    0,
    33,
    0,
    32,
    4,
    40,
    2,
    4,
    33,
    1,
    32,
    4,
    40,
    2,
    8,
    33,
    2,
    32,
    4,
    40,
    2,
    12,
    33,
    3,
    32,
    4,
    40,
    2,
    16,
    33,
    4,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    6,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    33,
    5,
    2,
    127,
    65,
    0,
    32,
    2,
    69,
    13,
    0,
    26,
    32,
    5,
    65,
    8,
    117,
    34,
    4,
    32,
    5,
    65,
    1,
    113,
    69,
    13,
    0,
    26,
    32,
    2,
    40,
    2,
    0,
    32,
    4,
    16,
    33,
    11,
    32,
    2,
    106,
    33,
    4,
    32,
    3,
    65,
    2,
    32,
    5,
    65,
    2,
    113,
    27,
    33,
    3,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    28,
    33,
    2,
    11,
    32,
    6,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    4,
    32,
    3,
    32,
    2,
    17,
    4,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    5,
    35,
    4,
    40,
    2,
    0,
    32,
    5,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    4,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    4,
    54,
    2,
    16,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    106,
    54,
    2,
    0,
    11,
    10,
    0,
    32,
    0,
    32,
    1,
    106,
    40,
    2,
    0,
    11,
    255,
    2,
    1,
    4,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    4,
    40,
    2,
    0,
    33,
    0,
    32,
    4,
    40,
    2,
    4,
    33,
    1,
    32,
    4,
    40,
    2,
    8,
    33,
    2,
    32,
    4,
    40,
    2,
    12,
    33,
    3,
    32,
    4,
    40,
    2,
    16,
    33,
    6,
    32,
    4,
    40,
    2,
    20,
    33,
    7,
    32,
    4,
    40,
    2,
    24,
    33,
    4,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    5,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    65,
    0,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    29,
    15,
    11,
    32,
    0,
    40,
    2,
    12,
    33,
    6,
    32,
    0,
    65,
    16,
    106,
    33,
    7,
    11,
    32,
    5,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    7,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    32,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    32,
    4,
    32,
    6,
    65,
    2,
    72,
    35,
    3,
    27,
    33,
    4,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    4,
    13,
    1,
    32,
    7,
    32,
    6,
    65,
    3,
    116,
    106,
    33,
    6,
    32,
    0,
    65,
    24,
    106,
    33,
    0,
    11,
    3,
    64,
    32,
    5,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    32,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    3,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    13,
    2,
    32,
    6,
    32,
    0,
    65,
    8,
    106,
    34,
    0,
    75,
    13,
    1,
    11,
    11,
    11,
    15,
    11,
    33,
    5,
    35,
    4,
    40,
    2,
    0,
    32,
    5,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    4,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    6,
    54,
    2,
    16,
    32,
    5,
    32,
    7,
    54,
    2,
    20,
    32,
    5,
    32,
    4,
    54,
    2,
    24,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    106,
    54,
    2,
    0,
    11,
    154,
    1,
    0,
    32,
    0,
    65,
    1,
    58,
    0,
    53,
    2,
    64,
    32,
    0,
    40,
    2,
    4,
    32,
    2,
    71,
    13,
    0,
    32,
    0,
    65,
    1,
    58,
    0,
    52,
    2,
    64,
    32,
    0,
    40,
    2,
    16,
    34,
    2,
    69,
    4,
    64,
    32,
    0,
    65,
    1,
    54,
    2,
    36,
    32,
    0,
    32,
    3,
    54,
    2,
    24,
    32,
    0,
    32,
    1,
    54,
    2,
    16,
    32,
    0,
    40,
    2,
    48,
    65,
    1,
    71,
    13,
    2,
    32,
    3,
    65,
    1,
    70,
    13,
    1,
    12,
    2,
    11,
    32,
    1,
    32,
    2,
    70,
    4,
    64,
    32,
    0,
    40,
    2,
    24,
    34,
    2,
    65,
    2,
    70,
    4,
    64,
    32,
    0,
    32,
    3,
    54,
    2,
    24,
    32,
    3,
    33,
    2,
    11,
    32,
    0,
    40,
    2,
    48,
    65,
    1,
    71,
    13,
    2,
    32,
    2,
    65,
    1,
    70,
    13,
    1,
    12,
    2,
    11,
    32,
    0,
    32,
    0,
    40,
    2,
    36,
    65,
    1,
    106,
    54,
    2,
    36,
    11,
    32,
    0,
    65,
    1,
    58,
    0,
    54,
    11,
    11,
    32,
    0,
    2,
    64,
    32,
    0,
    40,
    2,
    4,
    32,
    1,
    71,
    13,
    0,
    32,
    0,
    40,
    2,
    28,
    65,
    1,
    70,
    13,
    0,
    32,
    0,
    32,
    2,
    54,
    2,
    28,
    11,
    11,
    186,
    8,
    1,
    6,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    40,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    7,
    40,
    2,
    0,
    33,
    0,
    32,
    7,
    40,
    2,
    4,
    33,
    1,
    32,
    7,
    40,
    2,
    8,
    33,
    2,
    32,
    7,
    40,
    2,
    12,
    33,
    3,
    32,
    7,
    40,
    2,
    16,
    33,
    4,
    32,
    7,
    40,
    2,
    20,
    33,
    5,
    32,
    7,
    40,
    2,
    24,
    33,
    8,
    32,
    7,
    40,
    2,
    28,
    33,
    9,
    32,
    7,
    40,
    2,
    32,
    33,
    10,
    32,
    7,
    40,
    2,
    36,
    33,
    7,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    6,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    4,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    36,
    15,
    11,
    32,
    0,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    16,
    27,
    33,
    9,
    11,
    2,
    64,
    32,
    9,
    35,
    3,
    65,
    2,
    70,
    114,
    4,
    64,
    2,
    127,
    35,
    3,
    69,
    4,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    71,
    4,
    64,
    32,
    1,
    40,
    2,
    20,
    32,
    2,
    71,
    34,
    9,
    13,
    1,
    11,
    32,
    3,
    65,
    1,
    71,
    13,
    4,
    32,
    1,
    65,
    1,
    54,
    2,
    32,
    15,
    11,
    32,
    1,
    32,
    3,
    54,
    2,
    32,
    32,
    1,
    40,
    2,
    44,
    65,
    4,
    71,
    33,
    3,
    11,
    32,
    3,
    35,
    3,
    65,
    2,
    70,
    114,
    11,
    4,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    12,
    65,
    3,
    116,
    34,
    3,
    32,
    0,
    65,
    16,
    106,
    34,
    5,
    106,
    33,
    7,
    32,
    1,
    33,
    9,
    11,
    2,
    127,
    2,
    64,
    3,
    64,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    5,
    32,
    7,
    79,
    34,
    3,
    13,
    1,
    32,
    1,
    65,
    0,
    59,
    1,
    52,
    11,
    32,
    6,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    5,
    32,
    1,
    32,
    2,
    32,
    2,
    65,
    1,
    32,
    4,
    16,
    38,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    8,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    34,
    3,
    13,
    1,
    2,
    64,
    32,
    1,
    45,
    0,
    53,
    69,
    34,
    3,
    13,
    0,
    32,
    1,
    45,
    0,
    52,
    4,
    64,
    65,
    1,
    33,
    3,
    32,
    1,
    40,
    2,
    24,
    65,
    1,
    70,
    34,
    8,
    13,
    5,
    65,
    1,
    33,
    10,
    65,
    1,
    33,
    8,
    32,
    0,
    45,
    0,
    8,
    65,
    2,
    113,
    13,
    1,
    12,
    5,
    11,
    65,
    1,
    33,
    10,
    32,
    8,
    33,
    3,
    32,
    0,
    45,
    0,
    8,
    65,
    1,
    113,
    69,
    13,
    4,
    11,
    32,
    5,
    65,
    8,
    106,
    33,
    5,
    12,
    2,
    11,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    8,
    33,
    3,
    65,
    4,
    34,
    0,
    32,
    10,
    69,
    34,
    4,
    13,
    2,
    26,
    11,
    11,
    32,
    0,
    65,
    3,
    35,
    3,
    27,
    11,
    33,
    0,
    35,
    3,
    69,
    4,
    64,
    32,
    9,
    32,
    0,
    54,
    2,
    44,
    32,
    3,
    65,
    1,
    113,
    34,
    0,
    13,
    3,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    54,
    2,
    20,
    32,
    1,
    32,
    1,
    40,
    2,
    40,
    65,
    1,
    106,
    54,
    2,
    40,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    71,
    13,
    2,
    32,
    1,
    40,
    2,
    24,
    65,
    2,
    71,
    13,
    2,
    32,
    1,
    65,
    1,
    58,
    0,
    54,
    15,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    65,
    16,
    106,
    33,
    5,
    32,
    0,
    40,
    2,
    12,
    33,
    8,
    11,
    32,
    6,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    5,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    39,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    8,
    65,
    2,
    72,
    13,
    1,
    32,
    8,
    65,
    3,
    116,
    32,
    5,
    106,
    33,
    8,
    32,
    0,
    65,
    24,
    106,
    33,
    5,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    65,
    2,
    113,
    69,
    33,
    9,
    11,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    9,
    4,
    64,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    71,
    13,
    2,
    11,
    11,
    3,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    34,
    0,
    13,
    3,
    11,
    32,
    6,
    65,
    2,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    5,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    39,
    65,
    2,
    35,
    3,
    65,
    1,
    70,
    13,
    4,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    8,
    32,
    5,
    65,
    8,
    106,
    34,
    5,
    75,
    34,
    0,
    13,
    1,
    11,
    11,
    35,
    3,
    69,
    13,
    1,
    11,
    35,
    3,
    65,
    2,
    70,
    32,
    0,
    32,
    0,
    65,
    1,
    113,
    69,
    35,
    3,
    27,
    114,
    4,
    64,
    3,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    13,
    3,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    70,
    13,
    3,
    11,
    32,
    6,
    65,
    3,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    5,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    39,
    65,
    3,
    35,
    3,
    65,
    1,
    70,
    13,
    4,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    8,
    32,
    5,
    65,
    8,
    106,
    34,
    5,
    75,
    13,
    1,
    11,
    11,
    35,
    3,
    69,
    13,
    1,
    11,
    3,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    13,
    2,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    70,
    4,
    64,
    32,
    1,
    40,
    2,
    24,
    65,
    1,
    70,
    13,
    3,
    11,
    11,
    32,
    6,
    65,
    4,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    5,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    39,
    65,
    4,
    35,
    3,
    65,
    1,
    70,
    13,
    3,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    8,
    32,
    5,
    65,
    8,
    106,
    34,
    5,
    75,
    13,
    1,
    11,
    11,
    11,
    15,
    11,
    33,
    6,
    35,
    4,
    40,
    2,
    0,
    32,
    6,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    1,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    54,
    2,
    8,
    32,
    6,
    32,
    3,
    54,
    2,
    12,
    32,
    6,
    32,
    4,
    54,
    2,
    16,
    32,
    6,
    32,
    5,
    54,
    2,
    20,
    32,
    6,
    32,
    8,
    54,
    2,
    24,
    32,
    6,
    32,
    9,
    54,
    2,
    28,
    32,
    6,
    32,
    10,
    54,
    2,
    32,
    32,
    6,
    32,
    7,
    54,
    2,
    36,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    40,
    106,
    54,
    2,
    0,
    11,
    186,
    2,
    1,
    3,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    40,
    2,
    0,
    33,
    0,
    32,
    6,
    40,
    2,
    4,
    33,
    1,
    32,
    6,
    40,
    2,
    8,
    33,
    2,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    32,
    6,
    40,
    2,
    16,
    33,
    4,
    32,
    6,
    40,
    2,
    20,
    33,
    5,
    32,
    6,
    40,
    2,
    24,
    33,
    6,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    8,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    34,
    6,
    65,
    8,
    117,
    33,
    7,
    32,
    6,
    65,
    1,
    113,
    4,
    127,
    32,
    3,
    40,
    2,
    0,
    32,
    7,
    16,
    33,
    5,
    32,
    7,
    11,
    32,
    3,
    106,
    33,
    3,
    32,
    4,
    65,
    2,
    32,
    6,
    65,
    2,
    113,
    27,
    33,
    4,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    20,
    33,
    6,
    11,
    32,
    8,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    6,
    17,
    3,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    7,
    35,
    4,
    40,
    2,
    0,
    32,
    7,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    7,
    32,
    0,
    54,
    2,
    0,
    32,
    7,
    32,
    1,
    54,
    2,
    4,
    32,
    7,
    32,
    2,
    54,
    2,
    8,
    32,
    7,
    32,
    3,
    54,
    2,
    12,
    32,
    7,
    32,
    4,
    54,
    2,
    16,
    32,
    7,
    32,
    5,
    54,
    2,
    20,
    32,
    7,
    32,
    6,
    54,
    2,
    24,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    106,
    54,
    2,
    0,
    11,
    170,
    2,
    1,
    3,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    40,
    2,
    0,
    33,
    0,
    32,
    5,
    40,
    2,
    4,
    33,
    1,
    32,
    5,
    40,
    2,
    8,
    33,
    2,
    32,
    5,
    40,
    2,
    12,
    33,
    3,
    32,
    5,
    40,
    2,
    16,
    33,
    4,
    32,
    5,
    40,
    2,
    20,
    33,
    5,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    7,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    34,
    5,
    65,
    8,
    117,
    33,
    6,
    32,
    5,
    65,
    1,
    113,
    4,
    127,
    32,
    2,
    40,
    2,
    0,
    32,
    6,
    16,
    33,
    5,
    32,
    6,
    11,
    32,
    2,
    106,
    33,
    2,
    32,
    3,
    65,
    2,
    32,
    5,
    65,
    2,
    113,
    27,
    33,
    3,
    32,
    0,
    40,
    2,
    0,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    24,
    33,
    5,
    11,
    32,
    7,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    17,
    2,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    6,
    35,
    4,
    40,
    2,
    0,
    32,
    6,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    1,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    54,
    2,
    8,
    32,
    6,
    32,
    3,
    54,
    2,
    12,
    32,
    6,
    32,
    4,
    54,
    2,
    16,
    32,
    6,
    32,
    5,
    54,
    2,
    20,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    106,
    54,
    2,
    0,
    11,
    156,
    4,
    1,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    40,
    2,
    0,
    33,
    0,
    32,
    5,
    40,
    2,
    4,
    33,
    1,
    32,
    5,
    40,
    2,
    8,
    33,
    2,
    32,
    5,
    40,
    2,
    12,
    33,
    3,
    32,
    5,
    40,
    2,
    16,
    33,
    4,
    32,
    5,
    40,
    2,
    20,
    33,
    5,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    6,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    4,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    36,
    15,
    11,
    32,
    0,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    16,
    27,
    33,
    5,
    11,
    2,
    64,
    32,
    5,
    35,
    3,
    65,
    2,
    70,
    114,
    4,
    64,
    35,
    3,
    69,
    4,
    64,
    2,
    64,
    32,
    1,
    40,
    2,
    16,
    32,
    2,
    71,
    4,
    64,
    32,
    1,
    40,
    2,
    20,
    32,
    2,
    71,
    34,
    5,
    13,
    1,
    11,
    32,
    3,
    65,
    1,
    71,
    13,
    3,
    32,
    1,
    65,
    1,
    54,
    2,
    32,
    15,
    11,
    32,
    1,
    32,
    3,
    54,
    2,
    32,
    32,
    1,
    40,
    2,
    44,
    65,
    4,
    70,
    33,
    3,
    11,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    3,
    13,
    1,
    32,
    1,
    65,
    0,
    59,
    1,
    52,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    20,
    33,
    3,
    11,
    32,
    6,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    2,
    65,
    1,
    32,
    4,
    32,
    3,
    17,
    3,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    4,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    53,
    34,
    0,
    4,
    64,
    32,
    1,
    65,
    3,
    54,
    2,
    44,
    32,
    1,
    45,
    0,
    52,
    69,
    34,
    0,
    13,
    2,
    12,
    4,
    11,
    32,
    1,
    65,
    4,
    54,
    2,
    44,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    54,
    2,
    20,
    32,
    1,
    32,
    1,
    40,
    2,
    40,
    65,
    1,
    106,
    54,
    2,
    40,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    71,
    13,
    2,
    32,
    1,
    40,
    2,
    24,
    65,
    2,
    71,
    13,
    2,
    32,
    1,
    65,
    1,
    58,
    0,
    54,
    15,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    24,
    33,
    5,
    11,
    32,
    6,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    17,
    2,
    0,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    11,
    11,
    15,
    11,
    33,
    6,
    35,
    4,
    40,
    2,
    0,
    32,
    6,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    1,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    54,
    2,
    8,
    32,
    6,
    32,
    3,
    54,
    2,
    12,
    32,
    6,
    32,
    4,
    54,
    2,
    16,
    32,
    6,
    32,
    5,
    54,
    2,
    20,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    106,
    54,
    2,
    0,
    11,
    189,
    1,
    1,
    2,
    127,
    35,
    3,
    33,
    5,
    2,
    127,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    4,
    16,
    27,
    33,
    6,
    35,
    3,
    32,
    5,
    71,
    4,
    64,
    0,
    11,
    32,
    6,
    11,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    16,
    36,
    35,
    3,
    32,
    5,
    71,
    4,
    64,
    0,
    11,
    15,
    11,
    32,
    0,
    32,
    1,
    40,
    2,
    0,
    32,
    4,
    16,
    27,
    33,
    0,
    35,
    3,
    32,
    5,
    71,
    4,
    64,
    0,
    11,
    2,
    64,
    32,
    0,
    69,
    13,
    0,
    2,
    64,
    32,
    2,
    32,
    1,
    40,
    2,
    16,
    71,
    4,
    64,
    32,
    2,
    32,
    1,
    40,
    2,
    20,
    71,
    13,
    1,
    11,
    32,
    3,
    65,
    1,
    71,
    13,
    1,
    32,
    1,
    65,
    1,
    54,
    2,
    32,
    15,
    11,
    32,
    1,
    32,
    2,
    54,
    2,
    20,
    32,
    1,
    32,
    3,
    54,
    2,
    32,
    32,
    1,
    32,
    1,
    40,
    2,
    40,
    65,
    1,
    106,
    54,
    2,
    40,
    2,
    64,
    32,
    1,
    40,
    2,
    36,
    65,
    1,
    71,
    13,
    0,
    32,
    1,
    40,
    2,
    24,
    65,
    2,
    71,
    13,
    0,
    32,
    1,
    65,
    1,
    58,
    0,
    54,
    11,
    32,
    1,
    65,
    4,
    54,
    2,
    44,
    11,
    11,
    135,
    5,
    1,
    8,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    52,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    40,
    2,
    0,
    33,
    0,
    32,
    6,
    40,
    2,
    4,
    33,
    1,
    32,
    6,
    40,
    2,
    8,
    33,
    2,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    32,
    6,
    40,
    2,
    16,
    33,
    4,
    32,
    6,
    40,
    2,
    20,
    33,
    5,
    32,
    6,
    40,
    2,
    24,
    33,
    8,
    32,
    6,
    40,
    2,
    28,
    33,
    9,
    32,
    6,
    40,
    2,
    32,
    33,
    10,
    32,
    6,
    40,
    2,
    36,
    33,
    11,
    32,
    6,
    40,
    2,
    40,
    33,
    12,
    32,
    6,
    40,
    2,
    44,
    33,
    13,
    32,
    6,
    40,
    2,
    48,
    33,
    6,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    7,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    5,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    35,
    15,
    11,
    32,
    1,
    45,
    0,
    53,
    33,
    9,
    32,
    0,
    40,
    2,
    12,
    33,
    8,
    32,
    1,
    65,
    0,
    58,
    0,
    53,
    32,
    1,
    45,
    0,
    52,
    33,
    10,
    32,
    1,
    65,
    0,
    58,
    0,
    52,
    32,
    0,
    65,
    16,
    106,
    33,
    11,
    11,
    32,
    7,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    11,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    16,
    38,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    52,
    34,
    12,
    32,
    10,
    114,
    33,
    10,
    32,
    9,
    32,
    1,
    45,
    0,
    53,
    34,
    13,
    114,
    33,
    9,
    32,
    8,
    65,
    2,
    72,
    33,
    6,
    11,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    6,
    13,
    1,
    32,
    11,
    32,
    8,
    65,
    3,
    116,
    106,
    33,
    11,
    32,
    0,
    65,
    24,
    106,
    33,
    8,
    11,
    3,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    45,
    0,
    54,
    13,
    2,
    2,
    64,
    32,
    12,
    4,
    64,
    32,
    1,
    40,
    2,
    24,
    65,
    1,
    70,
    13,
    4,
    32,
    0,
    45,
    0,
    8,
    65,
    2,
    113,
    13,
    1,
    12,
    4,
    11,
    32,
    13,
    69,
    13,
    0,
    32,
    0,
    45,
    0,
    8,
    65,
    1,
    113,
    69,
    13,
    3,
    11,
    32,
    1,
    65,
    0,
    59,
    1,
    52,
    11,
    32,
    7,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    8,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    16,
    38,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    3,
    26,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    9,
    32,
    1,
    45,
    0,
    53,
    34,
    13,
    114,
    33,
    9,
    32,
    1,
    45,
    0,
    52,
    34,
    12,
    32,
    10,
    114,
    33,
    10,
    32,
    11,
    32,
    8,
    65,
    8,
    106,
    34,
    8,
    75,
    13,
    1,
    11,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    32,
    9,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    58,
    0,
    53,
    32,
    1,
    32,
    10,
    65,
    255,
    1,
    113,
    65,
    0,
    71,
    58,
    0,
    52,
    11,
    15,
    11,
    33,
    7,
    35,
    4,
    40,
    2,
    0,
    32,
    7,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    7,
    32,
    0,
    54,
    2,
    0,
    32,
    7,
    32,
    1,
    54,
    2,
    4,
    32,
    7,
    32,
    2,
    54,
    2,
    8,
    32,
    7,
    32,
    3,
    54,
    2,
    12,
    32,
    7,
    32,
    4,
    54,
    2,
    16,
    32,
    7,
    32,
    5,
    54,
    2,
    20,
    32,
    7,
    32,
    8,
    54,
    2,
    24,
    32,
    7,
    32,
    9,
    54,
    2,
    28,
    32,
    7,
    32,
    10,
    54,
    2,
    32,
    32,
    7,
    32,
    11,
    54,
    2,
    36,
    32,
    7,
    32,
    12,
    54,
    2,
    40,
    32,
    7,
    32,
    13,
    54,
    2,
    44,
    32,
    7,
    32,
    6,
    54,
    2,
    48,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    52,
    106,
    54,
    2,
    0,
    11,
    162,
    2,
    1,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    40,
    2,
    0,
    33,
    0,
    32,
    6,
    40,
    2,
    4,
    33,
    1,
    32,
    6,
    40,
    2,
    8,
    33,
    2,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    32,
    6,
    40,
    2,
    16,
    33,
    4,
    32,
    6,
    40,
    2,
    20,
    33,
    5,
    32,
    6,
    40,
    2,
    24,
    33,
    6,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    7,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    5,
    16,
    27,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    35,
    15,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    40,
    2,
    0,
    40,
    2,
    20,
    33,
    6,
    11,
    32,
    7,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    6,
    17,
    3,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    7,
    35,
    4,
    40,
    2,
    0,
    32,
    7,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    7,
    32,
    0,
    54,
    2,
    0,
    32,
    7,
    32,
    1,
    54,
    2,
    4,
    32,
    7,
    32,
    2,
    54,
    2,
    8,
    32,
    7,
    32,
    3,
    54,
    2,
    12,
    32,
    7,
    32,
    4,
    54,
    2,
    16,
    32,
    7,
    32,
    5,
    54,
    2,
    20,
    32,
    7,
    32,
    6,
    54,
    2,
    24,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    106,
    54,
    2,
    0,
    11,
    57,
    1,
    1,
    127,
    35,
    3,
    33,
    6,
    2,
    127,
    32,
    0,
    32,
    1,
    40,
    2,
    8,
    32,
    5,
    16,
    27,
    33,
    0,
    35,
    3,
    32,
    6,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    11,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    16,
    35,
    35,
    3,
    32,
    6,
    71,
    4,
    64,
    0,
    11,
    11,
    11,
    5,
    0,
    65,
    164,
    26,
    11,
    250,
    46,
    1,
    12,
    127,
    35,
    3,
    33,
    10,
    35,
    0,
    65,
    16,
    107,
    34,
    12,
    36,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    32,
    0,
    65,
    244,
    1,
    77,
    4,
    64,
    65,
    168,
    26,
    40,
    2,
    0,
    34,
    8,
    65,
    16,
    32,
    0,
    65,
    11,
    106,
    65,
    120,
    113,
    32,
    0,
    65,
    11,
    73,
    27,
    34,
    7,
    65,
    3,
    118,
    34,
    2,
    118,
    34,
    1,
    65,
    3,
    113,
    4,
    64,
    32,
    2,
    32,
    1,
    65,
    127,
    115,
    65,
    1,
    113,
    106,
    34,
    4,
    65,
    3,
    116,
    34,
    1,
    65,
    216,
    26,
    106,
    40,
    2,
    0,
    34,
    3,
    65,
    8,
    106,
    33,
    0,
    2,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    2,
    32,
    1,
    65,
    208,
    26,
    106,
    34,
    1,
    70,
    4,
    64,
    65,
    168,
    26,
    32,
    8,
    65,
    126,
    32,
    4,
    119,
    113,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    11,
    32,
    3,
    32,
    4,
    65,
    3,
    116,
    34,
    1,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    106,
    34,
    1,
    40,
    2,
    4,
    65,
    1,
    114,
    33,
    2,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    12,
    13,
    11,
    65,
    176,
    26,
    40,
    2,
    0,
    34,
    11,
    32,
    7,
    79,
    13,
    1,
    32,
    1,
    4,
    64,
    65,
    0,
    65,
    2,
    32,
    2,
    116,
    34,
    0,
    107,
    33,
    5,
    65,
    0,
    32,
    0,
    32,
    5,
    114,
    32,
    1,
    32,
    2,
    116,
    113,
    34,
    0,
    107,
    33,
    2,
    32,
    0,
    32,
    2,
    113,
    65,
    1,
    107,
    34,
    0,
    65,
    12,
    118,
    65,
    16,
    113,
    33,
    2,
    32,
    2,
    32,
    0,
    32,
    2,
    118,
    34,
    1,
    65,
    5,
    118,
    65,
    8,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    2,
    118,
    65,
    4,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    2,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    1,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    106,
    34,
    4,
    65,
    3,
    116,
    34,
    0,
    65,
    216,
    26,
    106,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    8,
    33,
    1,
    2,
    64,
    32,
    1,
    32,
    0,
    65,
    208,
    26,
    106,
    34,
    0,
    70,
    4,
    64,
    65,
    168,
    26,
    32,
    8,
    65,
    126,
    32,
    4,
    119,
    113,
    34,
    8,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    32,
    0,
    54,
    2,
    12,
    32,
    0,
    32,
    1,
    54,
    2,
    8,
    11,
    32,
    3,
    65,
    8,
    106,
    33,
    0,
    32,
    3,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    3,
    32,
    7,
    106,
    34,
    2,
    32,
    4,
    65,
    3,
    116,
    34,
    1,
    32,
    7,
    107,
    34,
    4,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    11,
    4,
    64,
    32,
    11,
    65,
    3,
    118,
    34,
    1,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    5,
    65,
    188,
    26,
    40,
    2,
    0,
    33,
    3,
    2,
    127,
    32,
    8,
    65,
    1,
    32,
    1,
    116,
    34,
    1,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    1,
    32,
    8,
    114,
    54,
    2,
    0,
    32,
    5,
    12,
    1,
    11,
    32,
    5,
    40,
    2,
    8,
    11,
    33,
    1,
    32,
    5,
    32,
    3,
    54,
    2,
    8,
    32,
    1,
    32,
    3,
    54,
    2,
    12,
    32,
    3,
    32,
    5,
    54,
    2,
    12,
    32,
    3,
    32,
    1,
    54,
    2,
    8,
    11,
    65,
    188,
    26,
    32,
    2,
    54,
    2,
    0,
    65,
    176,
    26,
    32,
    4,
    54,
    2,
    0,
    12,
    13,
    11,
    65,
    172,
    26,
    40,
    2,
    0,
    34,
    6,
    69,
    13,
    1,
    32,
    6,
    65,
    0,
    32,
    6,
    107,
    113,
    65,
    1,
    107,
    34,
    0,
    65,
    12,
    118,
    65,
    16,
    113,
    33,
    2,
    32,
    2,
    32,
    0,
    32,
    2,
    118,
    34,
    1,
    65,
    5,
    118,
    65,
    8,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    2,
    118,
    65,
    4,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    2,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    1,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    106,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    7,
    107,
    33,
    4,
    32,
    1,
    33,
    2,
    3,
    64,
    2,
    64,
    32,
    2,
    40,
    2,
    16,
    34,
    0,
    69,
    4,
    64,
    32,
    2,
    40,
    2,
    20,
    34,
    0,
    69,
    13,
    1,
    11,
    32,
    0,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    7,
    107,
    34,
    2,
    32,
    4,
    32,
    2,
    32,
    4,
    73,
    34,
    2,
    27,
    33,
    4,
    32,
    0,
    32,
    1,
    32,
    2,
    27,
    33,
    1,
    32,
    0,
    33,
    2,
    12,
    1,
    11,
    11,
    32,
    1,
    32,
    7,
    106,
    34,
    9,
    32,
    1,
    77,
    13,
    2,
    32,
    1,
    40,
    2,
    24,
    33,
    10,
    32,
    1,
    40,
    2,
    12,
    34,
    3,
    32,
    1,
    71,
    4,
    64,
    32,
    1,
    40,
    2,
    8,
    34,
    0,
    65,
    184,
    26,
    40,
    2,
    0,
    73,
    26,
    32,
    0,
    32,
    3,
    54,
    2,
    12,
    32,
    3,
    32,
    0,
    54,
    2,
    8,
    12,
    12,
    11,
    32,
    1,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    0,
    69,
    4,
    64,
    32,
    1,
    40,
    2,
    16,
    34,
    0,
    69,
    13,
    4,
    32,
    1,
    65,
    16,
    106,
    33,
    2,
    11,
    3,
    64,
    32,
    2,
    33,
    5,
    32,
    0,
    33,
    3,
    32,
    0,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    0,
    13,
    0,
    32,
    3,
    65,
    16,
    106,
    33,
    2,
    32,
    3,
    40,
    2,
    16,
    34,
    0,
    13,
    0,
    11,
    32,
    5,
    65,
    0,
    54,
    2,
    0,
    12,
    11,
    11,
    65,
    127,
    33,
    7,
    32,
    0,
    65,
    191,
    127,
    75,
    13,
    0,
    32,
    0,
    65,
    11,
    106,
    34,
    0,
    65,
    120,
    113,
    33,
    7,
    65,
    172,
    26,
    40,
    2,
    0,
    34,
    9,
    69,
    13,
    0,
    65,
    0,
    32,
    7,
    107,
    33,
    4,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    127,
    65,
    0,
    32,
    7,
    65,
    128,
    2,
    73,
    13,
    0,
    26,
    65,
    31,
    32,
    7,
    65,
    255,
    255,
    255,
    7,
    75,
    13,
    0,
    26,
    32,
    0,
    65,
    8,
    118,
    34,
    0,
    65,
    128,
    254,
    63,
    106,
    65,
    16,
    118,
    65,
    8,
    113,
    33,
    2,
    32,
    0,
    32,
    2,
    116,
    34,
    0,
    65,
    128,
    224,
    31,
    106,
    65,
    16,
    118,
    65,
    4,
    113,
    33,
    1,
    32,
    0,
    32,
    1,
    116,
    34,
    0,
    32,
    0,
    65,
    128,
    128,
    15,
    106,
    65,
    16,
    118,
    65,
    2,
    113,
    34,
    0,
    116,
    65,
    15,
    118,
    32,
    1,
    32,
    2,
    114,
    32,
    0,
    114,
    107,
    34,
    0,
    65,
    1,
    116,
    33,
    2,
    32,
    2,
    32,
    7,
    32,
    0,
    65,
    21,
    106,
    118,
    65,
    1,
    113,
    114,
    65,
    28,
    106,
    11,
    34,
    8,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    40,
    2,
    0,
    34,
    2,
    69,
    4,
    64,
    65,
    0,
    33,
    0,
    12,
    1,
    11,
    65,
    0,
    33,
    0,
    32,
    7,
    65,
    0,
    65,
    25,
    32,
    8,
    65,
    1,
    118,
    107,
    32,
    8,
    65,
    31,
    70,
    27,
    116,
    33,
    1,
    3,
    64,
    2,
    64,
    32,
    4,
    32,
    2,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    7,
    107,
    34,
    5,
    77,
    13,
    0,
    32,
    2,
    33,
    3,
    32,
    5,
    34,
    4,
    13,
    0,
    65,
    0,
    33,
    4,
    32,
    2,
    33,
    0,
    12,
    3,
    11,
    32,
    0,
    32,
    2,
    40,
    2,
    20,
    34,
    5,
    32,
    5,
    32,
    1,
    65,
    29,
    118,
    65,
    4,
    113,
    32,
    2,
    106,
    40,
    2,
    16,
    34,
    2,
    70,
    27,
    32,
    0,
    32,
    5,
    27,
    33,
    0,
    32,
    1,
    65,
    1,
    116,
    33,
    1,
    32,
    2,
    13,
    0,
    11,
    11,
    32,
    0,
    32,
    3,
    114,
    69,
    4,
    64,
    65,
    0,
    33,
    3,
    65,
    0,
    65,
    2,
    32,
    8,
    116,
    34,
    0,
    107,
    33,
    2,
    32,
    9,
    32,
    0,
    32,
    2,
    114,
    113,
    34,
    0,
    69,
    13,
    3,
    65,
    0,
    32,
    0,
    107,
    32,
    0,
    113,
    65,
    1,
    107,
    34,
    0,
    65,
    12,
    118,
    65,
    16,
    113,
    33,
    2,
    32,
    2,
    32,
    0,
    32,
    2,
    118,
    34,
    1,
    65,
    5,
    118,
    65,
    8,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    2,
    118,
    65,
    4,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    2,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    34,
    1,
    65,
    1,
    118,
    65,
    1,
    113,
    34,
    0,
    114,
    33,
    2,
    32,
    2,
    32,
    1,
    32,
    0,
    118,
    106,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    0,
    69,
    13,
    1,
    11,
    3,
    64,
    32,
    4,
    32,
    0,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    7,
    107,
    34,
    1,
    75,
    33,
    2,
    32,
    1,
    32,
    4,
    32,
    2,
    27,
    33,
    4,
    32,
    0,
    32,
    3,
    32,
    2,
    27,
    33,
    3,
    32,
    0,
    40,
    2,
    16,
    34,
    1,
    4,
    127,
    32,
    1,
    5,
    32,
    0,
    40,
    2,
    20,
    11,
    34,
    0,
    13,
    0,
    11,
    11,
    32,
    3,
    69,
    13,
    0,
    32,
    4,
    65,
    176,
    26,
    40,
    2,
    0,
    32,
    7,
    107,
    79,
    13,
    0,
    32,
    3,
    32,
    7,
    106,
    34,
    6,
    32,
    3,
    77,
    13,
    1,
    32,
    3,
    40,
    2,
    24,
    33,
    8,
    32,
    3,
    32,
    3,
    40,
    2,
    12,
    34,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    0,
    65,
    184,
    26,
    40,
    2,
    0,
    73,
    26,
    32,
    0,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    0,
    54,
    2,
    8,
    12,
    10,
    11,
    32,
    3,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    0,
    69,
    4,
    64,
    32,
    3,
    40,
    2,
    16,
    34,
    0,
    69,
    13,
    4,
    32,
    3,
    65,
    16,
    106,
    33,
    2,
    11,
    3,
    64,
    32,
    2,
    33,
    5,
    32,
    0,
    33,
    1,
    32,
    0,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    0,
    13,
    0,
    32,
    1,
    65,
    16,
    106,
    33,
    2,
    32,
    1,
    40,
    2,
    16,
    34,
    0,
    13,
    0,
    11,
    32,
    5,
    65,
    0,
    54,
    2,
    0,
    12,
    9,
    11,
    32,
    7,
    65,
    176,
    26,
    40,
    2,
    0,
    34,
    2,
    77,
    4,
    64,
    65,
    188,
    26,
    40,
    2,
    0,
    33,
    4,
    2,
    64,
    32,
    2,
    32,
    7,
    107,
    34,
    1,
    65,
    16,
    79,
    4,
    64,
    65,
    176,
    26,
    32,
    1,
    54,
    2,
    0,
    65,
    188,
    26,
    32,
    4,
    32,
    7,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    4,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    4,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    12,
    1,
    11,
    65,
    188,
    26,
    65,
    0,
    54,
    2,
    0,
    65,
    176,
    26,
    65,
    0,
    54,
    2,
    0,
    32,
    4,
    32,
    2,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    4,
    106,
    34,
    0,
    40,
    2,
    4,
    65,
    1,
    114,
    33,
    2,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    11,
    32,
    4,
    65,
    8,
    106,
    33,
    0,
    12,
    11,
    11,
    32,
    7,
    65,
    180,
    26,
    40,
    2,
    0,
    34,
    6,
    73,
    4,
    64,
    65,
    180,
    26,
    32,
    6,
    32,
    7,
    107,
    34,
    1,
    54,
    2,
    0,
    65,
    192,
    26,
    32,
    7,
    65,
    192,
    26,
    40,
    2,
    0,
    34,
    2,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    2,
    65,
    8,
    106,
    33,
    0,
    12,
    11,
    11,
    65,
    0,
    33,
    0,
    32,
    7,
    65,
    47,
    106,
    34,
    9,
    33,
    2,
    32,
    7,
    65,
    0,
    2,
    127,
    65,
    128,
    30,
    40,
    2,
    0,
    4,
    64,
    65,
    136,
    30,
    40,
    2,
    0,
    12,
    1,
    11,
    65,
    140,
    30,
    66,
    127,
    55,
    2,
    0,
    65,
    132,
    30,
    66,
    128,
    160,
    128,
    128,
    128,
    128,
    4,
    55,
    2,
    0,
    65,
    128,
    30,
    32,
    12,
    65,
    12,
    106,
    65,
    112,
    113,
    65,
    216,
    170,
    213,
    170,
    5,
    115,
    54,
    2,
    0,
    65,
    148,
    30,
    65,
    0,
    54,
    2,
    0,
    65,
    228,
    29,
    65,
    0,
    54,
    2,
    0,
    65,
    128,
    32,
    11,
    34,
    1,
    107,
    34,
    5,
    32,
    1,
    32,
    2,
    106,
    34,
    8,
    113,
    34,
    2,
    79,
    13,
    10,
    65,
    224,
    29,
    40,
    2,
    0,
    34,
    3,
    4,
    64,
    65,
    216,
    29,
    40,
    2,
    0,
    34,
    4,
    32,
    2,
    106,
    34,
    1,
    32,
    4,
    77,
    33,
    4,
    32,
    4,
    32,
    1,
    32,
    3,
    75,
    114,
    13,
    11,
    11,
    65,
    228,
    29,
    45,
    0,
    0,
    65,
    4,
    113,
    13,
    5,
    2,
    64,
    2,
    64,
    65,
    192,
    26,
    40,
    2,
    0,
    34,
    4,
    4,
    64,
    65,
    232,
    29,
    33,
    0,
    3,
    64,
    32,
    4,
    32,
    0,
    40,
    2,
    0,
    34,
    1,
    79,
    4,
    64,
    32,
    4,
    32,
    0,
    40,
    2,
    4,
    32,
    1,
    106,
    73,
    13,
    3,
    11,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    13,
    0,
    11,
    11,
    65,
    0,
    16,
    48,
    33,
    0,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    34,
    1,
    65,
    127,
    70,
    13,
    6,
    32,
    2,
    33,
    8,
    32,
    1,
    65,
    132,
    30,
    40,
    2,
    0,
    34,
    4,
    65,
    1,
    107,
    34,
    0,
    113,
    4,
    64,
    32,
    2,
    32,
    1,
    107,
    32,
    0,
    32,
    1,
    106,
    65,
    0,
    32,
    4,
    107,
    113,
    106,
    33,
    8,
    11,
    32,
    8,
    65,
    254,
    255,
    255,
    255,
    7,
    75,
    32,
    7,
    32,
    8,
    79,
    114,
    13,
    6,
    65,
    224,
    29,
    40,
    2,
    0,
    34,
    3,
    4,
    64,
    32,
    8,
    65,
    216,
    29,
    40,
    2,
    0,
    34,
    4,
    106,
    34,
    0,
    32,
    4,
    77,
    33,
    5,
    32,
    5,
    32,
    0,
    32,
    3,
    75,
    114,
    13,
    7,
    11,
    32,
    8,
    16,
    48,
    33,
    0,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    32,
    1,
    71,
    13,
    1,
    12,
    8,
    11,
    32,
    5,
    32,
    8,
    32,
    6,
    107,
    113,
    34,
    8,
    65,
    254,
    255,
    255,
    255,
    7,
    75,
    13,
    5,
    32,
    8,
    16,
    48,
    33,
    1,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    32,
    0,
    40,
    2,
    4,
    32,
    0,
    40,
    2,
    0,
    106,
    70,
    13,
    4,
    32,
    1,
    33,
    0,
    11,
    32,
    0,
    65,
    127,
    70,
    32,
    8,
    32,
    7,
    65,
    48,
    106,
    79,
    114,
    69,
    4,
    64,
    65,
    136,
    30,
    40,
    2,
    0,
    34,
    1,
    32,
    9,
    32,
    8,
    107,
    106,
    33,
    5,
    32,
    5,
    65,
    0,
    32,
    1,
    107,
    113,
    34,
    1,
    65,
    254,
    255,
    255,
    255,
    7,
    75,
    4,
    64,
    32,
    0,
    33,
    1,
    12,
    8,
    11,
    2,
    127,
    32,
    1,
    16,
    48,
    33,
    5,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    5,
    65,
    127,
    71,
    11,
    4,
    64,
    32,
    1,
    32,
    8,
    106,
    33,
    8,
    32,
    0,
    33,
    1,
    12,
    8,
    11,
    65,
    0,
    32,
    8,
    107,
    16,
    48,
    26,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    12,
    5,
    11,
    32,
    0,
    33,
    1,
    32,
    0,
    65,
    127,
    71,
    13,
    6,
    12,
    4,
    11,
    0,
    11,
    65,
    0,
    33,
    3,
    12,
    7,
    11,
    65,
    0,
    33,
    1,
    12,
    5,
    11,
    32,
    1,
    65,
    127,
    71,
    13,
    2,
    11,
    65,
    228,
    29,
    65,
    228,
    29,
    40,
    2,
    0,
    65,
    4,
    114,
    54,
    2,
    0,
    11,
    32,
    2,
    65,
    254,
    255,
    255,
    255,
    7,
    75,
    13,
    1,
    32,
    2,
    16,
    48,
    33,
    0,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    0,
    34,
    1,
    65,
    127,
    70,
    33,
    5,
    65,
    0,
    16,
    48,
    33,
    0,
    35,
    3,
    32,
    10,
    71,
    4,
    64,
    0,
    11,
    32,
    5,
    32,
    0,
    65,
    127,
    70,
    114,
    32,
    0,
    32,
    1,
    77,
    114,
    13,
    1,
    32,
    0,
    32,
    1,
    107,
    34,
    8,
    32,
    7,
    65,
    40,
    106,
    77,
    13,
    1,
    11,
    65,
    216,
    29,
    32,
    8,
    65,
    216,
    29,
    40,
    2,
    0,
    106,
    34,
    0,
    54,
    2,
    0,
    65,
    220,
    29,
    40,
    2,
    0,
    32,
    0,
    73,
    4,
    64,
    65,
    220,
    29,
    32,
    0,
    54,
    2,
    0,
    11,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    192,
    26,
    40,
    2,
    0,
    34,
    5,
    4,
    64,
    65,
    232,
    29,
    33,
    0,
    3,
    64,
    32,
    0,
    40,
    2,
    4,
    34,
    2,
    32,
    0,
    40,
    2,
    0,
    34,
    4,
    106,
    32,
    1,
    70,
    13,
    2,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    13,
    0,
    11,
    12,
    2,
    11,
    32,
    1,
    65,
    184,
    26,
    40,
    2,
    0,
    34,
    0,
    79,
    33,
    2,
    32,
    0,
    65,
    0,
    32,
    2,
    27,
    69,
    4,
    64,
    65,
    184,
    26,
    32,
    1,
    54,
    2,
    0,
    11,
    65,
    0,
    33,
    0,
    65,
    236,
    29,
    32,
    8,
    54,
    2,
    0,
    65,
    232,
    29,
    32,
    1,
    54,
    2,
    0,
    65,
    200,
    26,
    65,
    127,
    54,
    2,
    0,
    65,
    204,
    26,
    65,
    128,
    30,
    40,
    2,
    0,
    54,
    2,
    0,
    65,
    244,
    29,
    65,
    0,
    54,
    2,
    0,
    3,
    64,
    32,
    0,
    65,
    3,
    116,
    34,
    4,
    65,
    216,
    26,
    106,
    32,
    4,
    65,
    208,
    26,
    106,
    34,
    2,
    54,
    2,
    0,
    32,
    4,
    65,
    220,
    26,
    106,
    32,
    2,
    54,
    2,
    0,
    32,
    0,
    65,
    1,
    106,
    34,
    0,
    65,
    32,
    71,
    13,
    0,
    11,
    65,
    192,
    26,
    32,
    1,
    65,
    120,
    32,
    1,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    7,
    113,
    27,
    34,
    0,
    106,
    34,
    2,
    54,
    2,
    0,
    65,
    180,
    26,
    32,
    8,
    32,
    0,
    107,
    65,
    40,
    107,
    34,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    1,
    32,
    8,
    106,
    65,
    36,
    107,
    65,
    40,
    54,
    2,
    0,
    65,
    196,
    26,
    65,
    144,
    30,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    0,
    45,
    0,
    12,
    65,
    8,
    113,
    32,
    4,
    32,
    5,
    75,
    114,
    32,
    1,
    32,
    5,
    77,
    114,
    13,
    0,
    32,
    0,
    32,
    2,
    32,
    8,
    106,
    54,
    2,
    4,
    65,
    192,
    26,
    32,
    5,
    65,
    120,
    32,
    5,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    5,
    65,
    8,
    106,
    65,
    7,
    113,
    27,
    34,
    0,
    106,
    34,
    2,
    54,
    2,
    0,
    65,
    180,
    26,
    32,
    8,
    65,
    180,
    26,
    40,
    2,
    0,
    106,
    34,
    1,
    32,
    0,
    107,
    34,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    1,
    32,
    5,
    106,
    65,
    40,
    54,
    2,
    4,
    65,
    196,
    26,
    65,
    144,
    30,
    40,
    2,
    0,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    1,
    65,
    184,
    26,
    40,
    2,
    0,
    73,
    4,
    64,
    65,
    184,
    26,
    32,
    1,
    54,
    2,
    0,
    11,
    32,
    1,
    32,
    8,
    106,
    33,
    3,
    65,
    232,
    29,
    33,
    0,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    2,
    64,
    3,
    64,
    32,
    3,
    32,
    0,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    0,
    40,
    2,
    8,
    34,
    0,
    13,
    1,
    12,
    2,
    11,
    11,
    32,
    0,
    45,
    0,
    12,
    65,
    8,
    113,
    69,
    13,
    1,
    11,
    65,
    232,
    29,
    33,
    0,
    3,
    64,
    32,
    5,
    32,
    0,
    40,
    2,
    0,
    34,
    2,
    79,
    4,
    64,
    32,
    0,
    40,
    2,
    4,
    32,
    2,
    106,
    34,
    4,
    32,
    5,
    75,
    13,
    3,
    11,
    32,
    0,
    40,
    2,
    8,
    33,
    0,
    12,
    0,
    11,
    0,
    11,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    0,
    32,
    8,
    32,
    0,
    40,
    2,
    4,
    106,
    54,
    2,
    4,
    32,
    1,
    65,
    120,
    32,
    1,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    7,
    113,
    27,
    106,
    34,
    9,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    3,
    65,
    120,
    32,
    3,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    3,
    65,
    8,
    106,
    65,
    7,
    113,
    27,
    106,
    34,
    3,
    32,
    7,
    32,
    9,
    106,
    34,
    6,
    107,
    33,
    2,
    32,
    3,
    32,
    5,
    70,
    4,
    64,
    65,
    192,
    26,
    32,
    6,
    54,
    2,
    0,
    65,
    180,
    26,
    32,
    2,
    65,
    180,
    26,
    40,
    2,
    0,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    12,
    3,
    11,
    32,
    3,
    65,
    188,
    26,
    40,
    2,
    0,
    70,
    4,
    64,
    65,
    188,
    26,
    32,
    6,
    54,
    2,
    0,
    65,
    176,
    26,
    32,
    2,
    65,
    176,
    26,
    40,
    2,
    0,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    6,
    106,
    32,
    0,
    54,
    2,
    0,
    12,
    3,
    11,
    32,
    3,
    40,
    2,
    4,
    34,
    0,
    65,
    3,
    113,
    65,
    1,
    70,
    4,
    64,
    32,
    0,
    65,
    120,
    113,
    33,
    8,
    2,
    64,
    32,
    0,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    4,
    32,
    0,
    65,
    3,
    118,
    34,
    0,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    70,
    26,
    32,
    4,
    32,
    3,
    40,
    2,
    12,
    34,
    1,
    70,
    4,
    64,
    65,
    168,
    26,
    65,
    168,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    0,
    119,
    113,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    4,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    4,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    24,
    33,
    7,
    2,
    64,
    32,
    3,
    32,
    3,
    40,
    2,
    12,
    34,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    0,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    0,
    54,
    2,
    8,
    12,
    1,
    11,
    2,
    64,
    32,
    3,
    65,
    20,
    106,
    34,
    0,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    3,
    65,
    16,
    106,
    34,
    0,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    65,
    0,
    33,
    1,
    12,
    1,
    11,
    3,
    64,
    32,
    0,
    33,
    5,
    32,
    4,
    34,
    1,
    65,
    20,
    106,
    34,
    0,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    1,
    65,
    16,
    106,
    33,
    0,
    32,
    1,
    40,
    2,
    16,
    34,
    4,
    13,
    0,
    11,
    32,
    5,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    7,
    69,
    13,
    0,
    2,
    64,
    32,
    3,
    32,
    3,
    40,
    2,
    28,
    34,
    4,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    34,
    0,
    40,
    2,
    0,
    70,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    13,
    1,
    65,
    172,
    26,
    65,
    172,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    4,
    119,
    113,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    7,
    65,
    16,
    65,
    20,
    32,
    3,
    32,
    7,
    40,
    2,
    16,
    70,
    27,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    69,
    13,
    1,
    11,
    32,
    1,
    32,
    7,
    54,
    2,
    24,
    32,
    3,
    40,
    2,
    16,
    34,
    0,
    4,
    64,
    32,
    1,
    32,
    0,
    54,
    2,
    16,
    32,
    0,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    3,
    40,
    2,
    20,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    20,
    32,
    0,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    3,
    32,
    8,
    106,
    33,
    3,
    32,
    2,
    32,
    8,
    106,
    33,
    2,
    11,
    32,
    3,
    32,
    3,
    40,
    2,
    4,
    65,
    126,
    113,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    6,
    106,
    32,
    2,
    54,
    2,
    0,
    32,
    2,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    2,
    65,
    3,
    118,
    34,
    0,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    2,
    2,
    127,
    65,
    1,
    32,
    0,
    116,
    34,
    0,
    65,
    168,
    26,
    40,
    2,
    0,
    34,
    1,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    0,
    32,
    1,
    114,
    54,
    2,
    0,
    32,
    2,
    12,
    1,
    11,
    32,
    2,
    40,
    2,
    8,
    11,
    33,
    0,
    32,
    2,
    32,
    6,
    54,
    2,
    8,
    32,
    0,
    32,
    6,
    54,
    2,
    12,
    32,
    6,
    32,
    2,
    54,
    2,
    12,
    32,
    6,
    32,
    0,
    54,
    2,
    8,
    12,
    3,
    11,
    65,
    31,
    33,
    0,
    32,
    2,
    65,
    255,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    2,
    65,
    8,
    118,
    34,
    0,
    65,
    128,
    254,
    63,
    106,
    65,
    16,
    118,
    65,
    8,
    113,
    33,
    4,
    32,
    0,
    32,
    4,
    116,
    34,
    0,
    65,
    128,
    224,
    31,
    106,
    65,
    16,
    118,
    65,
    4,
    113,
    33,
    1,
    32,
    0,
    32,
    1,
    116,
    34,
    0,
    32,
    0,
    65,
    128,
    128,
    15,
    106,
    65,
    16,
    118,
    65,
    2,
    113,
    34,
    0,
    116,
    65,
    15,
    118,
    32,
    1,
    32,
    4,
    114,
    32,
    0,
    114,
    107,
    34,
    0,
    65,
    1,
    116,
    33,
    1,
    32,
    1,
    32,
    2,
    32,
    0,
    65,
    21,
    106,
    118,
    65,
    1,
    113,
    114,
    65,
    28,
    106,
    33,
    0,
    11,
    32,
    6,
    32,
    0,
    54,
    2,
    28,
    32,
    6,
    66,
    0,
    55,
    2,
    16,
    32,
    0,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    33,
    3,
    2,
    64,
    65,
    1,
    32,
    0,
    116,
    34,
    1,
    65,
    172,
    26,
    40,
    2,
    0,
    34,
    4,
    113,
    69,
    4,
    64,
    65,
    172,
    26,
    32,
    1,
    32,
    4,
    114,
    54,
    2,
    0,
    32,
    3,
    32,
    6,
    54,
    2,
    0,
    32,
    6,
    32,
    3,
    54,
    2,
    24,
    12,
    1,
    11,
    32,
    2,
    65,
    0,
    65,
    25,
    32,
    0,
    65,
    1,
    118,
    107,
    32,
    0,
    65,
    31,
    70,
    27,
    116,
    33,
    0,
    32,
    3,
    40,
    2,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    33,
    4,
    32,
    1,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    2,
    70,
    13,
    3,
    32,
    0,
    65,
    29,
    118,
    33,
    1,
    32,
    0,
    65,
    1,
    116,
    33,
    0,
    32,
    4,
    32,
    1,
    65,
    4,
    113,
    106,
    34,
    3,
    40,
    2,
    16,
    34,
    1,
    13,
    0,
    11,
    32,
    3,
    32,
    6,
    54,
    2,
    16,
    32,
    6,
    32,
    4,
    54,
    2,
    24,
    11,
    32,
    6,
    32,
    6,
    54,
    2,
    12,
    32,
    6,
    32,
    6,
    54,
    2,
    8,
    12,
    2,
    11,
    65,
    192,
    26,
    32,
    1,
    65,
    120,
    32,
    1,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    1,
    65,
    8,
    106,
    65,
    7,
    113,
    27,
    34,
    0,
    106,
    34,
    2,
    54,
    2,
    0,
    65,
    180,
    26,
    32,
    8,
    32,
    0,
    107,
    65,
    40,
    107,
    34,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    3,
    65,
    36,
    107,
    65,
    40,
    54,
    2,
    0,
    65,
    196,
    26,
    65,
    144,
    30,
    40,
    2,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    65,
    39,
    32,
    4,
    107,
    65,
    7,
    113,
    65,
    0,
    32,
    4,
    65,
    39,
    107,
    65,
    7,
    113,
    27,
    106,
    65,
    47,
    107,
    34,
    0,
    32,
    5,
    65,
    16,
    106,
    32,
    0,
    75,
    27,
    34,
    2,
    65,
    27,
    54,
    2,
    4,
    32,
    2,
    65,
    240,
    29,
    41,
    2,
    0,
    55,
    2,
    16,
    32,
    2,
    65,
    232,
    29,
    41,
    2,
    0,
    55,
    2,
    8,
    65,
    240,
    29,
    32,
    2,
    65,
    8,
    106,
    54,
    2,
    0,
    65,
    236,
    29,
    32,
    8,
    54,
    2,
    0,
    65,
    232,
    29,
    32,
    1,
    54,
    2,
    0,
    65,
    244,
    29,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    24,
    106,
    33,
    0,
    3,
    64,
    32,
    0,
    65,
    7,
    54,
    2,
    4,
    32,
    0,
    65,
    8,
    106,
    33,
    1,
    32,
    0,
    65,
    4,
    106,
    33,
    0,
    32,
    1,
    32,
    4,
    73,
    13,
    0,
    11,
    32,
    2,
    32,
    5,
    70,
    13,
    3,
    32,
    2,
    32,
    2,
    40,
    2,
    4,
    65,
    126,
    113,
    54,
    2,
    4,
    32,
    5,
    32,
    2,
    32,
    5,
    107,
    34,
    3,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    3,
    54,
    2,
    0,
    32,
    3,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    3,
    65,
    3,
    118,
    34,
    0,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    2,
    2,
    127,
    65,
    1,
    32,
    0,
    116,
    34,
    0,
    65,
    168,
    26,
    40,
    2,
    0,
    34,
    1,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    0,
    32,
    1,
    114,
    54,
    2,
    0,
    32,
    2,
    12,
    1,
    11,
    32,
    2,
    40,
    2,
    8,
    11,
    33,
    0,
    32,
    2,
    32,
    5,
    54,
    2,
    8,
    32,
    0,
    32,
    5,
    54,
    2,
    12,
    32,
    5,
    32,
    2,
    54,
    2,
    12,
    32,
    5,
    32,
    0,
    54,
    2,
    8,
    12,
    4,
    11,
    65,
    31,
    33,
    0,
    32,
    5,
    66,
    0,
    55,
    2,
    16,
    32,
    3,
    65,
    255,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    3,
    65,
    8,
    118,
    34,
    0,
    65,
    128,
    254,
    63,
    106,
    65,
    16,
    118,
    65,
    8,
    113,
    33,
    2,
    32,
    0,
    32,
    2,
    116,
    34,
    0,
    65,
    128,
    224,
    31,
    106,
    65,
    16,
    118,
    65,
    4,
    113,
    33,
    1,
    32,
    0,
    32,
    1,
    116,
    34,
    0,
    32,
    0,
    65,
    128,
    128,
    15,
    106,
    65,
    16,
    118,
    65,
    2,
    113,
    34,
    0,
    116,
    65,
    15,
    118,
    32,
    1,
    32,
    2,
    114,
    32,
    0,
    114,
    107,
    34,
    0,
    65,
    1,
    116,
    33,
    2,
    32,
    2,
    32,
    3,
    32,
    0,
    65,
    21,
    106,
    118,
    65,
    1,
    113,
    114,
    65,
    28,
    106,
    33,
    0,
    11,
    32,
    5,
    32,
    0,
    54,
    2,
    28,
    32,
    0,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    33,
    4,
    2,
    64,
    65,
    172,
    26,
    40,
    2,
    0,
    34,
    2,
    65,
    1,
    32,
    0,
    116,
    34,
    1,
    113,
    69,
    4,
    64,
    65,
    172,
    26,
    32,
    1,
    32,
    2,
    114,
    54,
    2,
    0,
    32,
    4,
    32,
    5,
    54,
    2,
    0,
    32,
    5,
    32,
    4,
    54,
    2,
    24,
    12,
    1,
    11,
    32,
    3,
    65,
    0,
    65,
    25,
    32,
    0,
    65,
    1,
    118,
    107,
    32,
    0,
    65,
    31,
    70,
    27,
    116,
    33,
    0,
    32,
    4,
    40,
    2,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    33,
    2,
    32,
    3,
    32,
    1,
    40,
    2,
    4,
    65,
    120,
    113,
    70,
    13,
    4,
    32,
    0,
    65,
    29,
    118,
    33,
    1,
    32,
    0,
    65,
    1,
    116,
    33,
    0,
    32,
    1,
    65,
    4,
    113,
    32,
    2,
    106,
    34,
    4,
    40,
    2,
    16,
    34,
    1,
    13,
    0,
    11,
    32,
    4,
    32,
    5,
    54,
    2,
    16,
    32,
    5,
    32,
    2,
    54,
    2,
    24,
    11,
    32,
    5,
    32,
    5,
    54,
    2,
    12,
    32,
    5,
    32,
    5,
    54,
    2,
    8,
    12,
    3,
    11,
    32,
    4,
    40,
    2,
    8,
    34,
    0,
    32,
    6,
    54,
    2,
    12,
    32,
    4,
    32,
    6,
    54,
    2,
    8,
    32,
    6,
    65,
    0,
    54,
    2,
    24,
    32,
    6,
    32,
    4,
    54,
    2,
    12,
    32,
    6,
    32,
    0,
    54,
    2,
    8,
    11,
    32,
    9,
    65,
    8,
    106,
    33,
    0,
    12,
    5,
    11,
    32,
    2,
    40,
    2,
    8,
    34,
    0,
    32,
    5,
    54,
    2,
    12,
    32,
    2,
    32,
    5,
    54,
    2,
    8,
    32,
    5,
    65,
    0,
    54,
    2,
    24,
    32,
    5,
    32,
    2,
    54,
    2,
    12,
    32,
    5,
    32,
    0,
    54,
    2,
    8,
    11,
    32,
    7,
    65,
    180,
    26,
    40,
    2,
    0,
    34,
    0,
    79,
    13,
    0,
    65,
    180,
    26,
    32,
    0,
    32,
    7,
    107,
    34,
    1,
    54,
    2,
    0,
    65,
    192,
    26,
    32,
    7,
    65,
    192,
    26,
    40,
    2,
    0,
    34,
    2,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    0,
    32,
    1,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    2,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    2,
    65,
    8,
    106,
    33,
    0,
    12,
    3,
    11,
    65,
    164,
    26,
    65,
    48,
    54,
    2,
    0,
    65,
    0,
    33,
    0,
    12,
    2,
    11,
    2,
    64,
    32,
    8,
    69,
    13,
    0,
    2,
    64,
    32,
    3,
    32,
    3,
    40,
    2,
    28,
    34,
    2,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    34,
    0,
    40,
    2,
    0,
    70,
    4,
    64,
    32,
    0,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    13,
    1,
    65,
    172,
    26,
    32,
    9,
    65,
    126,
    32,
    2,
    119,
    113,
    34,
    9,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    8,
    65,
    16,
    65,
    20,
    32,
    3,
    32,
    8,
    40,
    2,
    16,
    70,
    27,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    69,
    13,
    1,
    11,
    32,
    1,
    32,
    8,
    54,
    2,
    24,
    32,
    3,
    40,
    2,
    16,
    34,
    0,
    4,
    64,
    32,
    1,
    32,
    0,
    54,
    2,
    16,
    32,
    0,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    3,
    40,
    2,
    20,
    34,
    0,
    69,
    13,
    0,
    32,
    1,
    32,
    0,
    54,
    2,
    20,
    32,
    0,
    32,
    1,
    54,
    2,
    24,
    11,
    2,
    64,
    32,
    4,
    65,
    15,
    77,
    4,
    64,
    32,
    3,
    32,
    4,
    32,
    7,
    106,
    34,
    0,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    3,
    106,
    34,
    0,
    40,
    2,
    4,
    65,
    1,
    114,
    33,
    2,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    12,
    1,
    11,
    32,
    3,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    6,
    32,
    4,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    4,
    32,
    6,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    4,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    4,
    65,
    3,
    118,
    34,
    0,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    2,
    2,
    127,
    65,
    1,
    32,
    0,
    116,
    34,
    0,
    65,
    168,
    26,
    40,
    2,
    0,
    34,
    1,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    0,
    32,
    1,
    114,
    54,
    2,
    0,
    32,
    2,
    12,
    1,
    11,
    32,
    2,
    40,
    2,
    8,
    11,
    33,
    0,
    32,
    2,
    32,
    6,
    54,
    2,
    8,
    32,
    0,
    32,
    6,
    54,
    2,
    12,
    32,
    6,
    32,
    2,
    54,
    2,
    12,
    32,
    6,
    32,
    0,
    54,
    2,
    8,
    12,
    1,
    11,
    65,
    31,
    33,
    0,
    32,
    4,
    65,
    255,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    4,
    65,
    8,
    118,
    34,
    0,
    65,
    128,
    254,
    63,
    106,
    65,
    16,
    118,
    65,
    8,
    113,
    33,
    2,
    32,
    0,
    32,
    2,
    116,
    34,
    0,
    65,
    128,
    224,
    31,
    106,
    65,
    16,
    118,
    65,
    4,
    113,
    33,
    1,
    32,
    0,
    32,
    1,
    116,
    34,
    0,
    32,
    0,
    65,
    128,
    128,
    15,
    106,
    65,
    16,
    118,
    65,
    2,
    113,
    34,
    0,
    116,
    65,
    15,
    118,
    32,
    1,
    32,
    2,
    114,
    32,
    0,
    114,
    107,
    34,
    0,
    65,
    1,
    116,
    33,
    2,
    32,
    2,
    32,
    4,
    32,
    0,
    65,
    21,
    106,
    118,
    65,
    1,
    113,
    114,
    65,
    28,
    106,
    33,
    0,
    11,
    32,
    6,
    32,
    0,
    54,
    2,
    28,
    32,
    6,
    66,
    0,
    55,
    2,
    16,
    32,
    0,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    33,
    1,
    2,
    64,
    2,
    64,
    32,
    9,
    65,
    1,
    32,
    0,
    116,
    34,
    2,
    113,
    69,
    4,
    64,
    65,
    172,
    26,
    32,
    2,
    32,
    9,
    114,
    54,
    2,
    0,
    32,
    1,
    32,
    6,
    54,
    2,
    0,
    12,
    1,
    11,
    32,
    4,
    65,
    0,
    65,
    25,
    32,
    0,
    65,
    1,
    118,
    107,
    32,
    0,
    65,
    31,
    70,
    27,
    116,
    33,
    0,
    32,
    1,
    40,
    2,
    0,
    33,
    7,
    3,
    64,
    32,
    4,
    32,
    7,
    34,
    1,
    40,
    2,
    4,
    65,
    120,
    113,
    70,
    13,
    2,
    32,
    0,
    65,
    29,
    118,
    33,
    2,
    32,
    0,
    65,
    1,
    116,
    33,
    0,
    32,
    1,
    32,
    2,
    65,
    4,
    113,
    106,
    34,
    2,
    40,
    2,
    16,
    34,
    7,
    13,
    0,
    11,
    32,
    2,
    32,
    6,
    54,
    2,
    16,
    11,
    32,
    6,
    32,
    1,
    54,
    2,
    24,
    32,
    6,
    32,
    6,
    54,
    2,
    12,
    32,
    6,
    32,
    6,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    1,
    40,
    2,
    8,
    34,
    0,
    32,
    6,
    54,
    2,
    12,
    32,
    1,
    32,
    6,
    54,
    2,
    8,
    32,
    6,
    65,
    0,
    54,
    2,
    24,
    32,
    6,
    32,
    1,
    54,
    2,
    12,
    32,
    6,
    32,
    0,
    54,
    2,
    8,
    11,
    32,
    3,
    65,
    8,
    106,
    33,
    0,
    12,
    1,
    11,
    2,
    64,
    32,
    10,
    69,
    13,
    0,
    2,
    64,
    32,
    1,
    40,
    2,
    28,
    34,
    2,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    34,
    0,
    40,
    2,
    0,
    32,
    1,
    70,
    4,
    64,
    32,
    0,
    32,
    3,
    54,
    2,
    0,
    32,
    3,
    13,
    1,
    65,
    172,
    26,
    32,
    6,
    65,
    126,
    32,
    2,
    119,
    113,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    10,
    65,
    16,
    65,
    20,
    32,
    1,
    32,
    10,
    40,
    2,
    16,
    70,
    27,
    106,
    32,
    3,
    54,
    2,
    0,
    32,
    3,
    69,
    13,
    1,
    11,
    32,
    3,
    32,
    10,
    54,
    2,
    24,
    32,
    1,
    40,
    2,
    16,
    34,
    0,
    4,
    64,
    32,
    3,
    32,
    0,
    54,
    2,
    16,
    32,
    0,
    32,
    3,
    54,
    2,
    24,
    11,
    32,
    1,
    40,
    2,
    20,
    34,
    0,
    69,
    13,
    0,
    32,
    3,
    32,
    0,
    54,
    2,
    20,
    32,
    0,
    32,
    3,
    54,
    2,
    24,
    11,
    2,
    64,
    32,
    4,
    65,
    15,
    77,
    4,
    64,
    32,
    1,
    32,
    4,
    32,
    7,
    106,
    34,
    0,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    1,
    106,
    34,
    0,
    40,
    2,
    4,
    65,
    1,
    114,
    33,
    2,
    32,
    0,
    32,
    2,
    54,
    2,
    4,
    12,
    1,
    11,
    32,
    1,
    32,
    7,
    65,
    3,
    114,
    54,
    2,
    4,
    32,
    9,
    32,
    4,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    4,
    32,
    9,
    106,
    32,
    4,
    54,
    2,
    0,
    32,
    11,
    4,
    64,
    32,
    11,
    65,
    3,
    118,
    34,
    0,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    3,
    65,
    188,
    26,
    40,
    2,
    0,
    33,
    2,
    2,
    127,
    32,
    8,
    65,
    1,
    32,
    0,
    116,
    34,
    0,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    0,
    32,
    8,
    114,
    54,
    2,
    0,
    32,
    3,
    12,
    1,
    11,
    32,
    3,
    40,
    2,
    8,
    11,
    33,
    0,
    32,
    3,
    32,
    2,
    54,
    2,
    8,
    32,
    0,
    32,
    2,
    54,
    2,
    12,
    32,
    2,
    32,
    3,
    54,
    2,
    12,
    32,
    2,
    32,
    0,
    54,
    2,
    8,
    11,
    65,
    188,
    26,
    32,
    9,
    54,
    2,
    0,
    65,
    176,
    26,
    32,
    4,
    54,
    2,
    0,
    11,
    32,
    1,
    65,
    8,
    106,
    33,
    0,
    11,
    32,
    12,
    65,
    16,
    106,
    36,
    0,
    32,
    0,
    11,
    177,
    12,
    1,
    7,
    127,
    2,
    64,
    32,
    0,
    69,
    13,
    0,
    32,
    0,
    65,
    8,
    107,
    33,
    3,
    32,
    3,
    32,
    0,
    65,
    4,
    107,
    40,
    2,
    0,
    34,
    1,
    65,
    120,
    113,
    34,
    0,
    106,
    33,
    5,
    2,
    64,
    32,
    1,
    65,
    1,
    113,
    13,
    0,
    32,
    1,
    65,
    3,
    113,
    69,
    13,
    1,
    32,
    3,
    32,
    3,
    40,
    2,
    0,
    34,
    1,
    107,
    34,
    3,
    65,
    184,
    26,
    40,
    2,
    0,
    73,
    13,
    1,
    32,
    0,
    32,
    1,
    106,
    33,
    0,
    32,
    3,
    65,
    188,
    26,
    40,
    2,
    0,
    71,
    4,
    64,
    32,
    1,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    2,
    32,
    1,
    65,
    3,
    118,
    34,
    4,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    70,
    26,
    32,
    2,
    32,
    3,
    40,
    2,
    12,
    34,
    1,
    70,
    4,
    64,
    65,
    168,
    26,
    65,
    168,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    4,
    119,
    113,
    54,
    2,
    0,
    12,
    3,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    12,
    2,
    11,
    32,
    3,
    40,
    2,
    24,
    33,
    6,
    2,
    64,
    32,
    3,
    32,
    3,
    40,
    2,
    12,
    34,
    1,
    71,
    4,
    64,
    32,
    3,
    40,
    2,
    8,
    34,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    12,
    1,
    11,
    2,
    64,
    32,
    3,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    3,
    65,
    16,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    65,
    0,
    33,
    1,
    12,
    1,
    11,
    3,
    64,
    32,
    2,
    33,
    7,
    32,
    4,
    34,
    1,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    1,
    65,
    16,
    106,
    33,
    2,
    32,
    1,
    40,
    2,
    16,
    34,
    4,
    13,
    0,
    11,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    6,
    69,
    13,
    1,
    2,
    64,
    32,
    3,
    40,
    2,
    28,
    34,
    2,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    34,
    4,
    40,
    2,
    0,
    32,
    3,
    70,
    4,
    64,
    32,
    4,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    13,
    1,
    65,
    172,
    26,
    65,
    172,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    2,
    119,
    113,
    54,
    2,
    0,
    12,
    3,
    11,
    32,
    6,
    65,
    16,
    65,
    20,
    32,
    3,
    32,
    6,
    40,
    2,
    16,
    70,
    27,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    69,
    13,
    2,
    11,
    32,
    1,
    32,
    6,
    54,
    2,
    24,
    32,
    3,
    40,
    2,
    16,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    54,
    2,
    16,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    3,
    40,
    2,
    20,
    34,
    2,
    69,
    13,
    1,
    32,
    1,
    32,
    2,
    54,
    2,
    20,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    12,
    1,
    11,
    32,
    5,
    40,
    2,
    4,
    34,
    1,
    65,
    3,
    113,
    65,
    3,
    71,
    13,
    0,
    65,
    176,
    26,
    32,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    1,
    65,
    126,
    113,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    54,
    2,
    0,
    15,
    11,
    32,
    3,
    32,
    5,
    79,
    13,
    0,
    32,
    5,
    40,
    2,
    4,
    34,
    1,
    65,
    1,
    113,
    69,
    13,
    0,
    2,
    64,
    32,
    1,
    65,
    2,
    113,
    69,
    4,
    64,
    32,
    5,
    65,
    192,
    26,
    40,
    2,
    0,
    70,
    4,
    64,
    65,
    192,
    26,
    32,
    3,
    54,
    2,
    0,
    65,
    180,
    26,
    65,
    180,
    26,
    40,
    2,
    0,
    32,
    0,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    3,
    65,
    188,
    26,
    40,
    2,
    0,
    71,
    13,
    3,
    65,
    176,
    26,
    65,
    0,
    54,
    2,
    0,
    65,
    188,
    26,
    65,
    0,
    54,
    2,
    0,
    15,
    11,
    32,
    5,
    65,
    188,
    26,
    40,
    2,
    0,
    70,
    4,
    64,
    65,
    188,
    26,
    32,
    3,
    54,
    2,
    0,
    65,
    176,
    26,
    65,
    176,
    26,
    40,
    2,
    0,
    32,
    0,
    106,
    34,
    0,
    54,
    2,
    0,
    32,
    3,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    54,
    2,
    0,
    15,
    11,
    32,
    1,
    65,
    120,
    113,
    32,
    0,
    106,
    33,
    0,
    2,
    64,
    32,
    1,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    5,
    40,
    2,
    8,
    34,
    2,
    32,
    1,
    65,
    3,
    118,
    34,
    4,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    70,
    26,
    32,
    2,
    32,
    5,
    40,
    2,
    12,
    34,
    1,
    70,
    4,
    64,
    65,
    168,
    26,
    65,
    168,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    4,
    119,
    113,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    5,
    40,
    2,
    24,
    33,
    6,
    2,
    64,
    32,
    5,
    32,
    5,
    40,
    2,
    12,
    34,
    1,
    71,
    4,
    64,
    32,
    5,
    40,
    2,
    8,
    34,
    2,
    65,
    184,
    26,
    40,
    2,
    0,
    73,
    26,
    32,
    2,
    32,
    1,
    54,
    2,
    12,
    32,
    1,
    32,
    2,
    54,
    2,
    8,
    12,
    1,
    11,
    2,
    64,
    32,
    5,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    5,
    65,
    16,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    65,
    0,
    33,
    1,
    12,
    1,
    11,
    3,
    64,
    32,
    2,
    33,
    7,
    32,
    4,
    34,
    1,
    65,
    20,
    106,
    34,
    2,
    40,
    2,
    0,
    34,
    4,
    13,
    0,
    32,
    1,
    65,
    16,
    106,
    33,
    2,
    32,
    1,
    40,
    2,
    16,
    34,
    4,
    13,
    0,
    11,
    32,
    7,
    65,
    0,
    54,
    2,
    0,
    11,
    32,
    6,
    69,
    13,
    0,
    2,
    64,
    32,
    5,
    32,
    5,
    40,
    2,
    28,
    34,
    2,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    34,
    4,
    40,
    2,
    0,
    70,
    4,
    64,
    32,
    4,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    13,
    1,
    65,
    172,
    26,
    65,
    172,
    26,
    40,
    2,
    0,
    65,
    126,
    32,
    2,
    119,
    113,
    54,
    2,
    0,
    12,
    2,
    11,
    32,
    6,
    65,
    16,
    65,
    20,
    32,
    5,
    32,
    6,
    40,
    2,
    16,
    70,
    27,
    106,
    32,
    1,
    54,
    2,
    0,
    32,
    1,
    69,
    13,
    1,
    11,
    32,
    1,
    32,
    6,
    54,
    2,
    24,
    32,
    5,
    40,
    2,
    16,
    34,
    2,
    4,
    64,
    32,
    1,
    32,
    2,
    54,
    2,
    16,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    5,
    40,
    2,
    20,
    34,
    2,
    69,
    13,
    0,
    32,
    1,
    32,
    2,
    54,
    2,
    20,
    32,
    2,
    32,
    1,
    54,
    2,
    24,
    11,
    32,
    3,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    54,
    2,
    0,
    32,
    3,
    65,
    188,
    26,
    40,
    2,
    0,
    71,
    13,
    1,
    65,
    176,
    26,
    32,
    0,
    54,
    2,
    0,
    15,
    11,
    32,
    5,
    32,
    1,
    65,
    126,
    113,
    54,
    2,
    4,
    32,
    3,
    32,
    0,
    65,
    1,
    114,
    54,
    2,
    4,
    32,
    0,
    32,
    3,
    106,
    32,
    0,
    54,
    2,
    0,
    11,
    32,
    0,
    65,
    255,
    1,
    77,
    4,
    64,
    32,
    0,
    65,
    3,
    118,
    34,
    1,
    65,
    3,
    116,
    65,
    208,
    26,
    106,
    33,
    0,
    2,
    127,
    65,
    1,
    32,
    1,
    116,
    34,
    1,
    65,
    168,
    26,
    40,
    2,
    0,
    34,
    2,
    113,
    69,
    4,
    64,
    65,
    168,
    26,
    32,
    1,
    32,
    2,
    114,
    54,
    2,
    0,
    32,
    0,
    12,
    1,
    11,
    32,
    0,
    40,
    2,
    8,
    11,
    33,
    2,
    32,
    0,
    32,
    3,
    54,
    2,
    8,
    32,
    2,
    32,
    3,
    54,
    2,
    12,
    32,
    3,
    32,
    0,
    54,
    2,
    12,
    32,
    3,
    32,
    2,
    54,
    2,
    8,
    15,
    11,
    65,
    31,
    33,
    2,
    32,
    3,
    66,
    0,
    55,
    2,
    16,
    32,
    0,
    65,
    255,
    255,
    255,
    7,
    77,
    4,
    64,
    32,
    0,
    65,
    8,
    118,
    34,
    4,
    65,
    128,
    254,
    63,
    106,
    65,
    16,
    118,
    65,
    8,
    113,
    33,
    1,
    32,
    4,
    32,
    1,
    116,
    34,
    4,
    65,
    128,
    224,
    31,
    106,
    65,
    16,
    118,
    65,
    4,
    113,
    33,
    2,
    32,
    4,
    32,
    2,
    116,
    34,
    4,
    32,
    4,
    65,
    128,
    128,
    15,
    106,
    65,
    16,
    118,
    65,
    2,
    113,
    34,
    4,
    116,
    65,
    15,
    118,
    32,
    1,
    32,
    2,
    114,
    32,
    4,
    114,
    107,
    34,
    1,
    65,
    1,
    116,
    33,
    2,
    32,
    2,
    32,
    0,
    32,
    1,
    65,
    21,
    106,
    118,
    65,
    1,
    113,
    114,
    65,
    28,
    106,
    33,
    2,
    11,
    32,
    3,
    32,
    2,
    54,
    2,
    28,
    32,
    2,
    65,
    2,
    116,
    65,
    216,
    28,
    106,
    33,
    1,
    2,
    64,
    2,
    64,
    2,
    64,
    65,
    172,
    26,
    40,
    2,
    0,
    34,
    4,
    65,
    1,
    32,
    2,
    116,
    34,
    7,
    113,
    69,
    4,
    64,
    65,
    172,
    26,
    32,
    4,
    32,
    7,
    114,
    54,
    2,
    0,
    32,
    1,
    32,
    3,
    54,
    2,
    0,
    32,
    3,
    32,
    1,
    54,
    2,
    24,
    12,
    1,
    11,
    32,
    0,
    65,
    0,
    65,
    25,
    32,
    2,
    65,
    1,
    118,
    107,
    32,
    2,
    65,
    31,
    70,
    27,
    116,
    33,
    2,
    32,
    1,
    40,
    2,
    0,
    33,
    1,
    3,
    64,
    32,
    1,
    34,
    4,
    40,
    2,
    4,
    65,
    120,
    113,
    32,
    0,
    70,
    13,
    2,
    32,
    2,
    65,
    29,
    118,
    33,
    1,
    32,
    2,
    65,
    1,
    116,
    33,
    2,
    32,
    1,
    65,
    4,
    113,
    32,
    4,
    106,
    34,
    7,
    65,
    16,
    106,
    40,
    2,
    0,
    34,
    1,
    13,
    0,
    11,
    32,
    7,
    32,
    3,
    54,
    2,
    16,
    32,
    3,
    32,
    4,
    54,
    2,
    24,
    11,
    32,
    3,
    32,
    3,
    54,
    2,
    12,
    32,
    3,
    32,
    3,
    54,
    2,
    8,
    12,
    1,
    11,
    32,
    4,
    40,
    2,
    8,
    34,
    0,
    32,
    3,
    54,
    2,
    12,
    32,
    4,
    32,
    3,
    54,
    2,
    8,
    32,
    3,
    65,
    0,
    54,
    2,
    24,
    32,
    3,
    32,
    4,
    54,
    2,
    12,
    32,
    3,
    32,
    0,
    54,
    2,
    8,
    11,
    65,
    200,
    26,
    65,
    200,
    26,
    40,
    2,
    0,
    65,
    1,
    107,
    34,
    0,
    65,
    127,
    32,
    0,
    27,
    54,
    2,
    0,
    11,
    11,
    96,
    1,
    3,
    127,
    35,
    3,
    33,
    3,
    32,
    0,
    65,
    3,
    106,
    65,
    124,
    113,
    34,
    1,
    65,
    156,
    26,
    40,
    2,
    0,
    34,
    2,
    106,
    33,
    0,
    2,
    64,
    32,
    1,
    65,
    0,
    32,
    0,
    32,
    2,
    77,
    27,
    13,
    0,
    63,
    0,
    65,
    16,
    116,
    32,
    0,
    73,
    4,
    64,
    32,
    0,
    16,
    8,
    33,
    1,
    35,
    3,
    32,
    3,
    71,
    4,
    64,
    0,
    11,
    32,
    1,
    69,
    13,
    1,
    11,
    65,
    156,
    26,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    15,
    11,
    65,
    164,
    26,
    65,
    48,
    54,
    2,
    0,
    65,
    127,
    11,
    214,
    2,
    1,
    1,
    127,
    2,
    64,
    32,
    1,
    69,
    13,
    0,
    32,
    0,
    32,
    1,
    106,
    34,
    2,
    65,
    1,
    107,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    0,
    32,
    1,
    65,
    3,
    73,
    13,
    0,
    32,
    2,
    65,
    2,
    107,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    1,
    32,
    2,
    65,
    3,
    107,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    2,
    32,
    1,
    65,
    7,
    73,
    13,
    0,
    32,
    2,
    65,
    4,
    107,
    65,
    0,
    58,
    0,
    0,
    32,
    0,
    65,
    0,
    58,
    0,
    3,
    32,
    1,
    65,
    9,
    73,
    13,
    0,
    65,
    0,
    32,
    0,
    107,
    65,
    3,
    113,
    34,
    2,
    32,
    0,
    106,
    34,
    0,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    107,
    65,
    124,
    113,
    34,
    2,
    32,
    0,
    106,
    34,
    1,
    65,
    4,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    9,
    73,
    13,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    8,
    32,
    0,
    65,
    0,
    54,
    2,
    4,
    32,
    1,
    65,
    8,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    12,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    65,
    25,
    73,
    13,
    0,
    32,
    0,
    65,
    0,
    54,
    2,
    24,
    32,
    0,
    65,
    0,
    54,
    2,
    20,
    32,
    0,
    65,
    0,
    54,
    2,
    16,
    32,
    0,
    65,
    0,
    54,
    2,
    12,
    32,
    1,
    65,
    16,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    20,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    24,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    1,
    65,
    28,
    107,
    65,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    0,
    65,
    4,
    113,
    65,
    24,
    114,
    34,
    2,
    107,
    34,
    1,
    65,
    32,
    73,
    13,
    0,
    32,
    0,
    32,
    2,
    106,
    33,
    0,
    3,
    64,
    32,
    0,
    66,
    0,
    55,
    3,
    24,
    32,
    0,
    66,
    0,
    55,
    3,
    16,
    32,
    0,
    66,
    0,
    55,
    3,
    8,
    32,
    0,
    66,
    0,
    55,
    3,
    0,
    32,
    0,
    65,
    32,
    106,
    33,
    0,
    32,
    1,
    65,
    32,
    107,
    34,
    1,
    65,
    31,
    75,
    13,
    0,
    11,
    11,
    11,
    4,
    0,
    35,
    0,
    11,
    6,
    0,
    32,
    0,
    36,
    0,
    11,
    16,
    0,
    35,
    0,
    32,
    0,
    107,
    65,
    112,
    113,
    34,
    0,
    36,
    0,
    32,
    0,
    11,
    14,
    0,
    65,
    176,
    158,
    192,
    2,
    36,
    2,
    65,
    176,
    30,
    36,
    1,
    11,
    10,
    0,
    32,
    0,
    36,
    2,
    32,
    1,
    36,
    1,
    11,
    7,
    0,
    35,
    0,
    35,
    1,
    107,
    11,
    4,
    0,
    35,
    2,
    11,
    4,
    0,
    35,
    1,
    11,
    239,
    3,
    1,
    4,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    12,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    0,
    33,
    0,
    32,
    1,
    40,
    2,
    8,
    33,
    3,
    32,
    1,
    40,
    2,
    4,
    33,
    2,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    4,
    11,
    32,
    0,
    35,
    3,
    65,
    2,
    70,
    114,
    4,
    64,
    2,
    127,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    76,
    65,
    127,
    76,
    33,
    2,
    11,
    32,
    2,
    35,
    3,
    65,
    2,
    70,
    114,
    11,
    4,
    64,
    32,
    4,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    16,
    59,
    33,
    1,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    3,
    26,
    32,
    1,
    33,
    0,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    15,
    11,
    11,
    32,
    4,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    0,
    16,
    59,
    33,
    1,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    32,
    1,
    33,
    0,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    15,
    11,
    11,
    2,
    127,
    35,
    3,
    69,
    4,
    64,
    65,
    164,
    30,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    0,
    35,
    3,
    65,
    2,
    70,
    114,
    11,
    4,
    64,
    35,
    3,
    69,
    4,
    64,
    65,
    164,
    30,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    4,
    65,
    2,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    127,
    32,
    0,
    16,
    58,
    33,
    1,
    65,
    2,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    32,
    1,
    5,
    32,
    2,
    11,
    33,
    2,
    11,
    2,
    127,
    35,
    3,
    69,
    4,
    64,
    65,
    160,
    30,
    40,
    2,
    0,
    33,
    0,
    11,
    32,
    0,
    35,
    3,
    65,
    2,
    70,
    114,
    11,
    4,
    64,
    3,
    64,
    2,
    127,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    76,
    26,
    32,
    0,
    40,
    2,
    20,
    32,
    0,
    40,
    2,
    28,
    75,
    33,
    3,
    11,
    32,
    3,
    35,
    3,
    65,
    2,
    70,
    114,
    11,
    4,
    64,
    32,
    2,
    2,
    127,
    32,
    4,
    65,
    3,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    0,
    16,
    59,
    33,
    1,
    65,
    3,
    35,
    3,
    65,
    1,
    70,
    13,
    5,
    26,
    32,
    1,
    33,
    3,
    11,
    32,
    2,
    32,
    3,
    114,
    11,
    35,
    3,
    27,
    33,
    2,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    56,
    34,
    0,
    13,
    1,
    11,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    2,
    15,
    11,
    0,
    11,
    33,
    1,
    35,
    4,
    40,
    2,
    0,
    32,
    1,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    1,
    32,
    0,
    54,
    2,
    0,
    32,
    1,
    32,
    2,
    54,
    2,
    4,
    32,
    1,
    32,
    3,
    54,
    2,
    8,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    12,
    106,
    54,
    2,
    0,
    65,
    0,
    11,
    141,
    3,
    2,
    5,
    127,
    1,
    126,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    2,
    40,
    2,
    0,
    33,
    0,
    32,
    2,
    40,
    2,
    8,
    33,
    3,
    32,
    2,
    41,
    2,
    12,
    33,
    6,
    32,
    2,
    40,
    2,
    20,
    33,
    5,
    32,
    2,
    40,
    2,
    4,
    33,
    1,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    33,
    4,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    28,
    34,
    3,
    32,
    0,
    40,
    2,
    20,
    79,
    33,
    1,
    11,
    2,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    13,
    1,
    32,
    0,
    40,
    2,
    36,
    33,
    1,
    11,
    32,
    4,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    0,
    65,
    0,
    65,
    0,
    32,
    1,
    17,
    6,
    0,
    33,
    2,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    32,
    2,
    33,
    1,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    40,
    2,
    20,
    34,
    1,
    13,
    1,
    65,
    127,
    15,
    11,
    11,
    35,
    3,
    4,
    127,
    32,
    5,
    5,
    32,
    0,
    40,
    2,
    4,
    34,
    1,
    32,
    0,
    40,
    2,
    8,
    34,
    3,
    73,
    11,
    35,
    3,
    65,
    2,
    70,
    114,
    4,
    64,
    35,
    3,
    69,
    4,
    64,
    32,
    1,
    32,
    3,
    107,
    172,
    33,
    6,
    32,
    0,
    40,
    2,
    40,
    33,
    1,
    11,
    32,
    4,
    65,
    1,
    70,
    65,
    1,
    35,
    3,
    27,
    4,
    64,
    32,
    0,
    32,
    6,
    65,
    1,
    32,
    1,
    17,
    12,
    0,
    26,
    65,
    1,
    35,
    3,
    65,
    1,
    70,
    13,
    2,
    26,
    11,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    65,
    0,
    54,
    2,
    28,
    32,
    0,
    66,
    0,
    55,
    3,
    16,
    32,
    0,
    66,
    0,
    55,
    2,
    4,
    65,
    0,
    15,
    11,
    0,
    11,
    33,
    2,
    35,
    4,
    40,
    2,
    0,
    32,
    2,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    4,
    32,
    2,
    32,
    3,
    54,
    2,
    8,
    32,
    2,
    32,
    6,
    55,
    2,
    12,
    32,
    2,
    32,
    5,
    54,
    2,
    20,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    106,
    54,
    2,
    0,
    65,
    0,
    11,
    180,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    8,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    0,
    33,
    0,
    32,
    1,
    40,
    2,
    4,
    33,
    1,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    2,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    0,
    17,
    1,
    0,
    33,
    2,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    32,
    2,
    33,
    0,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    15,
    11,
    0,
    11,
    33,
    2,
    35,
    4,
    40,
    2,
    0,
    32,
    2,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    4,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    8,
    106,
    54,
    2,
    0,
    65,
    0,
    11,
    163,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    8,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    1,
    40,
    2,
    0,
    33,
    0,
    32,
    1,
    40,
    2,
    4,
    33,
    1,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    2,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    0,
    17,
    0,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    2,
    35,
    4,
    40,
    2,
    0,
    32,
    2,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    2,
    32,
    0,
    54,
    2,
    0,
    32,
    2,
    32,
    1,
    54,
    2,
    4,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    8,
    106,
    54,
    2,
    0,
    11,
    212,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    16,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    3,
    40,
    2,
    0,
    33,
    0,
    32,
    3,
    40,
    2,
    4,
    33,
    1,
    32,
    3,
    40,
    2,
    8,
    33,
    2,
    32,
    3,
    40,
    2,
    12,
    33,
    3,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    4,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    0,
    17,
    6,
    0,
    33,
    4,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    32,
    4,
    33,
    0,
    11,
    35,
    3,
    69,
    4,
    64,
    32,
    0,
    15,
    11,
    0,
    11,
    33,
    4,
    35,
    4,
    40,
    2,
    0,
    32,
    4,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    4,
    32,
    0,
    54,
    2,
    0,
    32,
    4,
    32,
    1,
    54,
    2,
    4,
    32,
    4,
    32,
    2,
    54,
    2,
    8,
    32,
    4,
    32,
    3,
    54,
    2,
    12,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    16,
    106,
    54,
    2,
    0,
    65,
    0,
    11,
    243,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    40,
    2,
    0,
    33,
    0,
    32,
    6,
    40,
    2,
    4,
    33,
    1,
    32,
    6,
    40,
    2,
    8,
    33,
    2,
    32,
    6,
    40,
    2,
    12,
    33,
    3,
    32,
    6,
    40,
    2,
    16,
    33,
    4,
    32,
    6,
    40,
    2,
    20,
    33,
    5,
    32,
    6,
    40,
    2,
    24,
    33,
    6,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    7,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    6,
    32,
    0,
    17,
    3,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    7,
    35,
    4,
    40,
    2,
    0,
    32,
    7,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    7,
    32,
    0,
    54,
    2,
    0,
    32,
    7,
    32,
    1,
    54,
    2,
    4,
    32,
    7,
    32,
    2,
    54,
    2,
    8,
    32,
    7,
    32,
    3,
    54,
    2,
    12,
    32,
    7,
    32,
    4,
    54,
    2,
    16,
    32,
    7,
    32,
    5,
    54,
    2,
    20,
    32,
    7,
    32,
    6,
    54,
    2,
    24,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    28,
    106,
    54,
    2,
    0,
    11,
    227,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    40,
    2,
    0,
    33,
    0,
    32,
    5,
    40,
    2,
    4,
    33,
    1,
    32,
    5,
    40,
    2,
    8,
    33,
    2,
    32,
    5,
    40,
    2,
    12,
    33,
    3,
    32,
    5,
    40,
    2,
    16,
    33,
    4,
    32,
    5,
    40,
    2,
    20,
    33,
    5,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    6,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    5,
    32,
    0,
    17,
    2,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    6,
    35,
    4,
    40,
    2,
    0,
    32,
    6,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    6,
    32,
    0,
    54,
    2,
    0,
    32,
    6,
    32,
    1,
    54,
    2,
    4,
    32,
    6,
    32,
    2,
    54,
    2,
    8,
    32,
    6,
    32,
    3,
    54,
    2,
    12,
    32,
    6,
    32,
    4,
    54,
    2,
    16,
    32,
    6,
    32,
    5,
    54,
    2,
    20,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    24,
    106,
    54,
    2,
    0,
    11,
    211,
    1,
    1,
    1,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    64,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    4,
    40,
    2,
    0,
    33,
    0,
    32,
    4,
    40,
    2,
    4,
    33,
    1,
    32,
    4,
    40,
    2,
    8,
    33,
    2,
    32,
    4,
    40,
    2,
    12,
    33,
    3,
    32,
    4,
    40,
    2,
    16,
    33,
    4,
    11,
    2,
    127,
    35,
    3,
    65,
    2,
    70,
    4,
    127,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    107,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    40,
    2,
    0,
    5,
    32,
    5,
    11,
    65,
    0,
    35,
    3,
    27,
    69,
    4,
    64,
    32,
    1,
    32,
    2,
    32,
    3,
    32,
    4,
    32,
    0,
    17,
    4,
    0,
    65,
    0,
    35,
    3,
    65,
    1,
    70,
    13,
    1,
    26,
    11,
    15,
    11,
    33,
    5,
    35,
    4,
    40,
    2,
    0,
    32,
    5,
    54,
    2,
    0,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    4,
    106,
    54,
    2,
    0,
    35,
    4,
    40,
    2,
    0,
    34,
    5,
    32,
    0,
    54,
    2,
    0,
    32,
    5,
    32,
    1,
    54,
    2,
    4,
    32,
    5,
    32,
    2,
    54,
    2,
    8,
    32,
    5,
    32,
    3,
    54,
    2,
    12,
    32,
    5,
    32,
    4,
    54,
    2,
    16,
    35,
    4,
    35,
    4,
    40,
    2,
    0,
    65,
    20,
    106,
    54,
    2,
    0,
    11,
    43,
    1,
    1,
    127,
    35,
    3,
    33,
    4,
    32,
    0,
    32,
    1,
    65,
    8,
    32,
    2,
    167,
    32,
    2,
    66,
    32,
    136,
    167,
    32,
    3,
    167,
    32,
    3,
    66,
    32,
    136,
    167,
    16,
    10,
    35,
    3,
    32,
    4,
    71,
    4,
    64,
    0,
    11,
    11,
    25,
    0,
    65,
    1,
    36,
    3,
    32,
    0,
    36,
    4,
    35,
    4,
    40,
    2,
    0,
    35,
    4,
    40,
    2,
    4,
    75,
    4,
    64,
    0,
    11,
    11,
    21,
    0,
    65,
    0,
    36,
    3,
    35,
    4,
    40,
    2,
    0,
    35,
    4,
    40,
    2,
    4,
    75,
    4,
    64,
    0,
    11,
    11,
    25,
    0,
    65,
    2,
    36,
    3,
    32,
    0,
    36,
    4,
    35,
    4,
    40,
    2,
    0,
    35,
    4,
    40,
    2,
    4,
    75,
    4,
    64,
    0,
    11,
    11,
    21,
    0,
    65,
    0,
    36,
    3,
    35,
    4,
    40,
    2,
    0,
    35,
    4,
    40,
    2,
    4,
    75,
    4,
    64,
    0,
    11,
    11,
    4,
    0,
    35,
    3,
    11,
    11,
    171,
    18,
    2,
    0,
    65,
    128,
    8,
    11,
    154,
    18,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    115,
    104,
    111,
    114,
    116,
    0,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    105,
    110,
    116,
    0,
    102,
    108,
    111,
    97,
    116,
    0,
    117,
    105,
    110,
    116,
    54,
    52,
    95,
    116,
    0,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    0,
    98,
    111,
    111,
    108,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    118,
    97,
    108,
    0,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    108,
    111,
    110,
    103,
    0,
    115,
    116,
    100,
    58,
    58,
    119,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    115,
    116,
    100,
    58,
    58,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    115,
    116,
    100,
    58,
    58,
    117,
    49,
    54,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    115,
    116,
    100,
    58,
    58,
    117,
    51,
    50,
    115,
    116,
    114,
    105,
    110,
    103,
    0,
    100,
    111,
    117,
    98,
    108,
    101,
    0,
    118,
    111,
    105,
    100,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    115,
    104,
    111,
    114,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    115,
    104,
    111,
    114,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    105,
    110,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    105,
    110,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    102,
    108,
    111,
    97,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    105,
    110,
    116,
    56,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    105,
    110,
    116,
    56,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    105,
    110,
    116,
    49,
    54,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    105,
    110,
    116,
    49,
    54,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    105,
    110,
    116,
    51,
    50,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    105,
    110,
    116,
    51,
    50,
    95,
    116,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    99,
    104,
    97,
    114,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    62,
    0,
    115,
    116,
    100,
    58,
    58,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    108,
    111,
    110,
    103,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    108,
    111,
    110,
    103,
    62,
    0,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    58,
    58,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    100,
    111,
    117,
    98,
    108,
    101,
    62,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    49,
    50,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    73,
    99,
    78,
    83,
    95,
    49,
    49,
    99,
    104,
    97,
    114,
    95,
    116,
    114,
    97,
    105,
    116,
    115,
    73,
    99,
    69,
    69,
    78,
    83,
    95,
    57,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    111,
    114,
    73,
    99,
    69,
    69,
    69,
    69,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    50,
    49,
    95,
    95,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    95,
    99,
    111,
    109,
    109,
    111,
    110,
    73,
    76,
    98,
    49,
    69,
    69,
    69,
    0,
    68,
    12,
    0,
    0,
    62,
    7,
    0,
    0,
    200,
    12,
    0,
    0,
    255,
    6,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    100,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    49,
    50,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    73,
    104,
    78,
    83,
    95,
    49,
    49,
    99,
    104,
    97,
    114,
    95,
    116,
    114,
    97,
    105,
    116,
    115,
    73,
    104,
    69,
    69,
    78,
    83,
    95,
    57,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    111,
    114,
    73,
    104,
    69,
    69,
    69,
    69,
    0,
    0,
    200,
    12,
    0,
    0,
    132,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    100,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    49,
    50,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    73,
    119,
    78,
    83,
    95,
    49,
    49,
    99,
    104,
    97,
    114,
    95,
    116,
    114,
    97,
    105,
    116,
    115,
    73,
    119,
    69,
    69,
    78,
    83,
    95,
    57,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    111,
    114,
    73,
    119,
    69,
    69,
    69,
    69,
    0,
    0,
    200,
    12,
    0,
    0,
    220,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    100,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    49,
    50,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    73,
    68,
    115,
    78,
    83,
    95,
    49,
    49,
    99,
    104,
    97,
    114,
    95,
    116,
    114,
    97,
    105,
    116,
    115,
    73,
    68,
    115,
    69,
    69,
    78,
    83,
    95,
    57,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    111,
    114,
    73,
    68,
    115,
    69,
    69,
    69,
    69,
    0,
    0,
    0,
    200,
    12,
    0,
    0,
    52,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    100,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    78,
    83,
    116,
    51,
    95,
    95,
    50,
    49,
    50,
    98,
    97,
    115,
    105,
    99,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    73,
    68,
    105,
    78,
    83,
    95,
    49,
    49,
    99,
    104,
    97,
    114,
    95,
    116,
    114,
    97,
    105,
    116,
    115,
    73,
    68,
    105,
    69,
    69,
    78,
    83,
    95,
    57,
    97,
    108,
    108,
    111,
    99,
    97,
    116,
    111,
    114,
    73,
    68,
    105,
    69,
    69,
    69,
    69,
    0,
    0,
    0,
    200,
    12,
    0,
    0,
    144,
    8,
    0,
    0,
    0,
    0,
    0,
    0,
    1,
    0,
    0,
    0,
    100,
    7,
    0,
    0,
    0,
    0,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    51,
    118,
    97,
    108,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    236,
    8,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    99,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    8,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    97,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    48,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    104,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    88,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    115,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    128,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    116,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    168,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    105,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    208,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    106,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    248,
    9,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    108,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    32,
    10,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    109,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    72,
    10,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    102,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    112,
    10,
    0,
    0,
    78,
    49,
    48,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    49,
    49,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    73,
    100,
    69,
    69,
    0,
    0,
    68,
    12,
    0,
    0,
    152,
    10,
    0,
    0,
    83,
    116,
    57,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    0,
    0,
    0,
    0,
    68,
    12,
    0,
    0,
    192,
    10,
    0,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    54,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    0,
    0,
    0,
    108,
    12,
    0,
    0,
    216,
    10,
    0,
    0,
    208,
    10,
    0,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    49,
    55,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    0,
    0,
    108,
    12,
    0,
    0,
    8,
    11,
    0,
    0,
    252,
    10,
    0,
    0,
    0,
    0,
    0,
    0,
    124,
    11,
    0,
    0,
    2,
    0,
    0,
    0,
    3,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    6,
    0,
    0,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    50,
    51,
    95,
    95,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    108,
    12,
    0,
    0,
    84,
    11,
    0,
    0,
    252,
    10,
    0,
    0,
    118,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    136,
    11,
    0,
    0,
    98,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    148,
    11,
    0,
    0,
    99,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    160,
    11,
    0,
    0,
    104,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    172,
    11,
    0,
    0,
    97,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    184,
    11,
    0,
    0,
    115,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    196,
    11,
    0,
    0,
    116,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    208,
    11,
    0,
    0,
    105,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    220,
    11,
    0,
    0,
    106,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    232,
    11,
    0,
    0,
    108,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    244,
    11,
    0,
    0,
    109,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    0,
    12,
    0,
    0,
    120,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    12,
    12,
    0,
    0,
    121,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    24,
    12,
    0,
    0,
    102,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    36,
    12,
    0,
    0,
    100,
    0,
    0,
    0,
    64,
    11,
    0,
    0,
    48,
    12,
    0,
    0,
    0,
    0,
    0,
    0,
    44,
    11,
    0,
    0,
    2,
    0,
    0,
    0,
    7,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    9,
    0,
    0,
    0,
    10,
    0,
    0,
    0,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    180,
    12,
    0,
    0,
    2,
    0,
    0,
    0,
    12,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    13,
    0,
    0,
    0,
    14,
    0,
    0,
    0,
    15,
    0,
    0,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    50,
    48,
    95,
    95,
    115,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    0,
    0,
    0,
    108,
    12,
    0,
    0,
    140,
    12,
    0,
    0,
    44,
    11,
    0,
    0,
    0,
    0,
    0,
    0,
    16,
    13,
    0,
    0,
    2,
    0,
    0,
    0,
    16,
    0,
    0,
    0,
    4,
    0,
    0,
    0,
    5,
    0,
    0,
    0,
    8,
    0,
    0,
    0,
    17,
    0,
    0,
    0,
    18,
    0,
    0,
    0,
    19,
    0,
    0,
    0,
    78,
    49,
    48,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    50,
    49,
    95,
    95,
    118,
    109,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    69,
    0,
    0,
    0,
    108,
    12,
    0,
    0,
    232,
    12,
    0,
    0,
    44,
    11,
    0,
    65,
    156,
    26,
    11,
    3,
    48,
    15,
    80,
    0,
    197,
    29,
    4,
    110,
    97,
    109,
    101,
    1,
    251,
    28,
    72,
    0,
    21,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    118,
    111,
    105,
    100,
    1,
    21,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    98,
    111,
    111,
    108,
    2,
    27,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    115,
    116,
    100,
    95,
    115,
    116,
    114,
    105,
    110,
    103,
    3,
    28,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    115,
    116,
    100,
    95,
    119,
    115,
    116,
    114,
    105,
    110,
    103,
    4,
    22,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    101,
    109,
    118,
    97,
    108,
    5,
    24,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    105,
    110,
    116,
    101,
    103,
    101,
    114,
    6,
    22,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    102,
    108,
    111,
    97,
    116,
    7,
    28,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    8,
    22,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    114,
    101,
    115,
    105,
    122,
    101,
    95,
    104,
    101,
    97,
    112,
    9,
    21,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    109,
    101,
    109,
    99,
    112,
    121,
    95,
    98,
    105,
    103,
    10,
    35,
    108,
    101,
    103,
    97,
    108,
    105,
    109,
    112,
    111,
    114,
    116,
    36,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    98,
    105,
    103,
    105,
    110,
    116,
    11,
    17,
    95,
    95,
    119,
    97,
    115,
    109,
    95,
    99,
    97,
    108,
    108,
    95,
    99,
    116,
    111,
    114,
    115,
    12,
    4,
    109,
    97,
    105,
    110,
    13,
    13,
    95,
    95,
    103,
    101,
    116,
    84,
    121,
    112,
    101,
    78,
    97,
    109,
    101,
    14,
    28,
    115,
    116,
    100,
    58,
    58,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    110,
    97,
    109,
    101,
    40,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    15,
    42,
    95,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    110,
    97,
    116,
    105,
    118,
    101,
    95,
    97,
    110,
    100,
    95,
    98,
    117,
    105,
    108,
    116,
    105,
    110,
    95,
    116,
    121,
    112,
    101,
    115,
    16,
    74,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    17,
    76,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    99,
    104,
    97,
    114,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    18,
    68,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    115,
    104,
    111,
    114,
    116,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    19,
    77,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    115,
    104,
    111,
    114,
    116,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    20,
    66,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    105,
    110,
    116,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    21,
    75,
    118,
    111,
    105,
    100,
    32,
    40,
    97,
    110,
    111,
    110,
    121,
    109,
    111,
    117,
    115,
    32,
    110,
    97,
    109,
    101,
    115,
    112,
    97,
    99,
    101,
    41,
    58,
    58,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    109,
    101,
    109,
    111,
    114,
    121,
    95,
    118,
    105,
    101,
    119,
    60,
    117,
    110,
    115,
    105,
    103,
    110,
    101,
    100,
    32,
    105,
    110,
    116,
    62,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    41,
    22,
    110,
    69,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    66,
    105,
    110,
    100,
    105,
    110,
    103,
    73,
    110,
    105,
    116,
    105,
    97,
    108,
    105,
    122,
    101,
    114,
    95,
    110,
    97,
    116,
    105,
    118,
    101,
    95,
    97,
    110,
    100,
    95,
    98,
    117,
    105,
    108,
    116,
    105,
    110,
    95,
    116,
    121,
    112,
    101,
    115,
    58,
    58,
    69,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    66,
    105,
    110,
    100,
    105,
    110,
    103,
    73,
    110,
    105,
    116,
    105,
    97,
    108,
    105,
    122,
    101,
    114,
    95,
    110,
    97,
    116,
    105,
    118,
    101,
    95,
    97,
    110,
    100,
    95,
    98,
    117,
    105,
    108,
    116,
    105,
    110,
    95,
    116,
    121,
    112,
    101,
    115,
    40,
    41,
    23,
    49,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    126,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    40,
    41,
    24,
    43,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    110,
    111,
    111,
    112,
    49,
    40,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    25,
    63,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    126,
    95,
    95,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    40,
    41,
    26,
    97,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    102,
    117,
    110,
    100,
    97,
    109,
    101,
    110,
    116,
    97,
    108,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    99,
    97,
    110,
    95,
    99,
    97,
    116,
    99,
    104,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    38,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    27,
    60,
    105,
    115,
    95,
    101,
    113,
    117,
    97,
    108,
    40,
    115,
    116,
    100,
    58,
    58,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    115,
    116,
    100,
    58,
    58,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    28,
    91,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    99,
    97,
    110,
    95,
    99,
    97,
    116,
    99,
    104,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    104,
    105,
    109,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    38,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    29,
    107,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    95,
    102,
    111,
    117,
    110,
    100,
    95,
    98,
    97,
    115,
    101,
    95,
    99,
    108,
    97,
    115,
    115,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    30,
    110,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    104,
    97,
    115,
    95,
    117,
    110,
    97,
    109,
    98,
    105,
    103,
    117,
    111,
    117,
    115,
    95,
    112,
    117,
    98,
    108,
    105,
    99,
    95,
    98,
    97,
    115,
    101,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    31,
    113,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    104,
    97,
    115,
    95,
    117,
    110,
    97,
    109,
    98,
    105,
    103,
    117,
    111,
    117,
    115,
    95,
    112,
    117,
    98,
    108,
    105,
    99,
    95,
    98,
    97,
    115,
    101,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    32,
    115,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    98,
    97,
    115,
    101,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    104,
    97,
    115,
    95,
    117,
    110,
    97,
    109,
    98,
    105,
    103,
    117,
    111,
    117,
    115,
    95,
    112,
    117,
    98,
    108,
    105,
    99,
    95,
    98,
    97,
    115,
    101,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    33,
    40,
    117,
    112,
    100,
    97,
    116,
    101,
    95,
    111,
    102,
    102,
    115,
    101,
    116,
    95,
    116,
    111,
    95,
    98,
    97,
    115,
    101,
    40,
    99,
    104,
    97,
    114,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    108,
    111,
    110,
    103,
    41,
    34,
    114,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    118,
    109,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    104,
    97,
    115,
    95,
    117,
    110,
    97,
    109,
    98,
    105,
    103,
    117,
    111,
    117,
    115,
    95,
    112,
    117,
    98,
    108,
    105,
    99,
    95,
    98,
    97,
    115,
    101,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    35,
    131,
    1,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    95,
    115,
    116,
    97,
    116,
    105,
    99,
    95,
    116,
    121,
    112,
    101,
    95,
    97,
    98,
    111,
    118,
    101,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    36,
    118,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    112,
    114,
    111,
    99,
    101,
    115,
    115,
    95,
    115,
    116,
    97,
    116,
    105,
    99,
    95,
    116,
    121,
    112,
    101,
    95,
    98,
    101,
    108,
    111,
    119,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    37,
    115,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    118,
    109,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    98,
    101,
    108,
    111,
    119,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    38,
    129,
    1,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    98,
    97,
    115,
    101,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    97,
    98,
    111,
    118,
    101,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    39,
    116,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    98,
    97,
    115,
    101,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    98,
    101,
    108,
    111,
    119,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    40,
    114,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    98,
    101,
    108,
    111,
    119,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    41,
    111,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    98,
    101,
    108,
    111,
    119,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    128,
    1,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    118,
    109,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    97,
    98,
    111,
    118,
    101,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    43,
    127,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    115,
    105,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    97,
    98,
    111,
    118,
    101,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    44,
    124,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    99,
    108,
    97,
    115,
    115,
    95,
    116,
    121,
    112,
    101,
    95,
    105,
    110,
    102,
    111,
    58,
    58,
    115,
    101,
    97,
    114,
    99,
    104,
    95,
    97,
    98,
    111,
    118,
    101,
    95,
    100,
    115,
    116,
    40,
    95,
    95,
    99,
    120,
    120,
    97,
    98,
    105,
    118,
    49,
    58,
    58,
    95,
    95,
    100,
    121,
    110,
    97,
    109,
    105,
    99,
    95,
    99,
    97,
    115,
    116,
    95,
    105,
    110,
    102,
    111,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    118,
    111,
    105,
    100,
    32,
    99,
    111,
    110,
    115,
    116,
    42,
    44,
    32,
    105,
    110,
    116,
    44,
    32,
    98,
    111,
    111,
    108,
    41,
    32,
    99,
    111,
    110,
    115,
    116,
    45,
    16,
    95,
    95,
    101,
    114,
    114,
    110,
    111,
    95,
    108,
    111,
    99,
    97,
    116,
    105,
    111,
    110,
    46,
    8,
    100,
    108,
    109,
    97,
    108,
    108,
    111,
    99,
    47,
    6,
    100,
    108,
    102,
    114,
    101,
    101,
    48,
    4,
    115,
    98,
    114,
    107,
    49,
    6,
    109,
    101,
    109,
    115,
    101,
    116,
    50,
    9,
    115,
    116,
    97,
    99,
    107,
    83,
    97,
    118,
    101,
    51,
    12,
    115,
    116,
    97,
    99,
    107,
    82,
    101,
    115,
    116,
    111,
    114,
    101,
    52,
    10,
    115,
    116,
    97,
    99,
    107,
    65,
    108,
    108,
    111,
    99,
    53,
    21,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    105,
    110,
    105,
    116,
    54,
    27,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    115,
    101,
    116,
    95,
    108,
    105,
    109,
    105,
    116,
    115,
    55,
    25,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    102,
    114,
    101,
    101,
    56,
    25,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    98,
    97,
    115,
    101,
    57,
    24,
    101,
    109,
    115,
    99,
    114,
    105,
    112,
    116,
    101,
    110,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    103,
    101,
    116,
    95,
    101,
    110,
    100,
    58,
    6,
    102,
    102,
    108,
    117,
    115,
    104,
    59,
    17,
    95,
    95,
    102,
    102,
    108,
    117,
    115,
    104,
    95,
    117,
    110,
    108,
    111,
    99,
    107,
    101,
    100,
    60,
    10,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    105,
    105,
    61,
    10,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    62,
    12,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    105,
    105,
    105,
    105,
    63,
    15,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    105,
    105,
    64,
    14,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    105,
    65,
    13,
    100,
    121,
    110,
    67,
    97,
    108,
    108,
    95,
    118,
    105,
    105,
    105,
    105,
    66,
    33,
    108,
    101,
    103,
    97,
    108,
    102,
    117,
    110,
    99,
    36,
    95,
    101,
    109,
    98,
    105,
    110,
    100,
    95,
    114,
    101,
    103,
    105,
    115,
    116,
    101,
    114,
    95,
    98,
    105,
    103,
    105,
    110,
    116,
    67,
    21,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    97,
    114,
    116,
    95,
    117,
    110,
    119,
    105,
    110,
    100,
    68,
    20,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    111,
    112,
    95,
    117,
    110,
    119,
    105,
    110,
    100,
    69,
    21,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    97,
    114,
    116,
    95,
    114,
    101,
    119,
    105,
    110,
    100,
    70,
    20,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    115,
    116,
    111,
    112,
    95,
    114,
    101,
    119,
    105,
    110,
    100,
    71,
    18,
    97,
    115,
    121,
    110,
    99,
    105,
    102,
    121,
    95,
    103,
    101,
    116,
    95,
    115,
    116,
    97,
    116,
    101,
    7,
    45,
    3,
    0,
    15,
    95,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    112,
    111,
    105,
    110,
    116,
    101,
    114,
    1,
    11,
    95,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    101,
    110,
    100,
    2,
    12,
    95,
    95,
    115,
    116,
    97,
    99,
    107,
    95,
    98,
    97,
    115,
    101,
    9,
    17,
    2,
    0,
    7,
    46,
    114,
    111,
    100,
    97,
    116,
    97,
    1,
    5,
    46,
    100,
    97,
    116,
    97,
    0,
    31,
    16,
    115,
    111,
    117,
    114,
    99,
    101,
    77,
    97,
    112,
    112,
    105,
    110,
    103,
    85,
    82,
    76,
    13,
    109,
    97,
    105,
    110,
    46,
    119,
    97,
    115,
    109,
    46,
    109,
    97,
    112, 
];

},{"@parcel/transformer-js/src/esmodule-helpers.js":"dKQH3"}]},["76y2S","7nT7Y"], "7nT7Y", "parcelRequire2674")

//# sourceMappingURL=worker.d9598ca9.js.map
